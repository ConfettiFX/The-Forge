/*
* Copyright (c) 2018-2021 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float4, UV, TEXCOORD0);
};

PUSH_CONSTANT(RootConstant, b5)
{
	DATA(float, axis, None);
};

RES(Tex2D(float4), Source, UPDATE_FREQ_NONE, t0, binding = 0);
RES(SamplerState, LinearSampler, UPDATE_FREQ_NONE, s0, binding = 1);

float4 PS_MAIN( VSOutput In )
{    
	INIT_MAIN;
	float4 Out;
	const int StepCount = 2;
	const float Weights[StepCount] = { 0.44908f, 0.05092f };
	const float Offsets[StepCount] = { 0.53805f, 2.06278f };

	int2 dim = GetDimensions(Get(Source), NO_SAMPLER).xy;
	float2 stepSize = float2((1.0f - Get(axis)) / dim[0], Get(axis) / dim[1]);

	Out = f4(0.0f);

	UNROLL for (int i = 0; i < StepCount; ++i)
	{
		float2 offset = Offsets[i] * stepSize;
		Out += SampleTex2D(Get(Source), Get(LinearSampler), In.UV.xy + offset) * Weights[i];
		Out += SampleTex2D(Get(Source), Get(LinearSampler), In.UV.xy - offset) * Weights[i];
	}
	RETURN(Out);
}
