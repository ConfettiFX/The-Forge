/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "renderSceneBRDF_resources.h"

#define PI      3.14159265359
#define PI_DIV2 1.57079632679

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float3, pos, POSITION);
	DATA(float3, normal, NORMAL);
	DATA(float2, uv, TEXCOORD0);
};

//
// UTILITY FUNCTIONS
//
INLINE bool HasDiffuseTexture(int _textureConfig)   { return (_textureConfig & (1 << 0)) != 0; }
INLINE bool HasNormalTexture(int _textureConfig)    { return (_textureConfig & (1 << 1)) != 0; }
INLINE bool HasMetallicTexture(int _textureConfig)  { return (_textureConfig & (1 << 2)) != 0; }
INLINE bool HasRoughnessTexture(int _textureConfig) { return (_textureConfig & (1 << 3)) != 0; }
INLINE bool HasAOTexture(int _textureConfig)        { return (_textureConfig & (1 << 4)) != 0; }

INLINE bool IsOrenNayarDiffuse(int _textureConfig)  { return (_textureConfig & (1 << 5)) != 0; }

float3 ReconstructNormal(float4 sampleNormal, float intensity)
{
	float3 tangentNormal;
	tangentNormal.xy = (sampleNormal.rg * 2 - 1) * intensity;
	tangentNormal.z = sqrt(1 - saturate(dot(tangentNormal.xy, tangentNormal.xy)));
	return tangentNormal;
}

INLINE float3 UnpackNormals(float2 uv, float3 pos, Tex2D(float4) _normalMap, SamplerState samplerState, float3 normal, float intensity)
{
	float3 tangentNormal = ReconstructNormal(SampleTex2D(_normalMap, samplerState, uv), intensity);

	float3 Q1 = ddx(pos);
	float3 Q2 = ddy(pos);
	float2 st1 = ddx(uv);
	float2 st2 = ddy(uv);

	float3 N = normalize(normal);
	float3 T = normalize(Q1*st2.g - Q2 * st1.g);
	float3 B = normalize(cross(T, N));
	float3x3 TBN = make_f3x3_rows(T, B, N);
	return normalize(mul(tangentNormal, TBN));
}

//
// LIGHTING FUNCTIONS
//
float3 FresnelSchlickRoughness(float cosTheta, float3 F0, float roughness)
{
	float3 ret = float3(0.0, 0.0, 0.0);
	float powTheta = pow(1.0 - cosTheta, 5.0);
	float invRough = float(1.0 - roughness);

	ret.x = F0.x + (max(invRough, F0.x) - F0.x) * powTheta;
	ret.y = F0.y + (max(invRough, F0.y) - F0.y) * powTheta;
	ret.z = F0.z + (max(invRough, F0.z) - F0.z) * powTheta;

	return ret;
}

float3 FresnelSchlick(float cosTheta, float3 F0)
{
	return F0 + (1.0f - F0) * pow(1.0 - cosTheta, 5.0);
}

float DistributionGGX(float3 N, float3 H, float roughness)
{
	float a = roughness*roughness;
	float a2 = a*a;
	float NdotH = max(dot(N, H), 0.0);
	float NdotH2 = NdotH*NdotH;
	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0f);
	float k = (r*r) / 8.0f;

	float nom = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return nom / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

float3 LambertDiffuse(float3 albedo, float3 kD)
{
	return kD * albedo / PI;
}

float3 OrenNayarDiffuse(float3 L, float3 V, float3 N, float roughness, float3 albedo, float3 kD)
{
	// src: https://www.gamasutra.com/view/feature/131269/implementing_modular_hlsl_with_.php?page=3

	const float NdotL = max(dot(N, L), 0.0f);
	const float NdotV = max(dot(N, V), 0.0f);

	// gamma: the azimuth (circular angle) between L and V
	//
	const float gamma = max(0.0f, dot( normalize(V - N * NdotV), normalize(L - N * NdotL) ));

	// alpha and beta represent the polar angles in spherical coord system
	//
	// alpha = min(theta_L, theta_V)
	// beta  = max(theta_L, theta_V)
	//
	// where theta_L is the angle between N and L
	//   and theta_V is the angle between N and V
	//
	const float alpha = max( acos(NdotV), acos(NdotL) );
	const float beta  = min( acos(NdotV), acos(NdotL) );

	const float sigma2 = roughness * roughness;

	// Oren-Nayar constants
	const float A = 1.0f - 0.5f * sigma2 / (sigma2 + 0.33f);
	float B = 0.45f * sigma2 / (sigma2 + 0.09f);
	if (gamma >= 0)
		B *= sin(alpha) * clamp(tan(beta), -PI_DIV2, PI_DIV2);
	else
		B = 0.0f;

	return (A + B) * albedo * kD / PI;
}


float3 BRDF(float3 N, float3 V, float3 L, float3 albedo, float roughness, float metalness, int isOrenNayar)
{	
	const float3 H = normalize(V + L);

	// F0 represents the base reflectivity (calculated using IOR: index of refraction)
	float3 F0 = float3(0.04f, 0.04f, 0.04f);
	F0 = lerp(F0, albedo, metalness);

	float NDF = DistributionGGX(N, H, roughness);
	float G = GeometrySmith(N, V, L, roughness);
	float3 F = FresnelSchlick(max(dot(N, H), 0.0f), F0);

	float3 kS = F;
	float3 kD = (float3(1.0f, 1.0f, 1.0f) - kS) * (1.0f - metalness);

	// Id & Is: diffuse & specular illumination
	float3 Is = NDF * G * F / (4.0f * max(dot(N, V), 0.0f) * max(dot(N, L), 0.0f) + 0.001f);
	float3 Id = float3(0,0,0);
	if (isOrenNayar != 0)
		//Id = OrenNayarDiffuse(L, V, N, roughness, albedo, kD);
		return OrenNayarDiffuse(L, V, N, roughness, albedo, kD);
	else
		Id = LambertDiffuse(albedo, kD);

	return Id + Is;
}

float3 EnvironmentBRDF(float3 N, float3 V, float3 albedo, float roughness, float metalness)
{
	const float3 R = reflect(-V, N);

	// F0 represents the base reflectivity (calculated using IOR: index of refraction)
	float3 F0 = float3(0.04f, 0.04f, 0.04f);
	F0 = lerp(F0, albedo, metalness);

	float3 F = FresnelSchlickRoughness(max(dot(N, V), 0.0f), F0, roughness);

	float3 kS = F;
	float3 kD = (float3(1.0f, 1.0f, 1.0f) - kS) * (1.0f - metalness);

	float3 irradiance = SampleTexCube(Get(irradianceMap), Get(bilinearSampler), N).rgb;
	float3 specular = SampleLvlTexCube(Get(specularMap), Get(bilinearSampler), R, roughness * 4).rgb;

	float2 maxNVRough = float2(max(dot(N, V), 0.0), roughness);
	float2 brdf = SampleTex2D(Get(brdfIntegrationMap), Get(bilinearClampedSampler), maxNVRough).rg;

	// Id & Is: diffuse & specular illumination
	float3 Is = specular * (F * brdf.x + brdf.y);
	float3 Id = kD * irradiance * albedo;
	
	//if (isOrenNayar)
	//	Id = OrenNayarDiffuse(L, V, N, roughness, albedo, kD);
	//else
	//	Id = LambertDiffuse(albedo, kD);

	return (Id + Is);
}

float ShadowTest(float4 Pl, float2 shadowMapDimensions)
{
	// homogenous position after perspective divide
	const float3 projLSpaceCoords = Pl.xyz / Pl.w;

	// light frustum check
	if (projLSpaceCoords.x < -1.0f || projLSpaceCoords.x > 1.0f ||
		projLSpaceCoords.y < -1.0f || projLSpaceCoords.y > 1.0f ||
		projLSpaceCoords.z <  0.0f || projLSpaceCoords.z > 1.0f
		)
	{
		return 1.0f;
	}

	const float2 texelSize = 1.0f / (shadowMapDimensions);
	
	// clip space [-1, 1] --> texture space [0, 1]
	const float2 shadowTexCoords = float2(0.5f, 0.5f) + projLSpaceCoords.xy * float2(0.5f, -0.5f);	// invert Y
	
	//const float BIAS = pcfTestLightData.depthBias * tan(acos(pcfTestLightData.NdotL));
	const float BIAS = 0.000001f;
	const float pxDepthInLSpace = projLSpaceCoords.z;

	float shadow = 0.0f;
	const int rowHalfSize = 2;

	// PCF
	for (int x = -rowHalfSize; x <= rowHalfSize; ++x)
	{
		for (int y = -rowHalfSize; y <= rowHalfSize; ++y)
		{
			float2 texelOffset = float2(x, y) * texelSize;
			float closestDepthInLSpace = SampleLvlTex2D(Get(shadowMap), Get(bilinearSampler), shadowTexCoords + texelOffset, 0).x;	// TODO point sampler

			// depth check
			shadow += (pxDepthInLSpace - BIAS> closestDepthInLSpace) ? 1.0f : 0.0f;
		}
	}

	shadow /= (rowHalfSize * 2 + 1) * (rowHalfSize * 2 + 1);
	return 1.0 - shadow;
}

float4 PS_MAIN(VSOutput In)
{
	INIT_MAIN;
	float4 Out;
	// Read material surface properties
	//
	const float2 uv = In.uv * Get(tiling);
	float3 _albedo = HasDiffuseTexture(Get(textureConfig))
		? SampleTex2D(Get(albedoMap), Get(bilinearSampler), uv).rgb
		: Get(albedoAndRoughness).rgb;

	float _roughness = HasRoughnessTexture(Get(textureConfig))
		? SampleTex2D(Get(roughnessMap), Get(bilinearSampler), uv).r
		: Get(albedoAndRoughness).a;
	if (_roughness < 0.04) _roughness = 0.04;

	const float _metalness = HasMetallicTexture(Get(textureConfig)) 
		? SampleTex2D(Get(metallicMap), Get(bilinearSampler), uv).r
		: Get(baseMetalness);

	const float _ao = HasAOTexture(Get(textureConfig)) 
		? SampleTex2D(Get(aoMap), Get(bilinearSampler), uv).r
		: 1.0f;

	float3 N = HasNormalTexture(Get(textureConfig))
		? UnpackNormals(uv, In.pos, Get(normalMap), Get(bilinearSampler), In.normal, Get(fNormalMapIntensity))
		: normalize(In.normal);

	_albedo = pow(_albedo, f3(2.2f));
	
	const int isOrenNayar = IsOrenNayarDiffuse(Get(textureConfig)) ? 1 : 0;

	const float3 P = In.pos.xyz;
	const float3 V = normalize(Get(camPos).xyz - P);


	
	float3 Lo = float3(0.0f, 0.0f, 0.0f);	// outgoing radiance

	// Direct Lights
	uint i;
	for (i = 0; i < Get(NumPointLights); ++i)
	{
		const float3 Pl = Get(PointLights)[i].positionAndRadius.xyz;
		const float  radius = Get(PointLights)[i].positionAndRadius.w;
		const float3 L = normalize(Pl - P);
		const float  NdotL = max(dot(N, L), 0.0f);
		const float  distance = length(Pl - P);
		const float  distanceByRadius = 1.0f - pow((distance / radius), 4);
		const float  clamped = pow(saturate(distanceByRadius), 2.0f);
		const float  attenuation = clamped / (distance * distance + 1.0f);

		const float3 color = Get(PointLights)[i].colorAndIntensity.rgb;
		const float  intensity = Get(PointLights)[i].colorAndIntensity.a;
		const float3 radiance = color * intensity * attenuation;

		Lo += BRDF(N, V, L, _albedo, _roughness, _metalness, isOrenNayar) * radiance * NdotL;
	}

	for (i = 0; i < Get(NumDirectionalLights); ++i)
	{
		const float3 L = Get(DirectionalLights)[i].directionAndShadowMap.xyz;
		const float4 P_lightSpace = mul( Get(DirectionalLights)[i].viewProj, float4(P, 1.0f) );
		const float  NdotL = max(dot(N, L), 0.0f);
		const float3 color = Get(DirectionalLights)[i].colorAndIntensity.rgb;
		const float  intensity = Get(DirectionalLights)[i].colorAndIntensity.a;
		const float3 radiance = color * intensity;
		const float  shadowing = ShadowTest(P_lightSpace, f2(Get(DirectionalLights)[i].shadowMapDimensions));

		Lo += BRDF(N, V, L, _albedo, _roughness, _metalness, isOrenNayar) * radiance * NdotL * shadowing;
	}


	// Environment Lighting
	if (Get(bUseEnvironmentLight) != 0)
	{
		float aoWithIntensity = _ao  * Get(fAOIntensity) + (1.0f - Get(fAOIntensity));
		Lo += EnvironmentBRDF(N, V, _albedo, _roughness, _metalness) * float3(aoWithIntensity, aoWithIntensity, aoWithIntensity) * Get(fEnvironmentLightIntensity);
	}
	else
	{
		if(HasAOTexture(Get(textureConfig)))
			Lo += _albedo * (_ao  * Get(fAOIntensity) + (1.0f - Get(fAOIntensity))) * Get(fAmbientLightIntensity);
	}
	
	// Gamma correction
	float3 color = Lo;
	color = color / (color + float3(1.0f, 1.0f, 1.0f));
	float gammaCorr = 1.0f / 2.2f;
	color = pow(color, f3(gammaCorr));
	
	// final color
	switch (Get(renderMode))
	{
	default:
	case 0: break;
	case 1: color = pow(_albedo, f3(gammaCorr)); break;
	case 2: color = N; break;
	case 3: color = f3(_roughness); break;
	case 4: color = f3(_metalness); break;
	case 5: color = (f3(_ao) * Get(fAOIntensity) + (1.0f - Get(fAOIntensity))); break;
	}

	Out = float4(color.r, color.g, color.b, 1.0f);
	RETURN(Out);
}
