/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef SAMPLE_DELTA
	#define SAMPLE_DELTA 0.25f
#endif

STATIC const float Pi = 3.14159265359;
STATIC float SampleDelta = SAMPLE_DELTA;

RES(TexCube(float4), srcTexture, UPDATE_FREQ_NONE, t0, binding = 0);
RES(WTex2DArray(float4), dstTexture, UPDATE_FREQ_NONE, u2, binding = 2);
RES(SamplerState, skyboxSampler, UPDATE_FREQ_NONE, s3, binding = 3);

float4 computeIrradiance(float3 N)
{
	float4 irradiance = float4(0.0, 0.0, 0.0, 0.0);

	float3 up = float3(0.0, 1.0, 0.0);
	float3 right = cross(up, N);
	up = cross(N, right);

	float nrSamples = 0.0;

	for (float phi = 0.0; phi < 2.0 * Pi; phi += SampleDelta)
	{
		for (float theta = 0.0; theta < 0.5 * Pi; theta += SampleDelta)
		{
			// spherical to cartesian (in tangent space)
			float3 tangentSample = float3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));

			// tangent space to world
			float3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;

			float4 sampledValue = SampleLvlTexCube(Get(srcTexture), Get(skyboxSampler), sampleVec, 0);
		
			irradiance += float4(sampledValue.rgb * cos(theta) * sin(theta), sampledValue.a);
			nrSamples++;

		}
	}

	return Pi * irradiance * (1.0 / float(nrSamples));
}

NUM_THREADS(16, 16, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) DTid) 
{
	INIT_MAIN;

	float3 threadPos = float3(DTid);
	uint pixelOffset = 0;

	for (uint i = 0; i < threadPos.z; ++i)
	{
		pixelOffset += 32 * 32;
	}

	float2 texcoords = float2(float(threadPos.x + 0.5) / 32.0f, float(threadPos.y + 0.5) / 32.0f);

	float3 sphereDir = f3(1);

	if (threadPos.z <= 0)
		sphereDir = normalize(float3(0.5, -(texcoords.y - 0.5), -(texcoords.x - 0.5)));
	else if (threadPos.z <= 1)
		sphereDir = normalize(float3(-0.5, -(texcoords.y - 0.5), texcoords.x - 0.5));
	else if (threadPos.z <= 2)
		sphereDir = normalize(float3(texcoords.x - 0.5, 0.5, texcoords.y - 0.5));
	else if (threadPos.z <= 3)
		sphereDir = normalize(float3(texcoords.x - 0.5, -0.5, -(texcoords.y - 0.5)));
	else if (threadPos.z <= 4)
		sphereDir = normalize(float3(texcoords.x - 0.5, -(texcoords.y - 0.5), 0.5));
	else if (threadPos.z <= 5)
		sphereDir = normalize(float3(-(texcoords.x - 0.5), -(texcoords.y - 0.5), -0.5));

	// uint pixelId = uint(pixelOffset + threadPos.y * 32 + threadPos.x);

	float4 irradiance = computeIrradiance(sphereDir);

	Write3D(Get(dstTexture), int3(threadPos.xyz), irradiance);

	RETURN();
}
