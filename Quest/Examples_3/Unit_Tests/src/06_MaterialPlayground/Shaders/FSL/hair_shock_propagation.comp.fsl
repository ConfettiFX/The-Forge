/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

/*
*Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in
*all copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*THE SOFTWARE.
*/

#include "hair.comp.h"

NUM_THREADS(THREAD_GROUP_SIZE, 1, 1)
void CS_MAIN( SV_GroupIndex(uint) groupIndex, SV_GroupID(uint3) groupID )
{
	INIT_MAIN;
	StrandIndices indices = CalculateStrandIndices(groupIndex, groupID.x);

	float4 rootPosPrevPrev;
	float4 rootPosPrev[2];
	float4 rootPos[2];

	rootPosPrevPrev = Get(HairVertexPositionsPrevPrev)[indices.globalRootVertexIndex + 1];

	rootPosPrev[0] = Get(HairVertexPositionsPrev)[indices.globalRootVertexIndex];
	rootPosPrev[1] = Get(HairVertexPositionsPrev)[indices.globalRootVertexIndex + 1];

	rootPos[0] = Get(HairVertexPositions)[indices.globalRootVertexIndex];
	rootPos[1] = Get(HairVertexPositions)[indices.globalRootVertexIndex + 1];

	float3 u = normalize(rootPosPrev[1].xyz - rootPosPrev[0].xyz);
	float3 v = normalize(rootPos[1].xyz - rootPos[0].xyz);

	float4 rotation = QuatFromUnitVectors(u, v);
	float3 RotateVecation = rootPos[0].xyz - RotateVec(rotation, rootPosPrev[0].xyz);

	float vspStrength = Get(VSPStrength);
	float acceleration = length((rootPos[1] - 2.0f * rootPosPrev[1] + rootPosPrevPrev[1]).xyz);

	if (acceleration > Get(VSPAccelerationThreshold))
		vspStrength = 1.0f;

	for(uint localVertexIndex = 2; localVertexIndex < Get(NumVerticesPerStrand); ++localVertexIndex)
	{
		uint globalVertexIndex = indices.globalRootVertexIndex + localVertexIndex;

		float4 pos = Get(HairVertexPositions)[globalVertexIndex];
		float4 posPrev = Get(HairVertexPositionsPrev)[globalVertexIndex];

		pos.xyz = (1.0f - vspStrength) * pos.xyz + vspStrength * (RotateVec(rotation, pos.xyz) + RotateVecation);
		posPrev.xyz = (1.0f - vspStrength) * posPrev.xyz + vspStrength * (RotateVec(rotation, posPrev.xyz) + RotateVecation);

		Get(HairVertexPositions)[globalVertexIndex] = pos;
		Get(HairVertexPositionsPrev)[globalVertexIndex] = posPrev;
	}
	RETURN();
}