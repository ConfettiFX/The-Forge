/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

/*
*Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in
*all copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*THE SOFTWARE.
*/

#define SHORT_CUT_FILL_COLOR
#include "hair.h"

float3 ComputeDiffuseSpecularFactors(float3 eyeDir, float3 lightDir, float3 tangentDir)
{
	float coneAngleRadians = 10.0f * PI / 180.0f;

	// Kajiya's model
	float cosTL = dot(tangentDir, lightDir);
	float sinTL = sqrt(1.0f - cosTL * cosTL);
	float diffuse = sinTL;

	float cosTRL = -cosTL;
	float sinTRL = sinTL;
	float cosTE = dot(tangentDir, eyeDir);
	float sinTE = sqrt(1.0f - cosTE * cosTE);

	// Primary highlight
	float primaryCosTRL = cosTRL * cos(2.0f * coneAngleRadians) - sinTRL * sin(2.0f * coneAngleRadians);
	float primarySinTRL = sqrt(1.0f - primaryCosTRL * primaryCosTRL);
	float primarySpecular = max(0.0f, primaryCosTRL * cosTE + primarySinTRL * sinTE);

	// Secundary highlight
	float secundaryCosTRL = cosTRL * cos(-3.0f * coneAngleRadians) - sinTRL * sin(-3.0f * coneAngleRadians);
	float secundarySinTRL = sqrt(1.0f - secundaryCosTRL * secundaryCosTRL);
	float secundarySpecular = max(0.0f, secundaryCosTRL * cosTE + secundarySinTRL * sinTE);


	float3 diffuseSpecular = float3(Get(Kd) * diffuse, Get(Ks1) * pow(primarySpecular, Get(Ex1)), Get(Ks2) * pow(secundarySpecular, Get(Ex2)));
#if defined(ORBIS) || defined(PROSPERO)
	diffuseSpecular *= 0.07f;	// Reduce light intensity to account for extremely bright lights used in PBR
#endif
	return diffuseSpecular;
}

float3 CalculateDirectionalLightContribution(uint lightIndex, float3 worldPosition, float3 tangent, float3 viewDirection, float3 baseColor)
{
	const DirectionalLight light = Get(DirectionalLights)[lightIndex];
	const float3 color = light.colorAndIntensity.rgb;
	const float intensity = light.colorAndIntensity.a;
	const float3 direction = light.directionAndShadowMap.xyz;
	const int shadowMap = int(light.directionAndShadowMap.w);
	float3 radiance = color * intensity;
	float3 reflection = ComputeDiffuseSpecularFactors(viewDirection, direction, tangent);
	float3 reflectedLight = reflection.x * radiance * baseColor;	// diffuse
	reflectedLight += reflection.y * radiance;	// 1st specular highlight
	reflectedLight += reflection.z * radiance;	// 2nd specular highlight

	if (shadowMap >= 0 && shadowMap < MAX_NUM_DIRECTIONAL_LIGHTS)
	{
		float4 shadowPos = mul(Get(ShadowCameras)[lightIndex].VPMatrix, float4(worldPosition, 1.0f));
		shadowPos.y = -shadowPos.y;
		shadowPos.xy = (shadowPos.xy + 1.0f) * 0.5f;

		float totalWeight = 0.0f;
		float shadowFactor = 0.0f;

		const int kernelSize = 5;
		const float size = 2.4f;
		const float sigma = (kernelSize / 2.0f) / size;
		const float hairAlpha = 0.99998f;
		#ifdef VULKAN
		// Had to manually unroll loop. textureLodOffset requires offset parameter to be a compile time constant.
		#define LOOP_BODY(x, y)																				\
		{																							\
			float exp = 1.0f - (x * x + y * y) / (2.0f * sigma * sigma);							\
			float weight = 1.0f / (2.0f * PI * sigma * sigma) * pow(e, exp);						\
			float shadowMapDepth = SampleLvlOffsetTex2D(Get(DirectionalLightShadowMaps)[shadowMap], Get(PointSampler), shadowPos.xy, 0, ivec2(x, y)).r;	\
			float shadowRange = max(0.0f, light.shadowRange * (shadowPos.z - shadowMapDepth));		\
			float numFibers = shadowRange / (Get(FiberSpacing) * Get(FiberRadius));							\
			if (shadowRange > EPSILON) numFibers += 1;												\
			shadowFactor += pow(hairAlpha, numFibers) * weight;										\
			totalWeight += weight;																	\
		}

		LOOP_BODY(-2, -2)
		LOOP_BODY(-2, -1)
		LOOP_BODY(-2, 0)
		LOOP_BODY(-2, 1)
		LOOP_BODY(-2, 2)
		LOOP_BODY(-1, -2)
		LOOP_BODY(-1, -1)
		LOOP_BODY(-1, 0)
		LOOP_BODY(-1, 1)
		LOOP_BODY(-1, 2)
		LOOP_BODY(0, -2)
		LOOP_BODY(0, -1)
		LOOP_BODY(0, 0)
		LOOP_BODY(0, 1)
		LOOP_BODY(0, 2)
		LOOP_BODY(1, -2)
		LOOP_BODY(1, -1)
		LOOP_BODY(1, 0)
		LOOP_BODY(1, 1)
		LOOP_BODY(1, 2)
		LOOP_BODY(2, -2)
		LOOP_BODY(2, -1)
		LOOP_BODY(2, 0)
		LOOP_BODY(2, 1)
		LOOP_BODY(2, 2)

		#else

		UNROLL
		for (int x = (1 - kernelSize) / 2; x <= kernelSize / 2; ++x)
		{
			UNROLL
			for (int y = (1 - kernelSize) / 2; y <= kernelSize / 2; ++y)
			{
				float exp = 1.0f - (x * x + y * y) / (2.0f * sigma * sigma);
				float weight = 1.0f / (2.0f * PI * sigma * sigma) * pow(e, exp);

				float shadowMapDepth = SampleLvlOffsetTex2D(Get(DirectionalLightShadowMaps)[shadowMap], Get(PointSampler), shadowPos.xy, 0, int2(x, y)).r;
				float shadowRange = max(0.0f, light.shadowRange * (shadowPos.z - shadowMapDepth));
				float numFibers = shadowRange / (Get(FiberSpacing) * Get(FiberRadius));

				FLATTEN if (shadowRange > EPSILON)
					numFibers += 1;

				shadowFactor += pow(hairAlpha, numFibers) * weight;
				totalWeight += weight;
			}
		}
		#endif

		shadowFactor /= totalWeight;

		reflectedLight *= shadowFactor;
	}
	
	return max(f3(0.0f), reflectedLight);
}

float3 CalculatePointLightContribution(uint lightIndex, float3 worldPosition, float3 tangent, float3 viewDirection, float3 baseColor)
{
	const PointLight light = Get(PointLights)[lightIndex];
	const float3 color = light.colorAndIntensity.rgb;
	const float intensity = light.colorAndIntensity.w;
	const float3 pos = light.positionAndRadius.xyz;
	const float radius = light.positionAndRadius.w;
	float3 L = normalize(pos - worldPosition);

	float distance = length(pos - worldPosition);
	float distanceByRadius = 1.0f - pow((distance / radius), 4);
	float clamped = pow(saturate(distanceByRadius), 2.0f);
	float attenuation = clamped / (distance * distance + 1.0f);
	float3 radiance = color * attenuation * intensity;

	float3 reflection = ComputeDiffuseSpecularFactors(viewDirection, L, tangent);
	float3 reflectedLight = reflection.x * radiance * baseColor;	// diffuse
	reflectedLight += reflection.y * radiance;	// 1st specular highlight
	reflectedLight += reflection.z * radiance;	// 2nd specular highlight
	return max(f3(0.0f), reflectedLight);
}

float3 HairShading(float3 worldPos, float3 eyeDir, float3 tangent, float3 baseColor)
{
	float3 color = f3(0.0f);

	uint i;
	for (i = 0; i < Get(NumPointLights); ++i)
		color += CalculatePointLightContribution(i, worldPos, tangent, eyeDir, baseColor);

	for (i = 0; i < Get(NumDirectionalLights); ++i)
		color += CalculateDirectionalLightContribution(i, worldPos, tangent, eyeDir, baseColor);
		
	return color;
}
#if !defined(ORBIS)
EARLY_FRAGMENT_TESTS
#endif
float4 PS_MAIN( VSOutput In )
{
	INIT_MAIN;
	float4 Out;
	float3 NDC = ScreenPosToNDC(In.Position.xyz, Get(Viewport));
	float2 p0 = In.P0P1.xy / In.W0W1.x;
	float2 p1 = In.P0P1.zw / In.W0W1.y;
	float coverage = ComputeCoverage(p0, p1, NDC.xy, Get(Viewport).zw);
	clip(coverage);
	float alpha = coverage * In.Color.a;
	clip(alpha - (1.0f / 255.0f));

	if (alpha < SHORT_CUT_MIN_ALPHA)
	{
		Out = f4(0.0f);
		RETURN(Out);
	}

	float4 worldPos = mul(Get(Cam).InvVPMatrix[VR_VIEW_ID(In.ViewID)], float4(NDC, 1.0f));
	worldPos.xyz /= worldPos.w;
	float3 eyeDir = normalize(worldPos.xyz - Get(Cam).Pos);

	float3 color = HairShading(worldPos.xyz, -eyeDir, normalize(In.Tangent.xyz), In.Color.rgb);

	Out = float4(color.rgb * alpha, alpha);
	RETURN(Out);
}