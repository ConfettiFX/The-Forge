/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// Shader for simple shading with a point light
// for skeletons in Unit Tests Animation

#define MAX_INSTANCES 815

CBUFFER(uniformBlock, UPDATE_FREQ_PER_DRAW, b0, binding = 0)
{
	DATA(float4x4, mvp[VR_MULTIVIEW_COUNT], None);
    DATA(float4, color[MAX_INSTANCES], None);
    // Point Light Information
    DATA(float4, lightPosition, None);
    DATA(float4, lightColor, None);
    DATA(float4x4, toWorld[MAX_INSTANCES], None);
};

STRUCT(VSInput)
{
	DATA(float4, Position, POSITION);
	DATA(float4, Normal,   NORMAL);
};

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float4, Color,   COLOR);
};

VSOutput VS_MAIN( VSInput In, SV_InstanceID(uint) InstanceID) 
{
    INIT_MAIN;
    VSOutput Out;
    float4x4 tempMat = mul(Get(mvp)[VR_VIEW_ID], Get(toWorld)[InstanceID]);
    Out.Position = mul(tempMat, In.Position);

    float4 normal = normalize(mul(Get(toWorld)[InstanceID], float4(In.Normal.xyz, 0.0f))); // Assume uniform scaling
    float4 pos = mul(Get(toWorld)[InstanceID], float4(In.Position.xyz, 1.0f));

    float lightIntensity = 1.0f;
    // float quadraticCoeff = 1.2;
    float ambientCoeff = 0.4;

    float3 lightDir = normalize(Get(lightPosition).xyz - pos.xyz);

    // float distance = length(lightDir);
    // float attenuation = 1.0 / (quadraticCoeff * distance * distance);
    // float intensity = lightIntensity * attenuation;

    float3 baseColor = Get(color)[InstanceID].xyz;
    float3 blendedColor = (Get(lightColor).rgb * baseColor) * lightIntensity;
    float3 diffuse = blendedColor * max(dot(normal.xyz, lightDir), 0.0);
    float3 ambient = baseColor * ambientCoeff;
    Out.Color = float4(diffuse + ambient, 1.0);
    RETURN(Out);
}
