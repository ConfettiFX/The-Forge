/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

/*
*Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in
*all copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*THE SOFTWARE.
*/

#include "hair.comp.h"

float2 ConstraintMultiplier(float4 particle0, float4 particle1)
{
	if (particle0.w > 0.0f)
	{
		if (particle1.w > 0.0f)
			return float2(0.5, 0.5);
		else
			return float2(1, 0);
	}
	else
	{
		if (particle1.w > 0.0f)
			return float2(0, 1);
		else
			return float2(0, 0);
	}
}

void ApplyDistanceConstraint(groupshared(float4) pos0, groupshared(float4) pos1, float targetDistance)
{
	const float stiffness = 1.0f;
	float3 delta = pos1.xyz - pos0.xyz;
	float distance = max(length(delta), 1e-7);
	float stretching = 1 - targetDistance / distance;
	delta = stretching * delta;
	float2 multiplier = ConstraintMultiplier(pos0, pos1);

	pos0.xyz += multiplier[0] * delta * stiffness;
	pos1.xyz -= multiplier[1] * delta * stiffness;
}

bool CapsuleCollision(inout(float3) newPosition, float3 prevPosition, const Capsule capsule)
{
	const float friction = 0.4f;

	const float3 center0 = capsule.center0AndRadius0.xyz;
	const float  radius0 = capsule.center0AndRadius0.w;
	const float3 center1 = capsule.center1AndRadius1.xyz;
	const float  radius1 = capsule.center1AndRadius1.w;

	float3 segment = center1 - center0;
	float3 delta0 = newPosition.xyz - center0;
	float3 delta1 = center1 - newPosition.xyz;

	float dist0 = dot(delta0, segment);
	float dist1 = dot(delta1, segment);

	// Collide sphere 0
	if (dist0 < 0.0f)
	{
		if (dot(delta0, delta0) < radius0 * radius0)
		{
			float3 n = normalize(delta0);
			newPosition = radius0 * n + center0;
			return true;
		}

		return false;
	}

	// Collide sphere 1
	if (dist1 < 0.0f)
	{
		if (dot(delta1, delta1) < radius1 * radius1)
		{
			float3 n = normalize(-delta1);
			newPosition = radius1 * n + center1;
			return true;
		}

		return false;
	}

	// Collide cylinder
	float3 x = (dist0 * center1 + dist1 * center0) / (dist0 + dist1);
	float3 delta = newPosition - x;
	float radius = (dist0 * radius1 + dist1 * radius0) / (dist0 + dist1);

	if (dot(delta, delta) < radius * radius)
	{
		float3 n = normalize(delta);
		float3 vec = newPosition - prevPosition;
		float3 nSeg = normalize(segment);
		float3 tangent = dot(vec, nSeg) * nSeg;
		float3 normal = vec - tangent;
		newPosition = prevPosition + friction * tangent + (normal + radius * n - delta);
		return true;
	}

	return false;
}

#if HAIR_MAX_CAPSULE_COUNT > 0
bool ResolveCapsuleCollisions(groupshared(float4) currentPosition, float4 prevPosition)
{
	if (currentPosition.w == 0.0f)
		return false;

	bool anyCollided = false;

	float3 newPosition = currentPosition.xyz;

	for (uint i = 0; i < Get(mCapsuleCount); ++i)
	{
		bool collided = CapsuleCollision(newPosition, prevPosition.xyz, Get(Capsules)[i]);

		if (collided)
			currentPosition.xyz = newPosition;

		anyCollided = anyCollided || collided;
	}

	return anyCollided;
}
#endif

NUM_THREADS(THREAD_GROUP_SIZE, 1, 1)
void CS_MAIN( SV_GroupIndex(uint) groupIndex, SV_GroupID(uint3) groupID )
{
	INIT_MAIN;
	// Copy to shared memory
	VertexIndices indices = CalculateVertexIndices(groupIndex, groupID.x);
	sharedPos[indices.indexSharedMem] = Get(HairVertexPositions)[indices.globalVertexIndex];
	sharedLength[indices.indexSharedMem] = Get(HairRestLengths)[indices.globalVertexIndex] * Get(Scale);

	GroupMemoryBarrier();
	
	// Wind
	if (indices.localVertexIndex >= 2 && indices.localVertexIndex < Get(NumVerticesPerStrand) - 1)
	{
		uint sharedIndex = indices.localVertexIndex * Get(NumStrandsPerThreadGroup) + indices.localStrandIndex;

		float3 v = sharedPos[sharedIndex].xyz - sharedPos[sharedIndex + Get(NumStrandsPerThreadGroup)].xyz;
		float3 force = -cross(cross(v, Get(Wind).xyz), v);
		sharedPos[sharedIndex].xyz += force * Get(TimeStep) * Get(TimeStep);
	}

	GroupMemoryBarrier();

	// Length constraint
	uint a = uint(floor(Get(NumVerticesPerStrand) * 0.5f));
	uint b = uint(floor((Get(NumVerticesPerStrand) - 1) * 0.5f));

	for(uint i = 0; i < Get(LengthConstraintIterations); ++i)
	{
		uint sharedIndex = 2 * indices.localVertexIndex * Get(NumStrandsPerThreadGroup) + indices.localStrandIndex;

		if (indices.localVertexIndex < a)
			ApplyDistanceConstraint(sharedPos[sharedIndex], sharedPos[sharedIndex + Get(NumStrandsPerThreadGroup)], sharedLength[sharedIndex]);

		GroupMemoryBarrier();

		if (indices.localVertexIndex < b)
			ApplyDistanceConstraint(sharedPos[sharedIndex + Get(NumStrandsPerThreadGroup)], sharedPos[sharedIndex + Get(NumStrandsPerThreadGroup) * 2], sharedLength[sharedIndex + Get(NumStrandsPerThreadGroup)]);

		GroupMemoryBarrier();
	}

#if HAIR_MAX_CAPSULE_COUNT > 0
	// Capsule collisions
	bool collided = ResolveCapsuleCollisions(sharedPos[indices.indexSharedMem], Get(HairVertexPositionsPrev)[indices.globalVertexIndex]);
	if(collided)
		Get(HairVertexPositionsPrev)[indices.globalVertexIndex] = sharedPos[indices.indexSharedMem];
	GroupMemoryBarrier();
#endif

	// Calculate tangents
	float3 tangent = sharedPos[indices.indexSharedMem + Get(NumStrandsPerThreadGroup)].xyz - sharedPos[indices.indexSharedMem].xyz;
	Get(HairVertexTangents)[indices.globalVertexIndex].xyz = normalize(tangent);

	Get(HairVertexPositions)[indices.globalVertexIndex] = sharedPos[indices.indexSharedMem];
	RETURN();
}