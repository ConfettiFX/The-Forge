/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shaderDefs.h"

RES(Tex2DArray(float4), uTex0, UPDATE_FREQ_NONE, t3, binding = 3);
RES(SamplerState, uSampler0, UPDATE_FREQ_NONE, s4, binding = 4);
RES(Buffer(AsteroidStatic), asteroidsStatic, UPDATE_FREQ_NONE, t10, binding = 1);
RES(RWBuffer(AsteroidDynamic), asteroidsDynamic, UPDATE_FREQ_PER_FRAME, u2, binding = 2);

CBUFFER(uniformBlock, UPDATE_FREQ_PER_FRAME, b5, binding = 5)
{
    DATA(float4x4, viewProj[VR_MULTIVIEW_COUNT], None);
};

#ifdef DIRECT3D12
PUSH_CONSTANT(rootConstant, b0)
{
    DATA(uint, drawID, None);
};
#endif

STRUCT(PsIn)
{
    DATA(float4, position, SV_Position);
    DATA(float3, posModel, PosModel);
    DATA(float3, normal, Normal);
    DATA(float4, albedo, Color);
};

float4 PS_MAIN( PsIn In )
{
    INIT_MAIN;
    float4 Out;
    const float3 lightDir = -normalize(float3(2,6,1));

    float wrap_diffuse = saturate(dot(lightDir, normalize(In.normal)));
    float light = 2.0f * wrap_diffuse + 0.06f;

    float3 uvw = In.posModel * 0.5 + 0.5;

    float3 blendWeights = abs(normalize(In.posModel));
    blendWeights = saturate((blendWeights - 0.2) * 7);
    blendWeights /= (blendWeights.x + blendWeights.y + blendWeights.z);
    
    float3 coord1 = float3(uvw.yz, In.albedo.w);
    float3 coord2 = float3(uvw.zx, In.albedo.w);
    float3 coord3 = float3(uvw.xy, In.albedo.w);

    float3 texColor = float3(0,0,0);
    texColor += blendWeights.x * SampleTex2DArray( Get(uTex0), Get(uSampler0), coord1 ).xyz;
    texColor += blendWeights.y * SampleTex2DArray( Get(uTex0), Get(uSampler0), coord2 ).xyz;
    texColor += blendWeights.z * SampleTex2DArray( Get(uTex0), Get(uSampler0), coord3 ).xyz;

	float coverage = saturate(In.position.z * 4000.0f);

    float3 color = In.albedo.xyz;
    color *= light;
    color *= texColor * 2;
	color *= coverage;
#if defined(ORBIS) || defined(PROSPERO)
	color = pow(color, 2.2f);
#endif
	Out = float4(color, 1);
    RETURN(Out);

    // return float4(color, 1);
}
