/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shaderDefs.h"

RES(Tex2DArray(float4), uTex0, UPDATE_FREQ_NONE, t3, binding = 3);
RES(SamplerState, uSampler0, UPDATE_FREQ_NONE, s4, binding = 4);
RES(Buffer(AsteroidStatic), asteroidsStatic, UPDATE_FREQ_NONE, t10, binding = 1);
RES(RWBuffer(AsteroidDynamic), asteroidsDynamic, UPDATE_FREQ_PER_FRAME, u2, binding = 2);

CBUFFER(uniformBlock, UPDATE_FREQ_PER_FRAME, b5, binding = 5)
{
    DATA(float4x4, viewProj[VR_MULTIVIEW_COUNT], None);
};

#ifdef DIRECT3D12
PUSH_CONSTANT(rootConstant, b0)
{
    DATA(uint, drawID, None);
};
#endif

STRUCT(VsIn)
{
    DATA(float4, position, Position);
    DATA(float4, normal, Normal);
};

STRUCT(PsIn)
{
    DATA(float4, position, SV_Position);
    DATA(float3, posModel, PosModel);
    DATA(float3, normal, Normal);
    DATA(float4, albedo, Color);
};

INDIRECT_DRAW()

PsIn VS_MAIN( VsIn In, SV_InstanceID(uint) instanceID) 
{
    INIT_MAIN;
    PsIn Out;

    uint asteroidID = instanceID;
#if defined(DIRECT3D12)
    asteroidID = drawID;
#endif

    AsteroidStatic asteroidStatic = Get(asteroidsStatic)[asteroidID];
    AsteroidDynamic asteroidDynamic = Get(asteroidsDynamic)[asteroidID];

    float4x4 worldMatrix = asteroidDynamic.transform;
    Out.position = mul(Get(viewProj)[VR_VIEW_ID], mul(worldMatrix, float4(In.position.xyz, 1.0f)));
    Out.posModel = In.position.xyz;
    Out.normal = mul(worldMatrix, float4(In.normal.xyz, 0.0f)).xyz;

    float depth = saturate((length(In.position.xyz) - 0.5f) / 0.2);
    Out.albedo.xyz = lerp(asteroidStatic.deepColor.xyz, asteroidStatic.surfaceColor.xyz, depth);
    Out.albedo.w = float(asteroidStatic.textureID);
    
    RETURN(Out);
}
