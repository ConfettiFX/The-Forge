/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

RES(Tex2DArray(float4), uTex0, UPDATE_FREQ_NONE, t1, binding = 1);
RES(SamplerState, uSampler0, UPDATE_FREQ_NONE, s0, binding = 2);

STRUCT(InstanceData)
{
    DATA(float4x4, mvp[VR_MULTIVIEW_COUNT], None);
    DATA(float4x4, normalMat, None);
    DATA(float4, surfaceColor, None);
    DATA(float4, deepColor, None);
    DATA(int, textureID, None);
	DATA(uint, _pad0[3], None);
};
RES(Buffer(InstanceData), instanceBuffer, UPDATE_FREQ_PER_BATCH, t0, binding = 0);

PUSH_CONSTANT(rootConstant, b1)
{
    DATA(uint, index, None);
};

STRUCT(VsIn)
{
    DATA(float4, position, Position);
    DATA(float4, normal, Normal);
};

STRUCT(PsIn)
{
    DATA(float4, position, SV_Position);
    DATA(float3, posModel, PosModel);
    DATA(float3, normal, Normal);
    DATA(float4, albedo, Color);
};

float linstep(float min, float max, float s)
{
    return saturate((s - min) / (max - min));
}

INDIRECT_DRAW()

PsIn VS_MAIN( VsIn In )
{
    INIT_MAIN;
    PsIn Out;
    Out.position = mul(Get(instanceBuffer)[Get(index)].mvp[VR_VIEW_ID], float4(In.position.xyz, 1));
    Out.posModel = In.position.xyz;
    Out.normal = normalize(mul(Get(instanceBuffer)[Get(index)].normalMat, float4(In.normal.xyz, 0)).xyz);

    float depth = linstep(0.5f, 0.7f, length(In.position.xyz));
    Out.albedo.xyz = lerp(Get(instanceBuffer)[Get(index)].deepColor.xyz, 
        Get(instanceBuffer)[Get(index)].surfaceColor.xyz, depth);
	Out.albedo.w = float(Get(instanceBuffer)[Get(index)].textureID);
    RETURN(Out);
}
