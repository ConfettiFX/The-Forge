/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#if !defined(TOTAL_IMGS)
#if defined(TARGET_IOS)
	#define USE_TEXTURES_FALLBACK
#endif
	#define TOTAL_IMGS 84
#endif

CBUFFER(cbCamera, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
	DATA(float4x4, projView[VR_MULTIVIEW_COUNT], None);
	DATA(float4x4, prevProjView[VR_MULTIVIEW_COUNT], None);
	DATA(float3, camPos, None);
};

CBUFFER(cbObject, UPDATE_FREQ_PER_DRAW, b1, binding = 0)
{
	DATA(float4x4, worldMat, None);
	DATA(float4x4, prevWorldMat, None);
	DATA(float, roughness, None);
	DATA(float, metalness, None);
	DATA(int, pbrMaterials, None);
};

RES(SamplerState, defaultSampler, UPDATE_FREQ_NONE, s2, binding = 7);

// material parameters
#if defined(USE_TEXTURES_FALLBACK)
	RES(Tex2D(float4), albedoMap,    UPDATE_FREQ_PER_DRAW, t3, binding = 6);
	RES(Tex2D(float4), normalMap,    UPDATE_FREQ_PER_DRAW, t3, binding = 6);
	RES(Tex2D(float4), metallicMap,  UPDATE_FREQ_PER_DRAW, t3, binding = 6);
	RES(Tex2D(float4), roughnessMap, UPDATE_FREQ_PER_DRAW, t3, binding = 6);
	RES(Tex2D(float4), aoMap,        UPDATE_FREQ_PER_DRAW, t3, binding = 6);
#elif defined(METAL) || defined(ORBIS) || defined(PROSPERO)
RES(Tex2D(float4), textureMaps[TOTAL_IMGS], UPDATE_FREQ_NONE, t3, binding = 6);
#else
RES(Tex2D(float4), textureMaps[TOTAL_IMGS], space4, t3, binding = 6);
#endif

DECLARE_RESOURCES()

STRUCT(VsIn)
{
    DATA(float3, position, POSITION);
	DATA(float3, normal, NORMAL);
    DATA(float2, texCoord, TEXCOORD);
};

STRUCT(PsIn)
{
    DATA(float4, position, SV_Position);
    
    DATA(float3, normal, TEXCOORD0);
	DATA(float3, pos, TEXCOORD1);
	DATA(float2, uv, TEXCOORD2);
	DATA(float4, curPosition, TEXCOORD3);
	DATA(float4, prevPosition, TEXTCOORD4);
};

PsIn VS_MAIN( VsIn In )
{
	INIT_MAIN;
	PsIn Out;

	Out.position = mul(Get(projView)[VR_VIEW_ID], mul(Get(worldMat), float4(In.position.xyz, 1.0f)));
	Out.curPosition = Out.position;
	Out.prevPosition = mul(Get(prevProjView)[VR_VIEW_ID], mul(Get(prevWorldMat), float4(In.position.xyz, 1.0f)));
	Out.normal = normalize(mul(Get(worldMat), float4(In.normal, 0.0f)).rgb);
	Out.pos = mul(Get(worldMat), float4(In.position.xyz, 1.0f)).rgb;
	Out.uv = In.texCoord;

	RETURN(Out);
}
