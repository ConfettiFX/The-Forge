/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/


STRUCT(Light)
{
	DATA(float4, pos, None);
	DATA(float4, col, None);
	DATA(float, radius, None);
	DATA(float, intensity, None);
	DATA(float, _pad0, None);
	DATA(float, _pad1, None);
};

STATIC const float PI = 3.14159265359;


CBUFFER(cbExtendCamera, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
	DATA(float4x4, viewMat, None);
	DATA(float4x4, projMat[VR_MULTIVIEW_COUNT], None);
	DATA(float4x4, viewProjMat[VR_MULTIVIEW_COUNT], None);
	DATA(float4x4, InvViewProjMat[VR_MULTIVIEW_COUNT], None);

	DATA(float4, cameraWorldPos, None);
	DATA(float4, viewPortSize, None);
};


CBUFFER(cbLights, UPDATE_FREQ_NONE, b1, binding = 1)
{
	DATA(Light, lights[16], None);
	DATA(int, currAmountOflights, None);
};

STRUCT(DirectionalLight)
{
	DATA(float4, mPos, None);
	float4 mCol; //alpha is the intesity
	DATA(float4, mDir, None);
};

CBUFFER(cbDLights, UPDATE_FREQ_NONE, b2, binding = 2)
{
	DATA(DirectionalLight, dlights[16], None);
	DATA(int, currAmountOfDLights, None);
};


RES(Tex2D(float2), brdfIntegrationMap, UPDATE_FREQ_NONE, t3, binding = 3);
RES(TexCube(float4), irradianceMap, UPDATE_FREQ_NONE, t4, binding = 4);
RES(TexCube(float4), specularMap, UPDATE_FREQ_NONE, t5, binding = 5);

RES(Tex2DArray(float4), AlbedoTexture, UPDATE_FREQ_NONE, t6, binding = 6);
RES(Tex2DArray(float4), NormalTexture, UPDATE_FREQ_NONE, t7, binding = 7);
RES(Tex2DArray(float4), RoughnessTexture, UPDATE_FREQ_NONE, t8, binding = 8);
RES(Tex2DArray(float4), DepthTexture, UPDATE_FREQ_NONE, t9, binding = 9);

RES(SamplerState, envSampler, UPDATE_FREQ_NONE, s10, binding = 10);
RES(SamplerState, defaultSampler, UPDATE_FREQ_NONE, s11, binding = 11);


float3 FresnelSchlickRoughness(float cosTheta, float3 F0, float roughness)
{
	//return F0 + (max(float3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
	float3 ret = float3(0.0, 0.0, 0.0);
	float powTheta = pow(saturate(1.0 - cosTheta), 5.0);
	float invRough = float(1.0 - roughness);

	ret.x = F0.x + (max(invRough, F0.x) - F0.x) * powTheta;
	ret.y = F0.y + (max(invRough, F0.y) - F0.y) * powTheta;
	ret.z = F0.z + (max(invRough, F0.z) - F0.z) * powTheta;

	return ret;
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
	return F0 + (1.0f - F0) * pow(saturate(1.0 - cosTheta), 5.0);
}

float distributionGGX(float3 N, float3 H, float roughness)
{
	float a = roughness*roughness;
	float a2 = a*a;
	float NdotH = max(dot(N, H), 0.0);
	float NdotH2 = NdotH*NdotH;
	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0f);
	float k = (r*r) / 8.0f;

	float nom = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return nom / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

float3 getWorldPositionFromDepth(float2 ndc, float sceneDepth, uint ViewID )
{
	float4 worldPos = mul( Get(InvViewProjMat)[ViewID], float4(ndc, sceneDepth, 1.0));
	worldPos /= worldPos.w;

	return float3(worldPos.xyz);
}


STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, uv, TEXCOORD0);
	DATA(FLAT(uint), ViewID, TEXCOORD1);
};

float4 PS_MAIN( VSOutput In )
{
	INIT_MAIN;
	float4 Out;

	// default albedo 
	float3 albedo = SampleTex2DArray(Get(AlbedoTexture), Get(defaultSampler), float3(In.uv, VR_VIEW_ID(In.ViewID))).rgb;

	float4 normalColor = SampleTex2DArray(Get(NormalTexture), Get(defaultSampler), float3(In.uv, VR_VIEW_ID(In.ViewID)));
	float4 roughnessColor = SampleTex2DArray(Get(RoughnessTexture), Get(defaultSampler), float3(In.uv, VR_VIEW_ID(In.ViewID)));

	float _roughness = roughnessColor.r;
	float _metalness = normalColor.a;
	float ao = 1.0f;

	float depth = SampleTex2DArray(Get(DepthTexture), Get(defaultSampler), float3(In.uv, VR_VIEW_ID(In.ViewID))).r;
	
	if(depth >= 1.0)
	{
		//Skybox
		Out = float4(albedo, 1.0);
	}

	float3 N = normalize(normalColor.rgb);
	
	float2 ndc = float2(In.uv.x * 2.0 - 1.0, (1.0 - In.uv.y) * 2.0 - 1.0);
	
	float3 worldPos = getWorldPositionFromDepth(ndc, depth, VR_VIEW_ID(In.ViewID));

	float3 V = normalize(Get(cameraWorldPos).xyz - worldPos);
	float3 R = reflect(-V, N);

	// 0.04 is the index of refraction for metal
	float3 F0 = float3(0.04f, 0.04f, 0.04f);
	F0 = lerp(F0, albedo, _metalness);

	float3 Lo = float3(0.0, 0.0, 0.0);

	//Directional Lights
	for(int i = 0; i < Get(currAmountOfDLights); ++i)
	{
		 // Vec from world pos to light pos
		float3 L =  -normalize(float3(Get(dlights)[i].mDir.xyz));

		// halfway vec
		float3 H = normalize(V + L);

		float3 radiance = float3(Get(dlights)[i].mCol.rgb) * Get(dlights)[i].mCol.a;

		float NDF = distributionGGX(N, H, _roughness);
		float G = GeometrySmith(N, V, L, _roughness);
		float3 F = fresnelSchlick(dot(N,H), F0);
		
		float3 nominator = NDF * G * F;
		float denominator = 4.0f * max(dot(N,V), 0.0) * max(dot(N, L), 0.0) + 0.001;
		float3 specular = nominator / denominator;

		float3 kS = F;

		float3 kD = float3(1.0, 1.0, 1.0) - kS;

		kD *= 1.0f - _metalness;

		float NdotL = max(dot(N, L), 0.0);

		if(NdotL>0.0f)
		{
			Lo +=  (kD * albedo / PI + specular) * radiance * NdotL;
		}
		else
		{
			Lo += float3(0.0f, 0.0f, 0.0f);
		}		
	}

	
	//Point Lights
	for(int pl_i = 0; pl_i < Get(currAmountOflights); ++pl_i)
	{
		 // Vec from world pos to light pos
		float3 L =  normalize(float3(Get(lights)[pl_i].pos.xyz) - worldPos);

		// halfway vec
		float3 H = normalize(V + L);
		
		// get distance
		float distance = length(float3(Get(lights)[pl_i].pos.xyz) - worldPos);

		// Distance attenuation from Epic Games' paper 
		float distanceByRadius = 1.0f - pow((distance / Get(lights)[pl_i].radius), 4);
		float clamped = pow(clamp(distanceByRadius, 0.0f, 1.0f), 2.0f);
		float attenuation = clamped / (distance * distance + 1.0f);

		//float attenuation = 1.0f;
		// Radiance is color mul with attenuation mul intensity 
		float3 radiance = float3(Get(lights)[pl_i].col.rgb) * attenuation * Get(lights)[pl_i].intensity;

		float NDF = distributionGGX(N, H, _roughness);
		float G = GeometrySmith(N, V, L, _roughness);
		float3 F = fresnelSchlick(dot(N, H), F0);

		float3 nominator = NDF * G * F;
		float denominator = 4.0f * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
		float3 specular = nominator / denominator;

		float3 kS = F;

		float3 kD = float3(1.0, 1.0, 1.0) - kS;

		kD *= 1.0f - _metalness;

		float NdotL = max(dot(N, L), 0.0);

		if(NdotL>0.0f) {

		Lo += (kD * albedo / PI + specular) * radiance * NdotL;
		}else {


			Lo+= float3(0.0f, 0.0f, 0.0f);
		}		
	}


	float3 F = FresnelSchlickRoughness(dot(N, V), F0, _roughness);
	float3 kS = F;
	float3 kD = float3(1.0, 1.0, 1.0) - kS;
	kD *= 1.0 - _metalness;

	float3 irradiance = SampleTexCube(Get(irradianceMap), Get(envSampler), N).rgb;
	float3 diffuse = kD * irradiance * albedo;

	float3 specularColor = SampleLvlTexCube(Get(specularMap), Get(envSampler), R, _roughness * 4).rgb;
		
	float2 maxNVRough = float2(max(dot(N, V), 0.0), _roughness);
	float2 brdf = SampleTex2D(Get(brdfIntegrationMap), Get(defaultSampler), maxNVRough).rg;
	
	float3 specular = specularColor * (F * brdf.x + brdf.y);

	float3 ambient = float3(diffuse + specular)*float3(ao,ao,ao);
	
	float3 color = Lo + ambient * 0.2;

    Out = float4(color.r, color.g, color.b, 1.0f);
	RETURN(Out);
}