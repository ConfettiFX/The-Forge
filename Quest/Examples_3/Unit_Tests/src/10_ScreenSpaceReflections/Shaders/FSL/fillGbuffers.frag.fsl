/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#if !defined(TOTAL_IMGS)
#if defined(TARGET_IOS)
	#define USE_TEXTURES_FALLBACK
#endif
	#define TOTAL_IMGS 84
#endif

CBUFFER(cbCamera, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
	DATA(float4x4, projView, None);
	DATA(float4x4, prevProjView, None);
	DATA(float3, camPos, None);
};

CBUFFER(cbObject, UPDATE_FREQ_PER_DRAW, b1, binding = 0)
{
	DATA(float4x4, worldMat, None);
	DATA(float4x4, prevWorldMat, None);
	DATA(float, roughness, None);
	DATA(float, metalness, None);
	DATA(int, pbrMaterials, None);
};

RES(SamplerState, defaultSampler, UPDATE_FREQ_NONE, s2, binding = 7);

// material parameters
#if defined(USE_TEXTURES_FALLBACK)
	RES(Tex2D(float4), albedoMap,    UPDATE_FREQ_PER_DRAW, t3, binding = 6);
	RES(Tex2D(float4), normalMap,    UPDATE_FREQ_PER_DRAW, t3, binding = 6);
	RES(Tex2D(float4), metallicMap,  UPDATE_FREQ_PER_DRAW, t3, binding = 6);
	RES(Tex2D(float4), roughnessMap, UPDATE_FREQ_PER_DRAW, t3, binding = 6);
	RES(Tex2D(float4), aoMap,        UPDATE_FREQ_PER_DRAW, t3, binding = 6);
#elif defined(METAL) || defined(ORBIS) || defined(PROSPERO)
	RES(Tex2D(float4), textureMaps[TOTAL_IMGS], UPDATE_FREQ_NONE, t3, binding = 6);
#else
	RES(Tex2D(float4), textureMaps[TOTAL_IMGS], space4, t3, binding = 6);
#endif

PUSH_CONSTANT(cbTextureRootConstants, b2)
{
	DATA(uint, textureMapIds, None);
};


float3 reconstructNormal(float4 sampleNormal)
{
	float3 tangentNormal;
	tangentNormal.xy = sampleNormal.rg * 2 - 1;
	tangentNormal.z = sqrt(1 - saturate(dot(tangentNormal.xy, tangentNormal.xy)));
	return tangentNormal;
}

float3 getNormalFromMap(Tex2D(float4) normalTex, float3 pos, float3 normal, float2 uv)
{
	float4 rawNormal = SampleTex2D(normalTex, Get(defaultSampler), uv);
	float3 tangentNormal = reconstructNormal(rawNormal);

    float3 Q1  = ddx(pos);
    float3 Q2  = ddy(pos);
    float2 st1 = ddx(uv);
    float2 st2 = ddy(uv);

    float3 N   = normalize(normal);
    float3 T  = normalize(Q1*st2.y - Q2*st1.y);
    float3 B  = -normalize(cross(N, T));
    float3x3 TBN = make_f3x3_rows(T, B, N);
    return mul(tangentNormal, TBN);
}

STRUCT(PsIn)
{
    DATA(float4, position, SV_Position);
    
    DATA(float3, normal, TEXCOORD0);
	DATA(float3, pos, TEXCOORD1);
	DATA(float2, uv, TEXCOORD2);
	DATA(float4, curPosition, TEXCOORD3);
	DATA(float4, prevPosition, TEXTCOORD4);
};

STRUCT(PSOut)
{
    DATA(float4, albedo,   SV_Target0);
    DATA(float4, normal,   SV_Target1);
    DATA(float4, specular, SV_Target2);
    DATA(float2, motion,   SV_Target3);
};

PSOut PS_MAIN( PsIn In )
{	
	INIT_MAIN;
	PSOut Out;
	//cut off
#if defined(USE_TEXTURES_FALLBACK)
	float4 albedoAndAlpha = SampleTex2D(Get(albedoMap), Get(defaultSampler),In.uv);
#else
	const uint albedoMapId    = ((Get(textureMapIds) >> 0) & 0xFF);
	const uint normalMapId    = ((Get(textureMapIds) >> 8) & 0xFF);
	const uint metallicMapId  = ((Get(textureMapIds) >> 16) & 0xFF);
	const uint roughnessMapId = ((Get(textureMapIds) >> 24) & 0xFF);
	const uint aoMapId        = 5;
	float4 albedoAndAlpha = SampleTex2D(Get(textureMaps)[albedoMapId], Get(defaultSampler),In.uv);
#endif
	const float alpha = albedoAndAlpha.a;
	if(alpha < 0.5)
		clip(-1);

	// default albedo 
	float3 albedo = float3(0.5f, 0.0f, 0.0f);

	float _roughness = Get(roughness);
	float _metalness = Get(metalness);
	float ao = 1.0f;

	float3 N = normalize(In.normal);
	

	//this means pbr materials is set for these so sample from textures
	if(Get(pbrMaterials) !=- 1) {
		albedo = pow(albedoAndAlpha.rgb, f3(2.2));
#if defined(USE_TEXTURES_FALLBACK)
		N          = getNormalFromMap(Get(normalMap), In.pos, In.normal, In.uv);
		_metalness = SampleTex2D(Get(metallicMap),  Get(defaultSampler),In.uv).r;
		_roughness = SampleTex2D(Get(roughnessMap), Get(defaultSampler),In.uv).r;
		ao         = SampleLvlTex2D(Get(aoMap),     Get(defaultSampler),In.uv, 0).r;
#else
		N          = getNormalFromMap(Get(textureMaps)[normalMapId], In.pos, In.normal, In.uv);
		_metalness = SampleTex2D(Get(textureMaps)[metallicMapId], Get(defaultSampler),In.uv).r;
		_roughness = SampleTex2D(Get(textureMaps)[roughnessMapId], Get(defaultSampler),In.uv).r;
		ao         = SampleLvlTex2D(Get(textureMaps)[aoMapId], Get(defaultSampler),In.uv, 0).r;
#endif
	}

	if(Get(pbrMaterials) == 2) {
		
		//N = normalize(normal);
		albedo  = float3(0.7f, 0.7f, 0.7f);
		_roughness = Get(roughness);
		_metalness = Get(metalness);
		ao = 1.0f;
	}

#if !defined(USE_TEXTURES_FALLBACK)
	if(roughnessMapId == 6) {
		_roughness = 0.05f;
	}
#endif

	Out.albedo = float4(albedo, alpha);
	Out.normal = float4(N, _metalness);
	Out.specular = float4(_roughness, ao, In.uv);
	Out.motion  = In.curPosition.xy / In.curPosition.w - In.prevPosition.xy / In.prevPosition.w;

	RETURN(Out);
}
