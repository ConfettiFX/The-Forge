/*
* Copyright (c) 2018-2021 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

// This shader loads draw / triangle Id per pixel and reconstruct interpolated vertex data.
STRUCT(PsIn)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, ScreenPos, TEXCOORD0);
	DATA(FLAT(uint), ViewID, TEXCOORD1);
};

// Vertex shader
PsIn VS_MAIN( SV_VertexID(uint) vertexID )
{
	INIT_MAIN;
	PsIn Out;
	// Produce a fullscreen triangle using the current vertexId
	// to automatically calculate the vertex porision. This
	// method avoids using vertex/index buffers to generate a
	// fullscreen quad.
	Out.Position.x = (vertexID == 2 ? 3.0 : -1.0);
	Out.Position.y = (vertexID == 0 ? -3.0 : 1.0);
	Out.Position.zw = float2(0, 1);
	Out.ScreenPos = Out.Position.xy;
	Out.ViewID = VR_VIEW_ID;
	RETURN(Out);
}