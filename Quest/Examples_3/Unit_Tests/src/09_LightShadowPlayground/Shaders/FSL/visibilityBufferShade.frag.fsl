/*
* Copyright (c) 2018-2021 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#ifndef SAMPLE_COUNT
#define SAMPLE_COUNT 4
#endif

#include "Packing.h"
#include "Shader_Defs.h"
#include "shading.h"
#include "ASMShader_Defs.h"

#define SHADOW_TYPE_ESM				0
#define SHADOW_TYPE_ASM				1
#define SHADOW_TYPE_MESH_BAKED_SDF	2

CBUFFER(lightUniformBlock, UPDATE_FREQ_PER_FRAME, b1, binding = 15)
{
    DATA(float4x4, mLightViewProj, None);
    DATA(float4, lightPosition, None);
    DATA(float4, lightColor, None);
	DATA(float4, mLightUpVec, None);
	DATA(float4, mTanLightAngleAndThresholdValue, None);
	DATA(float3, mLightDir, None);
};

CBUFFER(cameraUniformBlock, UPDATE_FREQ_PER_FRAME, b3, binding = 14)
{
    DATA(float4x4, View, None);
    DATA(float4x4, Project[VR_MULTIVIEW_COUNT], None);
    DATA(float4x4, ViewProject[VR_MULTIVIEW_COUNT], None);
    DATA(float4x4, InvView, None);
	DATA(float4x4, InvProj[VR_MULTIVIEW_COUNT], None);
	DATA(float4x4, InvViewProject[VR_MULTIVIEW_COUNT], None);
	DATA(float4, mCameraPos, None);
	DATA(float, mNear, None);
	DATA(float, mFarNearDiff, None);
	DATA(float, mFarNear, None);
	DATA(float, paddingForAlignment0, None);
	DATA(float2, mTwoOverRes, None);
};

CBUFFER(ASMUniformBlock, UPDATE_FREQ_PER_FRAME, b2, binding = 17)
{
	DATA(float4x4, mIndexTexMat, None);
	DATA(float4x4, mPrerenderIndexTexMat, None);
	DATA(float4,   mSearchVector, None);
	DATA(float4,   mPrerenderSearchVector, None);
	DATA(float4,   mWarpVector, None);
	DATA(float4,   mPrerenderWarpVector, None);
	DATA(float4,   mMiscBool, None);
	DATA(float,    mPenumbraSize, None);
};

CBUFFER(objectUniformBlock, UPDATE_FREQ_PER_FRAME, b0, binding = 13)
{
    DATA(float4x4, WorldViewProjMat[VR_MULTIVIEW_COUNT], None);
    DATA(float4x4, WorldMat, None);
};

CBUFFER(renderSettingUniformBlock, UPDATE_FREQ_PER_FRAME, b4, binding = 16)
{
    DATA(float4, WindowDimension, None);
    DATA(int, ShadowType, None);
};

CBUFFER(ESMInputConstants, UPDATE_FREQ_PER_FRAME, b5, binding = 0)
{
    DATA(float, mEsmControl, None);
};

RES(Tex2D(float4), IndexTexture[10], UPDATE_FREQ_NONE, t20, binding = 20);
RES(Depth2D(float), DepthAtlasTexture, UPDATE_FREQ_NONE, t30, binding = 21);
RES(Tex2D(float), DEMTexture, UPDATE_FREQ_NONE, t31, binding = 22);
RES(Tex2D(float), PrerenderLodClampTexture, UPDATE_FREQ_NONE, t32, binding = 23);
RES(Tex2D(float), ESMShadowTexture, UPDATE_FREQ_NONE, t33, binding = 24);

RES(Tex2DArray(float2), SDFShadowTexture, UPDATE_FREQ_NONE, t19, binding = 19);
#if SAMPLE_COUNT > 1
RES(Tex2DArrayMS(float4, SAMPLE_COUNT), vbPassTexture, UPDATE_FREQ_NONE, t18, binding = 18);
#else
RES(Tex2DArray(float4), vbPassTexture, UPDATE_FREQ_NONE, t18, binding = 18);
#endif

RES(ByteBuffer, vertexPos,                      UPDATE_FREQ_NONE, t0, binding = 0);
RES(ByteBuffer, vertexTexCoord,                 UPDATE_FREQ_NONE, t1, binding = 1);
RES(ByteBuffer, vertexNormal,                   UPDATE_FREQ_NONE, t2, binding = 2);
RES(ByteBuffer, vertexTangent,                  UPDATE_FREQ_NONE, t3, binding = 3);
RES(ByteBuffer, filteredIndexBuffer,            UPDATE_FREQ_PER_FRAME, t4, binding = 4);
RES(ByteBuffer, indirectMaterialBuffer,         UPDATE_FREQ_PER_FRAME, t5, binding = 5);
RES(Buffer(MeshConstants), meshConstantsBuffer, UPDATE_FREQ_NONE, t6, binding = 6);

// Per frame descriptors
RES(Buffer(uint), indirectDrawArgs[2], UPDATE_FREQ_PER_FRAME, t12, binding = 12);

#if defined(METAL) || defined(ORBIS) || defined(PROSPERO)
	RES(Tex2D(float4), diffuseMaps[MAX_TEXTURE_UNITS],  UPDATE_FREQ_NONE, t25, binding = 25);
	RES(Tex2D(float4), normalMaps[MAX_TEXTURE_UNITS],   UPDATE_FREQ_NONE, t26, binding = 26);
	RES(Tex2D(float4), specularMaps[MAX_TEXTURE_UNITS], UPDATE_FREQ_NONE, t27, binding = 27);
#else
	 RES(Tex2D(float4), diffuseMaps[MAX_TEXTURE_UNITS],  space4, t0,   binding = 25);
	 RES(Tex2D(float4), normalMaps[MAX_TEXTURE_UNITS],   space5, t257, binding = 26);
	 RES(Tex2D(float4), specularMaps[MAX_TEXTURE_UNITS], space6, t514, binding = 27);
#endif

RES(SamplerComparisonState, ShadowCmpSampler, UPDATE_FREQ_NONE, s4, binding = 11);
RES(SamplerState, clampBorderNearSampler, UPDATE_FREQ_NONE, s3, binding = 10);
RES(SamplerState, clampMiplessLinearSampler, UPDATE_FREQ_NONE, s2, binding = 8);
RES(SamplerState, clampMiplessNearSampler, UPDATE_FREQ_NONE, s1, binding = 9);

RES(SamplerState, textureSampler, UPDATE_FREQ_NONE, s0, binding = 7);

STRUCT(ASMFrustumDesc)
{
	DATA(float3, mIndexCoord, None);
	DATA(int, mStartingMip, None);
};

STRUCT(PsIn)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, ScreenPos, TEXCOORD0);
	DATA(FLAT(uint), ViewID, TEXCOORD1);
};

STRUCT(PsOut)
{
    DATA(float4, FinalColor, SV_Target0);
};

float calcESMShadowFactor(float3 worldPos)
{
	float4 posLS = mul(Get(mLightViewProj), float4(worldPos.xyz, 1.0));
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + f2(0.5);


	float2 HalfGaps = float2(0.00048828125, 0.00048828125);
	// float2 Gaps = float2(0.0009765625, 0.0009765625);

	posLS.xy += HalfGaps;

	float shadowFactor = 0.0;

	// const float esmControl = mEsmControl;

	if( AllGreaterThan(abs(posLS.xy-f2(0.5)), 0.5) )
	{
		return shadowFactor;
	}

	float4 shadowDepthSample = float4(0, 0, 0, 0);
	shadowDepthSample.x = SampleLvlTex2D(Get(ESMShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0).r;
	shadowDepthSample.y = SampleLvlOffsetTex2D(Get(ESMShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(1, 0)).r;
	shadowDepthSample.z = SampleLvlOffsetTex2D(Get(ESMShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(0, 1)).r;
	shadowDepthSample.w = SampleLvlOffsetTex2D(Get(ESMShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(1, 1)).r;
	float avgShadowDepthSample = (shadowDepthSample.x + shadowDepthSample.y + shadowDepthSample.z + shadowDepthSample.w) * 0.25f;
	shadowFactor = saturate(2.0 - exp((posLS.z - avgShadowDepthSample) * Get(mEsmControl)));
	return shadowFactor;
}


float GetASMFadeInConstant(float w)
{
	return 2.0 * frac(abs(w));
}

float PCF(float3 shadowMapCoord, float2 kernelSize )
{
	const float depthBias = -0.0005;
	//const float depthBias = -0.001f;
	//const float depthBias = -0.000f;
    float2 tapOffset[9] =
    {
        float2( 0.00, 0.00),
        float2( 1.20, 0.00),
        float2(-1.20, 0.00),
        float2( 0.00, 1.20),
        float2( 0.00,-1.20),
        float2( 0.84, 0.84),
        float2(-0.84, 0.84),
        float2(-0.84,-0.84),
        float2( 0.84,-0.84),
    };

    float tapWeight[9] =
    {
        0.120892,
        0.110858,
        0.110858,
        0.110858,
        0.110858,
        0.111050,
        0.111050,
        0.111050,
        0.111050,
    };

    float shadowFactor = 0;
    for( int i = 0; i < 9; ++i )
    {
        float2 sampleCoord = shadowMapCoord.xy + kernelSize * tapOffset[i];

		// shadowFactor += tapWeight[i] * Get(DepthAtlasTexture).SampleCmpLevelZero( Get(ShadowCmpSampler), sampleCoord, shadowMapCoord.z - depthBias );
		shadowFactor += tapWeight[i] * CompareTex2D(Get(DepthAtlasTexture), Get(ShadowCmpSampler), float3(sampleCoord, shadowMapCoord.z - depthBias));
    }
	return shadowFactor;
}

float4 SampleFrustumIndirectionTexture(ASMFrustumDesc frustumDesc, float mip)
{
	
	float lerpVal = frac(mip);
	int floorMip = int(floor(mip));

	uint index = frustumDesc.mStartingMip + floorMip;
	float4 indirectionCoordData = f4(0);
	BeginNonUniformResourceIndex(index, 10);
		indirectionCoordData =  SampleLvlTex2D(Get(IndexTexture)[ index ], Get(clampBorderNearSampler),  float2(frustumDesc.mIndexCoord.xy), 0);
	EndNonUniformResourceIndex();

	if(lerpVal > 0.0)
	{
		index += 1;
		float4 upperIndirectionCoordData = f4(0);
		BeginNonUniformResourceIndex(index, 10);
			indirectionCoordData =  SampleLvlTex2D(Get(IndexTexture)[ index ], Get(clampBorderNearSampler),  float2(frustumDesc.mIndexCoord.xy), 0);
		EndNonUniformResourceIndex();

		indirectionCoordData = lerp(indirectionCoordData, upperIndirectionCoordData, lerpVal);
	}
	
	return indirectionCoordData;
	
}

//indirectionCoordData = t, aka, result of sampling indirection texture using indexCoord
float3 GetASMTileCoord(float3 indexCoord, float4 indirectionCoordData)
{
	
	indexCoord.xy = floor( abs( indirectionCoordData.w ) ) * 
		ASMOneOverDepthAtlasSize * indexCoord.xy + indirectionCoordData.xy;

	//Index coordinate z value is being subtracted here because the application is using reversed depth buffer
    indexCoord.z = indexCoord.z - indirectionCoordData.z;
    return indexCoord;
}

float3 GetIndirectionTextureCoord(float4x4 indexTexMat, float3 worldPos)
{
	return mul(indexTexMat, float4(worldPos, 1.0)).xyz;
}

bool GetClampedDepthDifference(ASMFrustumDesc frustumDesc, out(float) depthDiff)
{
	const int DEM_LOD = gs_ASMMaxRefinement;
	
	float4 indirectionCoordData = SampleFrustumIndirectionTexture(frustumDesc, float(DEM_LOD));

	if(indirectionCoordData.w > 0)
	{
		float3 asmTileCoord = GetASMTileCoord(frustumDesc.mIndexCoord, indirectionCoordData);
		float demDepth = SampleLvlTex2D(Get(DEMTexture), Get(clampMiplessLinearSampler), asmTileCoord.xy, 0).r;
		depthDiff = saturate( demDepth  - asmTileCoord.z );
		return true;
	}
	return false;
}

float SampleASMShadowMap(float mip, float kernelSize, ASMFrustumDesc frustumDesc, inout(float) fadeInFactor)
{
	float4 IndexT = SampleFrustumIndirectionTexture(frustumDesc, mip);
	float shadowFactor = 0.0;

	float2 newKernelSize = float2( kernelSize / gs_ASMDepthAtlasTextureWidth, 
		kernelSize / gs_ASMDepthAtlasTextureHeight );
	if(IndexT.w != 0)
	{
		fadeInFactor = GetASMFadeInConstant(IndexT.w);
		float3 depthTileCoord = GetASMTileCoord(frustumDesc.mIndexCoord, IndexT);
		shadowFactor = PCF(depthTileCoord, newKernelSize);
	}

	return shadowFactor;
}

float GetASMShadowFactor(float mip, float kernelSize, ASMFrustumDesc frustumDesc, ASMFrustumDesc preRenderFrustumDesc)
{
	float shadowFactor = 1.0;
	float fadeInFactor = 1.0;

	if(Get(mMiscBool).x == 1.0)
	{
		float lodClamp = SampleLvlTex2D(Get(PrerenderLodClampTexture), 
			Get(clampBorderNearSampler), preRenderFrustumDesc.mIndexCoord.xy, 0).r * gs_ASMMaxRefinement;
		
		shadowFactor = SampleASMShadowMap(max(mip, lodClamp), kernelSize, preRenderFrustumDesc, fadeInFactor);
	}


	if(fadeInFactor > 0)
	{
		float otherShadowFactor = 0.0;
		float otherFadeInFactor = 1.0;

		otherShadowFactor = SampleASMShadowMap(mip, kernelSize, 
			frustumDesc, otherFadeInFactor);


		shadowFactor = lerp(shadowFactor, otherShadowFactor, fadeInFactor);
	}
	return shadowFactor;
}

float GetBlockerDistance(ASMFrustumDesc frustumDesc, float3 worldPos, 
	float4x4 indexTexMat, float3 blockerSearchDir, float mip)
{
	int absMip = int(mip);
	float3 indexCoord = GetIndirectionTextureCoord(indexTexMat, worldPos);
	uint index = frustumDesc.mStartingMip + absMip;
	float4 indirectionData = f4(0);
	BeginNonUniformResourceIndex(index, 10);
		indirectionData = SampleLvlTex2D(Get(IndexTexture)[index], Get(clampBorderNearSampler),	float2(indexCoord.xy), 0);
	EndNonUniformResourceIndex();

	float3 tileCoord = GetASMTileCoord(indexCoord, indirectionData);

	float2 tileCoordBoundsMin = floor( tileCoord.xy * ASMDepthAtlasSizeOverDepthTileSize - ASMHalfOverDepthTileSize ) * ASMDEMTileSizeOverDEMAtlasSize + ASMDEMTileCoord;
	float2 tileCoordBoundsMax = tileCoordBoundsMin + ASMDEMTileSize;

	float num = 0;
	float sum = 0;

	if(indirectionData.w != 0)
	{
		float3 sampleCoord = tileCoord;
		sampleCoord.z += 0.5 * blockerSearchDir.z * 0.1;

		LOOP
		for(int i = 0; i < 9; ++i)
		{
			float demValue = SampleLvlTex2D(Get(DEMTexture), Get(clampMiplessLinearSampler), 
				clamp(sampleCoord.xy, tileCoordBoundsMin, tileCoordBoundsMax), 0).r;

			FLATTEN if(demValue >= sampleCoord.z)
			{
				sum += demValue;
				num += 1.0;
			}
			sampleCoord += blockerSearchDir * 0.1;
		}
	
	}
	float blockerDepth = num > 0 ? sum * rcp(num) : 1.0;
	return saturate(blockerDepth - tileCoord.z) * gs_ASMTileFarPlane;
}

float SampleShadowFactor(float3 worldPos)
{
	float shadowFactor = 0.0;
	// float fadeInFactor = 0.0;
	float demLOD = gs_ASMMaxRefinement;

	ASMFrustumDesc frustumDesc;
	ASMFrustumDesc preRenderFrustumDesc;

	int swap = int(Get(mMiscBool).z); 
	frustumDesc.mStartingMip = swap * 5;
	preRenderFrustumDesc.mStartingMip = (1 - swap) * 5;

	float blockerDistance = 0.0;
	float preRenderBlockerDistance = 0.0;

	if(Get(mMiscBool).y == 1.0)
	{
		blockerDistance = GetBlockerDistance(frustumDesc, worldPos, 
			Get(mIndexTexMat), Get(mSearchVector).xyz, demLOD);

		preRenderBlockerDistance = GetBlockerDistance(preRenderFrustumDesc, worldPos, 
			Get(mPrerenderIndexTexMat), Get(mPrerenderSearchVector).xyz, demLOD);
	}
	
	frustumDesc.mIndexCoord = GetIndirectionTextureCoord(
		Get(mIndexTexMat), worldPos + blockerDistance * Get(mWarpVector).xyz);
	
	preRenderFrustumDesc.mIndexCoord = GetIndirectionTextureCoord(
		Get(mPrerenderIndexTexMat), worldPos + preRenderBlockerDistance * Get(mPrerenderWarpVector).xyz);

	float depthDiff = 0.0;
	if(GetClampedDepthDifference(frustumDesc, depthDiff))
	{
		float penumbraSizeFactor = saturate(Get(mPenumbraSize) * depthDiff - 0.05);
		float kernelSize = saturate(depthDiff * 10.0 + 0.5);

		float lod = penumbraSizeFactor * gs_ASMMaxRefinement;
		float mip = floor(lod);
		
			
		
		shadowFactor = GetASMShadowFactor(mip, kernelSize, 
			frustumDesc, preRenderFrustumDesc);

		if(penumbraSizeFactor > 0.0 && penumbraSizeFactor < 1.0)
		{
			float upperShadowFactor = GetASMShadowFactor(mip + 1, kernelSize, 
				frustumDesc, preRenderFrustumDesc);

			shadowFactor = lerp(shadowFactor, upperShadowFactor, lod - mip);
		}

	}
	return 1.0 - shadowFactor;
}

STRUCT(DerivativesOutput)
{
	DATA(float3, db_dx, None);
	DATA(float3, db_dy, None);
};

STRUCT(GradientInterpolationResults)
{
	DATA(float2, interp, None);
	DATA(float2, dx, None);
	DATA(float2, dy, None);
};

// Interpolate 2D attributes using the partial derivatives and generates dx and dy for texture sampling.
GradientInterpolationResults interpolateAttributeWithGradient(f3x2 attributes, float3 db_dx, float3 db_dy, float2 deltaV, float2 twoOverRes)
{
	float3 attr0 = getRow0(attributes);
	float3 attr1 = getRow1(attributes);
	float2 attribute_x = float2(dot(db_dx, attr0), dot(db_dx, attr1));
	float2 attribute_y = float2(dot(db_dy, attr0), dot(db_dy, attr1));
	float2 attribute_s = getCol0(attributes);

	GradientInterpolationResults result;
	result.dx = attribute_x * twoOverRes.x;
	result.dy = attribute_y * twoOverRes.y;
	result.interp = (attribute_s + deltaV.x * attribute_x + deltaV.y * attribute_y);
	return result;
}



// Computes the partial derivatives of a triangle from the projected screen space vertices
DerivativesOutput computePartialDerivatives(float2 v[3])
{
	DerivativesOutput Out;
	float d = 1.0 / determinant(float2x2(v[2] - v[1], v[0] - v[1]));
	Out.db_dx = float3(v[1].y - v[2].y, v[2].y - v[0].y, v[0].y - v[1].y) * d;
	Out.db_dy = float3(v[2].x - v[1].x, v[0].x - v[2].x, v[1].x - v[0].x) * d;
	return Out;
}

float3 interpolateAttribute(float3x3 attributes, float3 db_dx, float3 db_dy, float2 deltaV)
{
	float3 attributeX = mul(db_dx, attributes);
	float3 attributeY = mul(db_dy, attributes);
	float3 attributeS = getRow0(attributes);

	return (attributeS + deltaV.x * attributeX + deltaV.y * attributeY);
}

float interpolateAttribute(float3 attributes, float3 db_dx, float3 db_dy, float2 deltaV)
{
	float attributeX = dot(attributes, db_dx);
	float attributeY = dot(attributes, db_dy);
	float attributeS = attributes[0];

	return (attributeS + deltaV.x * attributeX + deltaV.y * attributeY);
}

float depthLinearization(float depth, float near, float far)
{
	return (2.0 * near) / (far + near - depth * (far - near));
}

// Pixel shader
PsOut PS_MAIN( PsIn In, SV_SampleIndex(uint) i )
{
	INIT_MAIN;
	PsOut Out;
	#if SAMPLE_COUNT > 1
		float4 visRaw = LoadTex2DArrayMS(Get(vbPassTexture), Get(clampMiplessLinearSampler), uint3(In.Position.xy, VR_VIEW_ID(In.ViewID)), i);
	#else
		float4 visRaw = LoadTex3D(Get(vbPassTexture), Get(clampMiplessLinearSampler), uint3(In.Position.xy, VR_VIEW_ID(In.ViewID)), 0);
	#endif

	uint alphaBitDrawIDTriID = packUnorm4x8(visRaw);

	// Early exit if this pixel doesn't contain triangle data
	if (alphaBitDrawIDTriID == ~0u)
	{
		discard;
	}

	//extract packed data
	uint drawID = (alphaBitDrawIDTriID >> 23) & 0x000000FF;
	uint triangleID = (alphaBitDrawIDTriID & 0x007FFFFF);
	uint alpha1_opaque0 = (alphaBitDrawIDTriID >> 31);

	//this is the start vertex of the current draw batch
	uint startIndexOffset = INDIRECT_DRAW_ARGUMENTS_STRUCT_OFFSET + 2;

	uint startIndex = (alpha1_opaque0 == 0) ?
		Get(indirectDrawArgs)[0][drawID * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + startIndexOffset] :
		Get(indirectDrawArgs)[1][drawID * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + startIndexOffset];

	uint triIdx0 = (triangleID * 3 + 0) + startIndex;
	uint triIdx1 = (triangleID * 3 + 1) + startIndex;
	uint triIdx2 = (triangleID * 3 + 2) + startIndex;

	uint index0 = LoadByte(Get(filteredIndexBuffer), triIdx0 << 2);
	uint index1 = LoadByte(Get(filteredIndexBuffer), triIdx1 << 2);
	uint index2 = LoadByte(Get(filteredIndexBuffer), triIdx2 << 2);

	float3 v0pos = asfloat(LoadByte4(Get(vertexPos), index0 * 12)).xyz;
	float3 v1pos = asfloat(LoadByte4(Get(vertexPos), index1 * 12)).xyz;
	float3 v2pos = asfloat(LoadByte4(Get(vertexPos), index2 * 12)).xyz;

	float4 pos0 = mul(Get(WorldViewProjMat)[VR_VIEW_ID(In.ViewID)], float4(v0pos, 1));
	float4 pos1 = mul(Get(WorldViewProjMat)[VR_VIEW_ID(In.ViewID)], float4(v1pos, 1));
	float4 pos2 = mul(Get(WorldViewProjMat)[VR_VIEW_ID(In.ViewID)], float4(v2pos, 1));

	float3 oneOverW = 1.0 / float3(pos0.w, pos1.w, pos2.w);

	pos0 *= oneOverW.x;
	pos1 *= oneOverW.y;
	pos2 *= oneOverW.z;

	float2 posSrc[3] = {pos0.xy, pos1.xy, pos2.xy};

	//Compute partial derivatives. This is necessary to interpolate triangle attributes per pixel.
	DerivativesOutput derivativesOut = computePartialDerivatives(posSrc);

	//Calculate delta vector that points from the projected vertex 0 to the current screen point
	float2 deltaV = In.ScreenPos + -posSrc[0];

	//interpoalte the 1/w (oneOverW) for all 3 vertices of the triangle
	//using the barycentric coordinates and the delta vector
	float interpolatedW = 1.0 / interpolateAttribute(oneOverW, derivativesOut.db_dx, derivativesOut.db_dy, deltaV);

	//reconstruct the z value at this screen point
	float zVal = interpolatedW * getElem(Get(Project)[VR_VIEW_ID(In.ViewID)], 2, 2) + getElem(Get(Project)[VR_VIEW_ID(In.ViewID)], 3, 2);

	// Calculate the world position coordinates:
	// First the projected coordinates at this point are calculated using Screen Position and the Z value
	// Then by multiplying the perspective projected coordinates by the inverse view projection matrix, it produces world coord
	float3 WorldPos = mul(Get(InvViewProject)[VR_VIEW_ID(In.ViewID)], float4(In.ScreenPos * interpolatedW, zVal, interpolatedW)).xyz;

	//Texture coord interpolation
	//Apply perspective correction to texture coordinates
	f3x2 texCoords = make_f3x2_cols(
		unpack2Floats(LoadByte(Get(vertexTexCoord), index0 << 2)) * oneOverW[0],
		unpack2Floats(LoadByte(Get(vertexTexCoord), index1 << 2)) * oneOverW[1],
		unpack2Floats(LoadByte(Get(vertexTexCoord), index2 << 2)) * oneOverW[2]
	);
	// Interpolate texture coordinates and calculate the gradients for 
	// texture sampling with mipmapping support
	GradientInterpolationResults results = interpolateAttributeWithGradient(
		texCoords, derivativesOut.db_dx, derivativesOut.db_dy, deltaV, Get(mTwoOverRes));
	

	float farValue = Get(mFarNearDiff) + Get(mNear);
	float linearZ = depthLinearization(zVal / interpolatedW, Get(mNear), farValue);

	float mip = pow(pow(linearZ, 0.9f) * 5.0f, 1.5f);

	float2 texCoordDX = results.dx * interpolatedW * mip;
	float2 texCoordDY = results.dy * interpolatedW * mip;
	float2 texCoord = results.interp * interpolatedW;

	/////////////LOAD///////////////////////////////
	// TANGENT INTERPOLATION
	// Apply perspective division to tangents

	float3x3 tangents = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), index0 << 2))) * oneOverW[0],
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), index1 << 2))) * oneOverW[1],
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), index2 << 2))) * oneOverW[2]
	);

	float3 tangent = normalize(interpolateAttribute(tangents, 
		derivativesOut.db_dx, derivativesOut.db_dy, deltaV));

	// BaseMaterialBuffer returns constant offset values
	// The following value defines the maximum amount of indirect draw calls that will be 
	// drawn at once. This value depends on the number of submeshes or individual objects 
	// in the scene. Changing a scene will require to change this value accordingly.
	// #define MAX_DRAWS_INDIRECT 300 
	//
	// These values are offsets used to point to the material data depending on the 
	// type of geometry and on the culling view
	// #define MATERIAL_BASE_ALPHA0 0
	// #define MATERIAL_BASE_NOALPHA0 MAX_DRAWS_INDIRECT
	// #define MATERIAL_BASE_ALPHA1 (MAX_DRAWS_INDIRECT*2)
	// #define MATERIAL_BASE_NOALPHA1 (MAX_DRAWS_INDIRECT*3)

	uint materialBaseSlot = BaseMaterialBuffer(alpha1_opaque0 == 1, VIEW_CAMERA);

	// potential results for materialBaseSlot + drawID are
	// 0 - 299 - shadow alpha
	// 300 - 599 - shadow no alpha
	// 600 - 899 - camera alpha
	uint materialID = LoadByte(Get(indirectMaterialBuffer), (materialBaseSlot + drawID) << 2);

	//Calculate pixel color using interpolated attributes
	//reconstruct normal map Z from X and Y

	float4 normalMapRG   = f4(0);
	float4 diffuseColor  = f4(0);
	float4 specularColor = f4(0);
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		normalMapRG   = SampleGradTex2D(Get(normalMaps)[materialID],   Get(textureSampler), texCoord, texCoordDX, texCoordDY);
		diffuseColor  = SampleGradTex2D(Get(diffuseMaps)[materialID],  Get(textureSampler), texCoord, texCoordDX, texCoordDY);
		specularColor = SampleGradTex2D(Get(specularMaps)[materialID], Get(textureSampler), texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	float3 reconstructedNormalMap;
	reconstructedNormalMap.xy = normalMapRG.ga * 2.f - 1.f;
	reconstructedNormalMap.z = sqrt(1.f - dot(reconstructedNormalMap.xy, reconstructedNormalMap.xy));

	//Normal interpolation
	//Apply perspective division
	float3x3 normals = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), index0 << 2))) * oneOverW[0],
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), index1 << 2))) * oneOverW[1],
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), index2 << 2))) * oneOverW[2]
	);

	float3 normal = normalize(interpolateAttribute(normals, 
		derivativesOut.db_dx, derivativesOut.db_dy, deltaV));
	
	float3 binormal = normalize(cross(tangent, normal));

	normal = reconstructedNormalMap.x * tangent + 
		reconstructedNormalMap.y * binormal + reconstructedNormalMap.z * normal;

	float shadowFactor = 1.0f;

	if(Get(ShadowType) == SHADOW_TYPE_ASM)
	{
		shadowFactor = SampleShadowFactor(WorldPos);
	}
	else if(Get(ShadowType) == SHADOW_TYPE_ESM)
	{
		shadowFactor = calcESMShadowFactor(WorldPos);
	}
	else if(Get(ShadowType) == SHADOW_TYPE_MESH_BAKED_SDF)
	{
		shadowFactor = LoadTex3D(Get(SDFShadowTexture), Get(clampMiplessNearSampler), uint3(In.Position.xy, VR_VIEW_ID(In.ViewID)), 0).r;
	}

	float Roughness = clamp(specularColor.a, 0.05f, 0.99f);
	float Metallic = specularColor.b;

	float3 camPos = Get(mCameraPos).xyz;

	float3 ViewVec = normalize(Get(mCameraPos).xyz - WorldPos.xyz);

	bool isTwoSided = (alpha1_opaque0 == 1) && (Get(meshConstantsBuffer)[materialID].twoSided == 1);
	bool isBackFace = false;

	if(isTwoSided && dot(normal, ViewVec) < 0.0)
	{
		//flip normal
		normal = -normal;
		isBackFace = true;
	}

	float3 lightDir = -Get(mLightDir);

	float3 HalfVec = normalize(ViewVec - lightDir);
	float3 ReflectVec = reflect(-ViewVec, normal);
	float NoV = saturate(dot(normal, ViewVec));

	float NoL = dot(normal, -lightDir);	

	// Deal with two faced materials
	NoL = (isTwoSided ? abs(NoL) : saturate(NoL));

	float3 shadedColor;

	// float3 F0 = specularColor.xyz;
	float3 DiffuseColor = diffuseColor.xyz;
	
	float fLightingMode = 1.f;

	shadedColor = calculateIllumination(
		    normal,
		    ViewVec,
			HalfVec,
			ReflectVec,
			NoL,
			NoV,
			camPos.xyz,
			lightDir.xyz,
			WorldPos,
			DiffuseColor,
			DiffuseColor,
			Roughness,
			Metallic,
			isBackFace,
			fLightingMode,
			shadowFactor);

	shadedColor = shadedColor * Get(lightColor).rgb * Get(lightColor).a * NoL;

	float ambientIntencity = 0.2f;
    float3 ambient = diffuseColor.xyz * ambientIntencity;

	shadedColor += ambient;
    
    Out.FinalColor = float4(shadedColor.xyz, 1.0f);
	RETURN(Out);
}
