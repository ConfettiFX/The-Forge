/*
 * Copyright (c) 2018-2021 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

RES(SamplerState, clampNearSampler, UPDATE_FREQ_NONE, s0, binding = 1);
RES(Tex2D(float4), screenTexture, UPDATE_FREQ_NONE, t1, binding = 2);

CBUFFER(UniformQuadData, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
	DATA(float4x4, mModelMat, None);
};

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, Tex_Coord, TEXCOORD0);
};

float LinearizeDepth(float depth)
{
	const float nearPlane = 0.1f;
	const float farPlane = 1000.f;

    float z = depth * 2.0 - 1.0;
    return (2.0 * nearPlane * farPlane) / (farPlane + nearPlane - z * (farPlane - nearPlane));
}

float4 PS_MAIN( VSOutput In )
{
	INIT_MAIN;
	float4 Out;
	float3 color = SampleTex2D(Get(screenTexture), Get(clampNearSampler), In.Tex_Coord).xyz;
	Out = float4(color, 1.0);
	RETURN(Out);
}
