/*
* Copyright (c) 2018-2021 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#include "SDF_Constant.h"

#ifndef SAMPLE_COUNT
#define SAMPLE_COUNT 4
#endif

#if SAMPLE_COUNT > 1
RES(Depth2DMS(float, SAMPLE_COUNT), DepthTexture, UPDATE_FREQ_NONE, t0, binding = 0);
#else
RES(Depth2D(float), DepthTexture, UPDATE_FREQ_NONE, t0, binding = 0);
#endif

RES(Tex3D(float), SDFVolumeTextureAtlas, UPDATE_FREQ_NONE, t1, binding = 1);
RES(WTex2D(float4), OutTexture, UPDATE_FREQ_NONE, u0, binding = 2);

RES(SamplerState, clampToEdgeTrillinearSampler, UPDATE_FREQ_NONE, s0, binding = 3);
RES(SamplerState, clampToEdgeNearSampler, UPDATE_FREQ_NONE, s1, binding = 4);

CBUFFER(cameraUniformBlock, UPDATE_FREQ_PER_FRAME, b0, binding = 5)
{
    DATA(float4x4, View, None);
    DATA(float4x4, Project[VR_MULTIVIEW_COUNT], None);
    DATA(float4x4, ViewProject[VR_MULTIVIEW_COUNT], None);
    DATA(float4x4, InvView, None);
	DATA(float4x4, InvProj[VR_MULTIVIEW_COUNT], None);
	DATA(float4x4, InvViewProject[VR_MULTIVIEW_COUNT], None);
	DATA(float4, mCameraPos, None);
	DATA(float, mNear, None);
	DATA(float, mFarNearDiff, None);
	DATA(float, mFarNear, None);
	DATA(float, paddingForAlignment0, None);
	DATA(float2, mTwoOverRes, None);
	DATA(float, _pad1, None);
	DATA(float, _pad2, None);
	DATA(float2, mWindowSize, None);
};

CBUFFER(meshSDFUniformBlock, UPDATE_FREQ_PER_FRAME, b1, binding = 6)
{
	DATA(float4x4, mWorldToVolumeMat[SDF_MAX_OBJECT_COUNT], None);
	DATA(float4, mUVScaleAndVolumeScale[SDF_MAX_OBJECT_COUNT], None);
	DATA(float4, mLocalPositionExtent[SDF_MAX_OBJECT_COUNT], None);
	DATA(float4, mUVAddAndSelfShadowBias[SDF_MAX_OBJECT_COUNT], None);
	DATA(float4, mSDFMAD[SDF_MAX_OBJECT_COUNT], None);
	DATA(uint, mNumObjects, None);
};

float2 LineBoxIntersect(float3 RayOrigin, float3 RayEnd, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0f / (RayEnd - RayOrigin);
	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;
	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;
	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);
	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;
	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));
	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));
	return saturate(BoxIntersections);
}

float3 SDFVolumeDimensionPositionToUV(float3 volumePos, float3 uvScale, float3 uvAdd)
{
	return volumePos * uvScale + uvAdd;
}

float SampleSDFVolumeTextureAtlas(float3 volumeUV)
{
	return SampleLvlTex3D(Get(SDFVolumeTextureAtlas), Get(clampToEdgeTrillinearSampler), volumeUV, 0).r;
}

void RayTraceScene(float3 rayWorldStartPos, float3 rayWorldEndPos, float maxRayTime , 
	inout(float) minRayTime, inout(float) stepsTaken)
{
	minRayTime = maxRayTime;
	stepsTaken = 0;
	

	for(uint index = 0; index < Get(mNumObjects); ++index)
	{
		float3 volumeRayStart = mul(Get(mWorldToVolumeMat)[index], float4(rayWorldStartPos.xyz, 1.0)).xyz;
		float3 volumeRayEnd = mul(Get(mWorldToVolumeMat)[index], float4(rayWorldEndPos.xyz, 1.0)).xyz;
		float3 volumeRayDir = volumeRayEnd - volumeRayStart;
		float volumeRayLength = length(volumeRayDir);
		volumeRayDir /= volumeRayLength;

		float2 intersectionTimes = LineBoxIntersect(volumeRayStart, 
			volumeRayEnd, -Get(mLocalPositionExtent)[index].xyz, Get(mLocalPositionExtent)[index].xyz);

		if(intersectionTimes.x < intersectionTimes.y && intersectionTimes.x < 1)
		{
			//we jump straight the position of the ray when it hits the volume dimension bbox
			float sampleRayTime = intersectionTimes.x * volumeRayLength;
			
			float minDist = 1000000;
			
			uint stepIndex = 0;
			uint maxSteps = 256;
		
			LOOP
			for(; stepIndex < maxSteps; ++stepIndex)
			{
				float3 sampleVolumePos = volumeRayStart + volumeRayDir * sampleRayTime;
				float3 clampedSamplePos = clamp(sampleVolumePos, 
					-Get(mLocalPositionExtent)[index].xyz, Get(mLocalPositionExtent)[index].xyz);
				float3 volumeUV = SDFVolumeDimensionPositionToUV(clampedSamplePos,
					Get(mUVScaleAndVolumeScale)[index].xyz,  Get(mUVAddAndSelfShadowBias)[index].xyz);
			
				float sdfValue = SampleSDFVolumeTextureAtlas(volumeUV);

				minDist = min(minDist, sdfValue);

				float minStepSize = 1.0f / (4.f * maxSteps);
				float curStepDist = max(sdfValue, minStepSize);

				sampleRayTime += curStepDist;

				if(sdfValue < 0 || sampleRayTime > intersectionTimes.y * volumeRayLength)
				{
					break;
				}

			}

			if(minDist * Get(mUVScaleAndVolumeScale)[index].w < 0 || stepIndex == maxSteps)
			{
				minRayTime = min(minRayTime, sampleRayTime * Get(mUVScaleAndVolumeScale)[index].w);
			}
			stepsTaken += stepIndex;
		}
	}

}

NUM_THREADS(SDF_MESH_VISUALIZATION_THREAD_X, SDF_MESH_VISUALIZATION_THREAD_Y, 1)

void CS_MAIN( SV_GroupID(uint3) GroupID, SV_DispatchThreadID(uint3) DispatchThreadID, SV_GroupThreadID(uint3) GroupThreadID )
{
	INIT_MAIN;
	uint3 localDispatchThreadID = DispatchThreadID * SDF_SHADOW_DOWNSAMPLE_VALUE;

	float xClip = (( float(localDispatchThreadID.x) * 2.f) / Get(mWindowSize).x) - 1.f;
	float yClip = 1.f - (( float(localDispatchThreadID.y) * 2.f) / Get(mWindowSize).y);

#if SAMPLE_COUNT > 1
	float depthVal = LoadTex2DMS(Get(DepthTexture), Get(clampToEdgeNearSampler), localDispatchThreadID.xy, 0).r;
#else
	float2 depthSize = Get(mWindowSize);
	float2 depthUV = float2(localDispatchThreadID.xy) / depthSize;
	float depthVal = SampleLvlTex2D(Get(DepthTexture), Get(clampToEdgeNearSampler), depthUV, 0).r;
#endif

	float4 worldPosW =  mul(Get(InvViewProject)[DispatchThreadID.z], float4(xClip, yClip, depthVal, 1.0));
	float3 worldPos = (worldPosW / worldPosW.w).xyz;
	

	float traceDistance = 40000;
	float3 cameraWorldPos = Get(mCameraPos).xyz;
	float3 rayDir = normalize( worldPos - cameraWorldPos );
	float3 rayEndPos = cameraWorldPos + rayDir * traceDistance;

	float minRayTime = traceDistance;
	float totalStepsTaken = 0;

	RayTraceScene(cameraWorldPos, rayEndPos, traceDistance, 
		minRayTime, totalStepsTaken);

	float saturatedStepsTaken =  saturate(totalStepsTaken / 200.0f);

	float3 Result = float3(saturatedStepsTaken, saturatedStepsTaken, saturatedStepsTaken);


	if(minRayTime < traceDistance)
	{
		Result += 0.1f;
	}

	Write2D(Get(OutTexture), DispatchThreadID.xy, float4(Result, 1.0));
	
	RETURN();
}
