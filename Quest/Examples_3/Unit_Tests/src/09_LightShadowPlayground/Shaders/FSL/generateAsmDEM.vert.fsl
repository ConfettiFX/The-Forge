/*
* Copyright (c) 2018-2021 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#define QUADS_ARRAY_REGS 192

RES(SamplerState, clampToEdgeNearSampler, UPDATE_FREQ_NONE, s0, binding = 1);
RES(Tex2D(float4), DepthPassTexture, UPDATE_FREQ_NONE, t1, binding = 2);

CBUFFER(PackedAtlasQuads_CB, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
	DATA(float4, mQuadsData[QUADS_ARRAY_REGS], None);
};

STRUCT(AtlasQuads)
{
	DATA(float4, mPosData, None);
	DATA(float4, mMiscData, None);
	DATA(float4, mTexCoordData, None);
};

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
	DATA(float2, UV, TEXCOORD0);
    DATA(float4, MiscData, TEXCOORD1);
};

float2 ScaleOffset(float2 a, float4 p)
{
	return a * p.xy + p.zw;
}

VSOutput VS_MAIN( SV_VertexID(uint) vertexID )
{
	INIT_MAIN;
	VSOutput Out;

	const uint verticesPerQuad = 6;
    uint quadID = vertexID / verticesPerQuad;
    uint quadVertexID = vertexID - quadID * verticesPerQuad;

	float2 pos = float2(-1.0,1.0 );
	if( quadVertexID == 1 ) pos = float2(-1.0, -1.0 );
    if( quadVertexID == 2 ) pos = float2( 1.0,-1.0 );
    if( quadVertexID == 3 ) pos = float2( 1.0,-1.0 );
    if( quadVertexID == 4 ) pos = float2(1.0, 1.0 );
    if( quadVertexID == 5 ) pos = float2( -1.0, 1.0 );

	const uint registersPerQuad = 3;
	float4 quadData[ registersPerQuad ];

	for(uint i = 0; i < registersPerQuad; ++i)
	{
		quadData[i] = Get(mQuadsData)[quadID * registersPerQuad + i];
	}

	AtlasQuads atlasQuad;
	atlasQuad.mPosData = quadData[0];
	atlasQuad.mMiscData = quadData[1];
	atlasQuad.mTexCoordData = quadData[2];

	Out.Position = float4(ScaleOffset(pos, atlasQuad.mPosData), 0.0, 1.0);
	Out.MiscData = atlasQuad.mMiscData;
	Out.UV = ScaleOffset(float2(0.5, -0.5) * pos + 0.5,  atlasQuad.mTexCoordData);

	RETURN(Out);
}
