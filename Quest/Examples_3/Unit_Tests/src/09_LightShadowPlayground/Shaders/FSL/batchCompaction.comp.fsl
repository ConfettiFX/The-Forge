/*
* Copyright (c) 2018-2021 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#include "Shader_Defs.h"
#include "cull_resources.h"

NUM_THREADS(CLEAR_THREAD_COUNT, 1, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) threadID) 
{
	INIT_MAIN;
    if (threadID.x >= MAX_DRAWS_INDIRECT - 1)
	{
		RETURN();
	}

	uint numIndices[NUM_CULLING_VIEWPORTS];
	uint sum = 0;

	UNROLL_N(NUM_CULLING_VIEWPORTS)
	for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
	{
		numIndices[i] = Get(uncompactedDrawArgs)[i][threadID.x].mNumIndices;
		sum += numIndices[i];
	}

	if (sum == 0)
	{
		RETURN();
	}
	uint slot = 0;

	#define LOOP_BODY(j)																																									   \
		if (numIndices[j] > 0)																																								   \
		{																																													   \
			uint matID = Get(uncompactedDrawArgs)[j][threadID.x].mMaterialID;																												   \
			bool hasAlpha = (Get(materialProps)[matID] == 1);																																   \
			uint baseMatSlot = BaseMaterialBuffer(hasAlpha, j);																																   \
																																															   \
			uint indexCountOffset = INDIRECT_DRAW_ARGUMENTS_STRUCT_OFFSET + 0;																												   \
			uint startIndexOffset = INDIRECT_DRAW_ARGUMENTS_STRUCT_OFFSET + 2;																												   \
																																															   \
			if (hasAlpha)																																									   \
			{																																												   \
				AtomicAdd(Get(indirectDrawArgsBufferAlpha)[j][DRAW_COUNTER_SLOT_POS], 1, slot);																								   \
				AtomicStore(Get(indirectDrawArgsBufferAlpha)[j][slot * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + indexCountOffset], numIndices[j]);										   \
				AtomicStore(Get(indirectDrawArgsBufferAlpha)[j][slot * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + startIndexOffset], Get(uncompactedDrawArgs)[j][threadID.x].mStartIndex);  \
			}																																												   \
			else																																											   \
			{																																												   \
				AtomicAdd(Get(indirectDrawArgsBufferNoAlpha)[j][DRAW_COUNTER_SLOT_POS], 1, slot);																							   \
				AtomicStore(Get(indirectDrawArgsBufferNoAlpha)[j][slot * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + indexCountOffset], numIndices[j]);									   \
				AtomicStore(Get(indirectDrawArgsBufferNoAlpha)[j][slot * INDIRECT_DRAW_ARGUMENTS_STRUCT_NUM_ELEMENTS + startIndexOffset], Get(uncompactedDrawArgs)[j][threadID.x].mStartIndex);\
			}																																												   \
			StoreByte(Get(indirectMaterialBuffer), (baseMatSlot + slot) << 2, matID);																										   \
		}

	#if TARGET_QUEST
		LOOP_BODY(0)
		LOOP_BODY(1)
	#else
		UNROLL_N(NUM_CULLING_VIEWPORTS)
		for (uint j = 0; j < NUM_CULLING_VIEWPORTS; ++j)
		{
			LOOP_BODY(j)
		}
	#endif
	RETURN();
}
