/*
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shadowSamples.h"
#define FLOOR
#include "resources.h"

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float3, WorldPos, POSITION);
    DATA(float2, TexCoord, TEXCOORD);
};

float CalcESMShadowFactor(float3 worldPos)
{
	float4 posLS = mul(Get(shadowLightViewProj), float4(worldPos.xyz, 1.0));
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + float2(0.5, 0.5);


	float2 HalfGaps = float2(0.00048828125, 0.00048828125);
	// float2 Gaps = float2(0.0009765625, 0.0009765625);

	posLS.xy += HalfGaps;

	float shadowFactor = 1.0;

	/*
	if ( !all(posLS.xy > 0) || !all(posLS.xy < 1))
	{
		return shadowFactor;
	}
	*/

	float4 shadowDepthSample = float4(0, 0, 0, 0);
	shadowDepthSample.x = SampleLvlTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0).r;
	shadowDepthSample.y = SampleLvlOffsetTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(1, 0)).r;
	shadowDepthSample.z = SampleLvlOffsetTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(0, 1)).r;
	shadowDepthSample.w = SampleLvlOffsetTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(1, 1)).r;
	float avgShadowDepthSample = (shadowDepthSample.x + shadowDepthSample.y + shadowDepthSample.z + shadowDepthSample.w) * 0.25f;
	shadowFactor = saturate(2.0 - exp((posLS.z - avgShadowDepthSample) * 1.0f ));
	return shadowFactor;
}

float random(float3 seed, float3 freq)
{
	// project seed on random constant vector
	float dt = dot(floor(seed * freq), float3(53.1215, 21.1352, 9.1322));
	// return only the fractional part
	return frac(sin(dt) * 2105.2354);
}

float CalcPCFShadowFactor(float3 worldPos)
{
	float4 posLS = mul(Get(shadowLightViewProj), float4(worldPos.xyz, 1.0));
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + float2(0.5, 0.5);


	float2 HalfGaps = float2(0.00048828125, 0.00048828125);
	// float2 Gaps = float2(0.0009765625, 0.0009765625);

	posLS.xy += HalfGaps;

	float shadowFactor = 1.0;

		float shadowFilterSize = 0.0016;
		float angle = random(worldPos, f3(20.0));
		float s = sin(angle);
		float c = cos(angle);

		for (int i = 0; i < NUM_SHADOW_SAMPLES; i++)
		{
			float2 offset = float2(shadowSamples[i * 2], shadowSamples[i * 2 + 1]);
			offset = float2(offset.x * c + offset.y * s, offset.x * -s + offset.y * c);
			offset *= shadowFilterSize;
			float shadowMapValue = SampleLvlTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy + offset, 0).r;
			shadowFactor += (shadowMapValue - 0.002f > posLS.z ? 0.0f : 1.0f);
		}
		shadowFactor *= NUM_SHADOW_SAMPLES_INV;
		return shadowFactor;
}

float ClaculateShadow(float3 worldPos)
{
	float4 NDC = mul(Get(shadowLightViewProj), float4(worldPos, 1.0));
	NDC /= NDC.w;
	float Depth = NDC.z;
	float2 ShadowCoord = float2((NDC.x + 1.0)*0.5, (1.0 - NDC.y)*0.5);
	float ShadowDepth = SampleTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), ShadowCoord).r;
	

	if(ShadowDepth - 0.002f > Depth)
		return 0.1f;
	else
		return 1.0f;
}

float4 PS_MAIN( VSOutput In )
{
	INIT_MAIN;
	float4 Out;
	float3 color = float3(1.0, 1.0, 1.0);

	color *= CalcPCFShadowFactor(In.WorldPos);

	float i = 1.0 - length(abs(In.TexCoord.xy));
	i = pow(i, 1.2f);	
	Out = float4(color.rgb, i);
	RETURN(Out);
}