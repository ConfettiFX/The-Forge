/*
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#define PI 3.141592654f

#include "shadowSamples.h"
#define BASIC
#include "resources.h"

STRUCT(PsIn)
{    
    DATA(float3, pos, POSITION);
	DATA(float3, normal, NORMAL);
	DATA(float2, texCoord, TEXCOORD0);
};

STRUCT(PSOut)
{
    DATA(float4, outColor, SV_Target0);
    //float4 normal : SV_Target1;
};

float3 FresnelSchlickRoughness(float cosTheta, float3 F0, float roughness)
{
	return F0 + (max(float3(1.0 - roughness, 1.0 - roughness, 1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

float3 fresnelSchlick(float cosTheta, float3 F0)
{
	float Fc = pow(1.0f - cosTheta, 5.0f);
	return F0 + (1.0f - F0) * Fc;
}

float4 sampleTexture(GLTFTextureProperties textureProperties, 
					Tex2D(float4) tex, SamplerState samplerState, 
					float4 scaleFactor,
					float2 uv)
{
	uint textureIndex = textureProperties.mTextureSamplerIndex & 0xFFFF;
	// uint samplerIndex = textureProperties.mTextureSamplerIndex >> 16;
	if (textureIndex == 0xFFFF)
	{
		return scaleFactor;
	}

	float2 texCoord = uv * textureProperties.mScale + textureProperties.mOffset;
	if (textureProperties.mRotation != 0)
	{
		float s, c;
		sincos(textureProperties.mRotation, s, c);
		texCoord = float2(c * texCoord.x - s * texCoord.y, s * texCoord.x + c * texCoord.y);
	}

	return SampleTex2D(tex, samplerState, texCoord) * textureProperties.mValueScale * scaleFactor;
}

float distributionGGX(float3 N, float3 H, float roughness)
{
	float a = roughness*roughness;
	float a2 = a*a;
	float NdotH = max(dot(N,H), 0.0);
	float NdotH2 = NdotH*NdotH;
	float nom = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0f);
	float k = (r*r) / 8.0f;
	
	float nom = NdotV;
	float denom = NdotV * (1.0 - k) + k;

	return nom/denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);

	return ggx1 * ggx2;
}

// Appoximation of joint Smith term for GGX
// [Heitz 2014, "Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs"]
float Vis_SmithJointApprox(float a, float NoV, float NoL)
{	
	float Vis_SmithV = NoL * (NoV * (1.0f - a) + a);
	float Vis_SmithL = NoV * (NoL * (1.0f - a) + a);
	return 0.5 * rcp(max(Vis_SmithV + Vis_SmithL, 0.001));
}

float3 reconstructNormal(in(float4) sampleNormal)
{
	float3 tangentNormal;
	tangentNormal.xy = sampleNormal.rg * 2 - 1;
	tangentNormal.z = sqrt(1.0 - saturate(dot(tangentNormal.xy, tangentNormal.xy)));
	return normalize(tangentNormal);
}

float3 getNormalFromMap(float3 normal, float3 pos, float2 uv)
{
	uint textureIndex = Get(materialData).mNormalTextureProperties.mTextureSamplerIndex & 0xFFFF;
	if (textureIndex == 0xFFFF) 
	{
		return normalize(normal);
	}

	float3 tangentNormal = reconstructNormal(SampleTex2D(Get(normalMap), Get(normalMapSampler), uv));

	float3 Q1 = ddx(pos);
	float3 Q2 = ddy(pos);
	float2 st1 = ddx(uv);
	float2 st2 = ddy(uv);

	float3 N = normalize(normal);
	float3 T = Q1*st2.g - Q2 * st1.g;
	T = normalize(T);

	if(isnan(T.x) ||isnan(T.y) || isnan(T.z))
	{
		float3 UpVec = abs(N.y) < 0.999 ? float3(0.0, 1.0, 0.0) : float3(0.0, 0.0, 1.0);
		T = normalize(cross(N, UpVec));
	}

	float3 B = normalize(cross(T, N));
	float3x3 TBN = make_f3x3_rows(T, B, N);

	return normalize(mul(tangentNormal, TBN));
}

float3 ComputeLight(float3 albedo, float3 _lightColor,
float3 metalness, float roughness,
float3 N, float3 L, float3 V, float3 H, float NoL, float NoV)
{
	float a  = roughness * roughness;
	// 0.04 is the index of refraction for metal
	float3 F0 = float3(0.04f, 0.04f, 0.04f);
	float3 diffuse = (1.0 - metalness) * albedo;
	float NDF = distributionGGX(N, H, roughness);
	float G = Vis_SmithJointApprox(a, NoV, NoL);
	float3 F = fresnelSchlick(max(dot(N, H), 0.0f), lerp(F0, albedo, metalness));	
	float3 specular = NDF * G * F;
	
	// To intensify Fresnel
	float3 F2 = fresnelSchlick(max(dot(N, V), 0.0f), F0);
	specular += F2;

	float3 irradiance = _lightColor * float3(1.0, 1.0, 1.0);
	float3 result = (diffuse + specular) * NoL * irradiance;

	return result;
}

float CalcESMShadowFactor(float3 worldPos)
{
	float4 posLS = mul(Get(shadowLightViewProj), float4(worldPos.xyz, 1.0));
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + float2(0.5, 0.5);


	float2 HalfGaps = float2(0.00048828125, 0.00048828125);
	// float2 Gaps = float2(0.0009765625, 0.0009765625);

	posLS.xy += HalfGaps;

	float shadowFactor = 1.0;

	float4 shadowDepthSample = float4(0, 0, 0, 0);
	shadowDepthSample.x = SampleLvlTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0).r;
	shadowDepthSample.y = SampleLvlOffsetTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(1, 0)).r;
	shadowDepthSample.z = SampleLvlOffsetTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(0, 1)).r;
	shadowDepthSample.w = SampleLvlOffsetTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy, 0, int2(1, 1)).r;
	float avgShadowDepthSample = (shadowDepthSample.x + shadowDepthSample.y + shadowDepthSample.z + shadowDepthSample.w) * 0.25f;
	shadowFactor = saturate(2.0 - exp((posLS.z - avgShadowDepthSample) * 100.0f ));
	return shadowFactor;
}

float random(float3 seed, float3 freq)
{
	// project seed on random constant vector
	float dt = dot(floor(seed * freq), float3(53.1215, 21.1352, 9.1322));
	// return only the fractional part
	return frac(sin(dt) * 2105.2354);
}

float CalcPCFShadowFactor(float3 worldPos)
{
	float4 posLS = mul(Get(shadowLightViewProj), float4(worldPos.xyz, 1.0));
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + float2(0.5, 0.5);


	float2 HalfGaps = float2(0.00048828125, 0.00048828125);
	// float2 Gaps = float2(0.0009765625, 0.0009765625);

	posLS.xy += HalfGaps;

	float shadowFactor = 1.0;

	float shadowFilterSize = 0.0016;
	float angle = random(worldPos, f3(20.0));
	float s = sin(angle);
	float c = cos(angle);

	for (int i = 0; i < NUM_SHADOW_SAMPLES; i++)
	{
		float2 offset = float2(shadowSamples[i * 2], shadowSamples[i * 2 + 1]);
		offset = float2(offset.x * c + offset.y * s, offset.x * -s + offset.y * c);
		offset *= shadowFilterSize;
		float shadowMapValue = SampleLvlTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), posLS.xy + offset, 0).r;
		shadowFactor += (shadowMapValue - 0.002f > posLS.z ? 0.0f : 1.0f);
	}
	shadowFactor *= NUM_SHADOW_SAMPLES_INV;
	return shadowFactor;
}

float CalculateShadow(float3 worldPos)
{
	float4 NDC = mul(Get(shadowLightViewProj), float4(worldPos, 1.0));
	NDC /= NDC.w;
	float Depth = NDC.z;
	float2 ShadowCoord = float2((NDC.x + 1.0)*0.5, (1.0 - NDC.y)*0.5);
	float ShadowDepth = SampleTex2D(Get(ShadowTexture), Get(clampMiplessLinearSampler), ShadowCoord).r;
	

	if(ShadowDepth - 0.002f > Depth)
		return 0.0f;
	else
		return 1.0f;
}

PSOut PS_MAIN( PsIn In )
{	
	INIT_MAIN;
	PSOut Out;

	// TODO: multiply factors (e.g. mBaseColorFactor) by vertex colours.
	float4 baseColor = sampleTexture(Get(materialData).mBaseColorProperties, 
							Get(baseColorMap), Get(baseColorSampler), 
							Get(materialData).mBaseColorFactor,
							In.texCoord);

	float4 metallicRoughness = sampleTexture(Get(materialData).mMetallicRoughnessProperties, 
									Get(metallicRoughnessMap), Get(metallicRoughnessSampler), 
									Get(materialData).mMetallicRoughnessFactors,
									In.texCoord);

	float ao = sampleTexture(Get(materialData).mOcclusionTextureProperties, 
					Get(occlusionMap), Get(occlusionMapSampler), 
					f4(1.0),
					In.texCoord).x;

	float3 emissive = sampleTexture(Get(materialData).mEmissiveTextureProperties, 
							Get(emissiveMap), Get(emissiveMapSampler), 
							f4(1.0),
							In.texCoord).rgb;
	emissive *= Get(materialData).mEmissiveTextureProperties.mValueScale;
	emissive.gb *= Get(materialData).mEmissiveGBScale;

	float3 normal = getNormalFromMap(In.normal, In.pos, In.texCoord);

	// Apply alpha mask
#if TARGET_ANDROID
	bool useAlpha = Get(materialData).mAlphaCutoff < 1.0;
	float3 metalness = f3(metallicRoughness.r);
#else
	bool useAlpha = Get(materialData).mAlphaMode == 1;
	float3 metalness = f3(metallicRoughness.b);
#endif
	if (useAlpha && Get(materialData).mAlphaCutoff < 1.f && baseColor.a < Get(materialData).mAlphaCutoff)
		clip(-0.5);

	float roughness = metallicRoughness.g;

	roughness = clamp(0.02f, 1.0f, roughness);

	// Compute Direction light
	float3 N = normal;	
	float3 V = normalize(Get(camPos).xyz - In.pos);
	float NoV = max(dot(N,V), 0.0);	

	float3 result = float3(0.0, 0.0, 0.0);

	UNROLL
	for(uint i=0; i<1; ++i)
	{
		float3 L = normalize(Get(lightDirection)[i].xyz);
		float3 radiance = Get(lightColor)[i].rgb;
		float lightIntensity = Get(lightColor)[i].a;
		float3 H = normalize(V + L);	
		float NoL = max(dot(N,L), 0.0);
		result += ComputeLight(baseColor.rgb, radiance, metalness, roughness, N, L, V, H, NoL, NoV) * lightIntensity;
	}

	// AO
	result *= ao;

#ifndef DIRECT3D11
	result *= CalcPCFShadowFactor(In.pos);
	// Ambient Light
	result += baseColor.rgb * Get(lightColor)[3].rgb * Get(lightColor)[3].a;
#endif

	result += emissive;

	Out.outColor = float4(result.r, result.g, result.b, baseColor.a);
	Out = Out;
	RETURN(Out);
}
