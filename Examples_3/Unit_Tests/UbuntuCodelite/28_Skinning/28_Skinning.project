<?xml version="1.0" encoding="UTF-8"?>
<CodeLite_Project Name="28_Skinning" InternalType="Console" Version="11000">
  <Plugins>
    <Plugin Name="qmake">
      <![CDATA[00020001N0005Debug0000000000000001N0007Release000000000000]]>
    </Plugin>
  </Plugins>
  <Description/>
  <Dependencies/>
  <VirtualDirectory Name="src">
    <File Name="../../src/28_Skinning/28_Skinning.cpp" ExcludeProjConfig=""/>
  </VirtualDirectory>
  <VirtualDirectory Name="Shaders">
    <File Name="../../src/28_Skinning/Shaders/FSL/basic.frag.fsl"/>
    <File Name="../../src/28_Skinning/Shaders/FSL/basic.vert.fsl"/>
    <File Name="../../src/28_Skinning/Shaders/FSL/plane.frag.fsl"/>
    <File Name="../../src/28_Skinning/Shaders/FSL/plane.vert.fsl"/>
    <File Name="../../src/28_Skinning/Shaders/FSL/skinning.frag.fsl"/>
    <File Name="../../src/28_Skinning/Shaders/FSL/skinning.vert.fsl"/>
    <File Name="../../src/28_Skinning/Shaders/FSL/ShaderList.fsl"/>
  </VirtualDirectory>
  <Dependencies Name="Debug">
    <Project Name="OS"/>
    <Project Name="Renderer"/>
    <Project Name="SpirVTools"/>
    <Project Name="gainput"/>
    <Project Name="ozz_base"/>
    <Project Name="ozz_animation"/>
  </Dependencies>
  <Dependencies Name="Release">
    <Project Name="gainput"/>
    <Project Name="SpirVTools"/>
    <Project Name="OS"/>
    <Project Name="Renderer"/>
    <Project Name="ozz_base"/>
    <Project Name="ozz_animation"/>
  </Dependencies>
  <Settings Type="Executable">
    <GlobalSettings>
      <Compiler Options="" C_Options="" Assembler="">
        <IncludePath Value="$(WorkspacePath)/../../../Common_3/Resources/AnimationSystem/ThirdParty/OpenSource/ozz-animation/include"/>
      </Compiler>
      <Linker Options=""/>
      <ResourceCompiler Options=""/>
    </GlobalSettings>
    <Configuration Name="Debug" CompilerType="GCC" DebuggerType="GNU gdb debugger" Type="Executable" BuildCmpWithGlobalSettings="append" BuildLnkWithGlobalSettings="prepend" BuildResWithGlobalSettings="append">
      <Compiler Options="-g;-O0;-Wall;-Werror;-mavx2;-std=c++14;-fno-rtti;-fno-exceptions;" C_Options="-g;-O0;-Wall;-Werror;-mavx2;" Assembler="" Required="yes" PreCompiledHeader="" PCHInCommandLine="no" PCHFlags="" PCHFlagsPolicy="0">
        <IncludePath Value="."/>
        <IncludePath Value="$(ProjectPath)/../.."/>
        <IncludePath Value="$(ProjectPath)/../../../.."/>
      </Compiler>
      <Linker Options="-ludev;-ldl;-pthread;-lXrandr;$(shell pkg-config --libs gtk+-3.0)" Required="yes">
        <LibraryPath Value="$(ProjectPath)/../gainput/Debug/"/>
        <LibraryPath Value="$(ProjectPath)/../ozz_base/Debug/"/>
        <LibraryPath Value="$(ProjectPath)/../ozz_animation/Debug/"/>
        <LibraryPath Value="$(ProjectPath)/../OSBase/Debug/"/>
        <LibraryPath Value="$(ProjectPath)/../Renderer/Debug/"/>
        <LibraryPath Value="$(ProjectPath)/../SpirVTools/Debug/"/>
        <Library Value="libRenderer.a"/>
        <Library Value="libOS.a"/>
        <Library Value="libX11.a"/>
        <Library Value="libSpirVTools.a"/>
        <Library Value="libvulkan.so"/>
        <Library Value="libgainput.a"/>
        <Library Value="libozz_animation.a"/>
        <Library Value="libozz_base.a"/>
      </Linker>
      <ResourceCompiler Options="" Required="no"/>
      <General OutputFile="$(IntermediateDirectory)/$(ProjectName)" IntermediateDirectory="./Debug" Command="./$(ProjectName)" CommandArguments="" UseSeparateDebugArgs="no" DebugArguments="" WorkingDirectory="$(IntermediateDirectory)" PauseExecWhenProcTerminates="yes" IsGUIProgram="no" IsEnabled="yes"/>
      <BuildSystem Name="Default"/>
      <Environment EnvVarSetName="&lt;Use Defaults&gt;" DbgSetName="&lt;Use Defaults&gt;">
        <![CDATA[]]>
      </Environment>
      <Debugger IsRemote="no" RemoteHostName="" RemoteHostPort="" DebuggerPath="" IsExtended="no">
        <DebuggerSearchPaths/>
        <PostConnectCommands/>
        <StartupCommands/>
      </Debugger>
      <PreBuild/>
      <PostBuild>
        <Command Enabled="no"># Src</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/OSBase/$(ConfigurationName)/Shaders/ $(ProjectPath)/$(ConfigurationName)/Shaders/</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/OSBase/$(ConfigurationName)/CompiledShaders/ $(ProjectPath)/$(ConfigurationName)/CompiledShaders/</Command>
        <Command Enabled="no"># GpuConfig</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../src/$(ProjectName)/GPUCfg/ $(ProjectPath)/$(ConfigurationName)/GPUCfg/</Command>
        <Command Enabled="yes">rsync -u $(WorkspacePath)/../../../Common_3/OS/Linux/steamdeck_gpu.data $(ProjectPath)/$(ConfigurationName)/GPUCfg/gpu.data</Command>
        <Command Enabled="no"># Textures</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Textures/dds/Stormtrooper_D.tex $(ProjectPath)/$(ConfigurationName)/Textures/</Command>
        <Command Enabled="no"># Animations</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Animation/ $(ProjectPath)/$(ConfigurationName)/Meshes/</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Animation/ $(ProjectPath)/$(ConfigurationName)/Animation/</Command>
        <Command Enabled="no"># Fonts</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Fonts/ $(ProjectPath)/$(ConfigurationName)/Fonts/</Command>
        <Command Enabled="no"># Scripts</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Scripts/ $(ProjectPath)/$(ConfigurationName)/Scripts/</Command>
        <Command Enabled="no"># Misc</Command>
        <Command Enabled="yes">rsync -u -r --include '*.so' --include '*.json' --exclude '*' $(WorkspacePath)/../../../Common_3/Graphics/ThirdParty/OpenSource/VulkanSDK/bin/Linux/ $(ProjectPath)/$(ConfigurationName)/</Command>
      </PostBuild>
      <CustomBuild Enabled="no">
        <RebuildCommand/>
        <CleanCommand/>
        <BuildCommand/>
        <PreprocessFileCommand/>
        <SingleFileCommand/>
        <MakefileGenerationCommand/>
        <ThirdPartyToolName>None</ThirdPartyToolName>
        <WorkingDirectory/>
      </CustomBuild>
      <AdditionalRules>
        <CustomPostBuild/>
        <CustomPreBuild>shaders
SRC = $(WorkspacePath)/../src/$(ProjectName)/Shaders/FSL/&#xD;
DST = $(ProjectPath)/$(ConfigurationName)/&#xD;
fsl = python3 ../../../../Common_3/Tools/ForgeShadingLanguage/fsl.py -l VULKAN -d $(DST)/Shaders --verbose -b $(DST)/CompiledShaders -i $(DST) --cache-args --incremental --compile&#xD;
&#xD;
shaders:&#xD;
	$(foreach file, $(wildcard $(SRC)/*.fsl), $(fsl) $(file);)
</CustomPreBuild>
      </AdditionalRules>
      <Completion EnableCpp11="no" EnableCpp14="no">
        <ClangCmpFlagsC/>
        <ClangCmpFlags/>
        <ClangPP/>
        <SearchPaths/>
      </Completion>
    </Configuration>
    <Configuration Name="Release" CompilerType="GCC" DebuggerType="GNU gdb debugger" Type="Executable" BuildCmpWithGlobalSettings="append" BuildLnkWithGlobalSettings="prepend" BuildResWithGlobalSettings="append">
      <Compiler Options="-g;-O2;-Wall;-Werror;-mavx2;-std=c++14;-fno-rtti;-fno-exceptions;" C_Options="-g;-O2;-Wall;-Werror;-mavx2;" Assembler="" Required="yes" PreCompiledHeader="" PCHInCommandLine="no" PCHFlags="" PCHFlagsPolicy="0">
        <IncludePath Value="."/>
        <IncludePath Value="$(ProjectPath)/../.."/>
        <IncludePath Value="$(ProjectPath)/../../../.."/>
      </Compiler>
      <Linker Options="-ludev;-ldl;-pthread;-lXrandr;$(shell pkg-config --libs gtk+-3.0)" Required="yes">
        <LibraryPath Value="$(ProjectPath)/../gainput/Release/"/>
        <LibraryPath Value="$(ProjectPath)/../ozz_base/Release/"/>
        <LibraryPath Value="$(ProjectPath)/../ozz_animation/Release/"/>
        <LibraryPath Value="$(ProjectPath)/../OSBase/Release/"/>
        <LibraryPath Value="$(ProjectPath)/../Renderer/Release/"/>
        <LibraryPath Value="$(ProjectPath)/../SpirVTools/Release/"/>
        <Library Value="libOS.a"/>
        <Library Value="libozz_animation.a"/>
        <Library Value="libozz_base.a"/>
        <Library Value="libRenderer.a"/>
        <Library Value="libOS.a"/>
        <Library Value="libX11.a"/>
        <Library Value="libSpirVTools.a"/>
        <Library Value="libvulkan.so"/>
        <Library Value="libgainput.a"/>
      </Linker>
      <ResourceCompiler Options="" Required="no"/>
      <General OutputFile="$(IntermediateDirectory)/$(ProjectName)" IntermediateDirectory="./Release" Command="./$(ProjectName)" CommandArguments="" UseSeparateDebugArgs="no" DebugArguments="" WorkingDirectory="$(IntermediateDirectory)" PauseExecWhenProcTerminates="yes" IsGUIProgram="no" IsEnabled="yes"/>
      <BuildSystem Name="Default"/>
      <Environment EnvVarSetName="&lt;Use Defaults&gt;" DbgSetName="&lt;Use Defaults&gt;">
        <![CDATA[]]>
      </Environment>
      <Debugger IsRemote="no" RemoteHostName="" RemoteHostPort="" DebuggerPath="" IsExtended="no">
        <DebuggerSearchPaths/>
        <PostConnectCommands/>
        <StartupCommands/>
      </Debugger>
      <PreBuild/>
      <PostBuild>
        <Command Enabled="no"># Src</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/OSBase/$(ConfigurationName)/Shaders/ $(ProjectPath)/$(ConfigurationName)/Shaders/</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/OSBase/$(ConfigurationName)/CompiledShaders/ $(ProjectPath)/$(ConfigurationName)/CompiledShaders/</Command>
        <Command Enabled="no"># GpuConfig</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../src/$(ProjectName)/GPUCfg/ $(ProjectPath)/$(ConfigurationName)/GPUCfg/</Command>
        <Command Enabled="yes">rsync -u $(WorkspacePath)/../../../Common_3/OS/Linux/steamdeck_gpu.data $(ProjectPath)/$(ConfigurationName)/GPUCfg/gpu.data</Command>
        <Command Enabled="no"># Textures</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Textures/dds/Stormtrooper_D.tex $(ProjectPath)/$(ConfigurationName)/Textures/</Command>
        <Command Enabled="no"># Animations</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Animation/ $(ProjectPath)/$(ConfigurationName)/Meshes/</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Animation/ $(ProjectPath)/$(ConfigurationName)/Animation/</Command>
        <Command Enabled="no"># Fonts</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Fonts/ $(ProjectPath)/$(ConfigurationName)/Fonts/</Command>
        <Command Enabled="no"># Scripts</Command>
        <Command Enabled="yes">rsync -u -r $(WorkspacePath)/../../../Art/UnitTestResources/Scripts/ $(ProjectPath)/$(ConfigurationName)/Scripts/</Command>
        <Command Enabled="no"># Misc</Command>
        <Command Enabled="yes">rsync -u -r --include '*.so' --include '*.json' --exclude '*' $(WorkspacePath)/../../../Common_3/Graphics/ThirdParty/OpenSource/VulkanSDK/bin/Linux/ $(ProjectPath)/$(ConfigurationName)/</Command>
      </PostBuild>
      <CustomBuild Enabled="no">
        <RebuildCommand/>
        <CleanCommand/>
        <BuildCommand/>
        <PreprocessFileCommand/>
        <SingleFileCommand/>
        <MakefileGenerationCommand/>
        <ThirdPartyToolName>None</ThirdPartyToolName>
        <WorkingDirectory/>
      </CustomBuild>
      <AdditionalRules>
        <CustomPostBuild/>
        <CustomPreBuild>shaders
SRC = $(WorkspacePath)/../src/$(ProjectName)/Shaders/FSL/&#xD;
DST = $(ProjectPath)/$(ConfigurationName)/&#xD;
fsl = python3 ../../../../Common_3/Tools/ForgeShadingLanguage/fsl.py -l VULKAN -d $(DST)/Shaders --verbose -b $(DST)/CompiledShaders -i $(DST) --cache-args --incremental --compile&#xD;
&#xD;
shaders:&#xD;
	$(foreach file, $(wildcard $(SRC)/*.fsl), $(fsl) $(file);)</CustomPreBuild>
      </AdditionalRules>
      <Completion EnableCpp11="no" EnableCpp14="no">
        <ClangCmpFlagsC/>
        <ClangCmpFlags/>
        <ClangPP/>
        <SearchPaths/>
      </Completion>
    </Configuration>
  </Settings>
</CodeLite_Project>
