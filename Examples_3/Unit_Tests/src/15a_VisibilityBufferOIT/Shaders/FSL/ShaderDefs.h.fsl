/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/


#ifndef _SHADER_DEFS_H
#define _SHADER_DEFS_H

#define LIGHT_COUNT 128
#define LIGHT_SIZE 30.0f

#define LIGHT_CLUSTER_WIDTH 8
#define LIGHT_CLUSTER_HEIGHT 8

#define LIGHT_CLUSTER_COUNT_POS(ix, iy) ( ((iy)*LIGHT_CLUSTER_WIDTH)+(ix) )
#define LIGHT_CLUSTER_DATA_POS(il, ix, iy) ( LIGHT_CLUSTER_COUNT_POS(ix, iy)*LIGHT_COUNT + (il) )

#define MAX_TEXTURE_UNITS 256

#define MESH_CONSTANT_FLAG_TWO_SIDED (1u << 0)

#define MAX_BLUR_KERNEL_SIZE 8

#define GODRAY_SCALE 2
#define GODRAY_ATTENUATION 0.3f

STRUCT(MeshData)
{
  DATA(float4x4, modelMtx, None);
	DATA(float4x4, invModelMtx, None);
	DATA(float4x4, prevModelMtx, None);
	DATA(uint, indexOffset, None);
	DATA(uint, vertexOffset, None);
  DATA(uint, indirectVertexOffset, None);
	DATA(uint, materialID_flags, None); // combination of MESH_CONSTANT_FLAG_* and materialID
	DATA(uint, preSkinnedVertexOffset, None);
  DATA(uint, pad0, None);
  DATA(uint, pad1, None);
  DATA(uint, pad2, None);
};

#include "../../../../../../Common_3/Renderer/VisibilityBuffer/Shaders/FSL/VisibilityBufferShaderDefs.h.fsl"

#define MATERIAL_ID_LOW_BIT 0   // 16 bits for materialID
#define FLAG_LOW_BIT  16        // 16 bits for flags

#define MATERIAL_ID_MASK  0x0000FFFF // 0000 0000 0000 0000 1111 1111 1111 1111
#define FLAG_MASK  0x0000FFFF // 0000 0000 0000 0000 1111 1111 1111 1111

STRUCT(PerFrameConstantsData)
{
	DATA(float4, camPos, None);
	DATA(float, nearPlane, None);
	DATA(float, farPlane, None);
	DATA(float, mGodRayScatterFactor, None); // Godray scatter factor
	DATA(float, drawVRSDebug, None);  // debug draw VRS
    // TonemapInfo
    DATA(float, mLinearScale, None);
    DATA(uint, mOutputMode, None);
    DATA(uint, _pad0, None);
    DATA(uint, _pad1, None);
	//========================================
	DATA(float4, lightDir, None);
	//========================================
	DATA(float4, lightColor, None);
	//========================================
    DATA(uint, numViewports, None);
	DATA(uint, outputMode, None);
	DATA(float2, twoOverRes, None);
	//========================================
	DATA(float, esmControl, None);
	DATA(uint, screenWidth, None); 
	DATA(uint, screenHeight, None);
	DATA(uint, _pad2, None);
	DATA(float4, transAlphaPerFlag, None); // TheForge UnitTest specific, stores the alpha of each of the flags in the SanMiguel scene
	DATA(Transform, transform[NUM_CULLING_VIEWPORTS], None);
	DATA(CullingViewPort, cullingViewports[NUM_CULLING_VIEWPORTS], None);
};

STRUCT(LightData)
{
	DATA(float4, position, None);
	DATA(float4, color, None);
};

STRUCT(BlurRootConstantData)
{
    DATA(uint, mBlurPassType, None);
    DATA(uint, mFilterRadius, None);
};

STRUCT(BlurWeightsData)
{
	DATA(float4, mBlurWeights[MAX_BLUR_KERNEL_SIZE / 4], None);
};




#endif
