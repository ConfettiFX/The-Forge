/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "VRSResources.h.fsl"
#include "ShaderDefs.h.fsl"
#include "VisibilityBufferResources.h.fsl"
#include "ShaderDefs.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/VisibilityBuffer/Shaders/FSL/VisibilityBufferShadingUtilities.h.fsl"



#define SAMPLE_COUNT 4


#include "Global.srt.h"

STRUCT(PsIn)
{
    DATA(float4, position,    SV_POSITION);
		DATA(float2, screenPos,   TEXCOORD0);
};

STRUCT(PSOut)
{
	DATA(uint, rate, SV_Target0);
#if !defined(METAL)
	DATA(out_coverage, coverage, SV_Coverage);
#endif
};

float samplePrevFrameLuma(int2 nonMsaaPixelPos)
{
	float3 luminanceConv = float3(0.257, 0.504, 0.098);

	float3 col = LoadTex2D(gPrevFrameTex, NO_SAMPLER, nonMsaaPixelPos, 0).rgb;
	return dot(luminanceConv, col);
}

uint calcRate1Sample(float qualityThreshold, float black,
	float colorM,
	float colorN, 
	float colorS, 
	float colorW, 
	float colorE, 
	float colorNW,
	float colorSW,
	float colorNE,
	float colorSE
)
{
	float tileLuma =    min( colorM,  min( colorNW, 
						min( colorSW, min( colorSE,
						min( colorNE, min( colorW,
						min( colorE,  min( colorN, colorS) ) ) ) ) ) ) );
	float visiblityThreshold = qualityThreshold * max( tileLuma, black );

	// Horizontal
	float dh = max( abs( colorW - colorM ), abs( colorE - colorM ) );
	float ddh= max( abs( colorNW - colorNE ), abs( colorSW - colorSE ) );
	dh = max( dh, ddh );

	// Vertical
	float dv = max( abs( colorN - colorM ), abs( colorS - colorM ) );
	float ddv= max( abs( colorNW - colorSW ), abs( colorNE - colorSE ) );
	dv = max( dv, ddv );

	// VH
	uint rate  = SHADING_RATE_2X2;
	rate |= dh < visiblityThreshold ? 0 : SHADING_RATE_2X1;
	rate |= dv < visiblityThreshold ? 0 : SHADING_RATE_1X2;

	return rate;
}

uint calcRate4Samples(int2 pixelPos, float qualityThreshold, float black)
{
	float colors[4][4];
	uint windowWidth = uint(gPerFrameConstants.cullingViewports[VIEW_CAMERA].windowSize.x);
	uint windowHeight = uint(gPerFrameConstants.cullingViewports[VIEW_CAMERA].windowSize.y);

	for(int yOffset=-1; yOffset<=2; yOffset++)
	{
		for(int xOffset=-1; xOffset<=2; xOffset++)
		{
			int2 samplePos = (pixelPos*2) + int2(xOffset, yOffset);
			samplePos = clamp(samplePos, int2(1, 1), int2(windowWidth-2, windowHeight-2));

			colors[xOffset+1][yOffset+1] = samplePrevFrameLuma(samplePos);
		}
	}
	
	uint rate = 0;

	for(int y=1; y<=2; y++)
	{
		for(int x=1; x<=2; x++)
		{
			rate |= calcRate1Sample(qualityThreshold, black,
							colors[x][y],   //colorM, 
							colors[x][y-1], //colorN, 
							colors[x][y+1], //colorS, 
							colors[x-1][y], //colorW, 
							colors[x+1][y], //colorE, 
							colors[x-1][y-1],//colorNW,
							colors[x-1][y+1],//colorSW,
							colors[x+1][y-1],//colorNE,
							colors[x+1][y+1] //colorSE
							);

			if(rate == SHADING_RATE_1X1)
				return rate;
		}

		for(int xOffset=-1; xOffset<=2; xOffset++)
		{
			int yOffset=2;
			int2 samplePos = (pixelPos*2) + int2(xOffset, yOffset);
			samplePos = clamp(samplePos, int2(1, 1), int2(windowWidth-2, windowHeight-2));
			colors[xOffset+1][yOffset+1] = samplePrevFrameLuma(samplePos);
		}
	}
	return rate;
}

float2 calcPrevPixelPos(float2 screenPos, uint primitiveID, uint geomSet)
{

	uint triIdx0 = INDEXBUFFER_OFFSET(geomSet) + primitiveID * 3 + 0;
	uint triIdx1 = INDEXBUFFER_OFFSET(geomSet) + primitiveID * 3 + 1;
	uint triIdx2 = INDEXBUFFER_OFFSET(geomSet) + primitiveID * 3 + 2;

	float4x4 mvp = gPerFrameConstants.transform[VIEW_CAMERA].mvp.mat;
	float4x4 invMvp = gPerFrameConstants.transform[VIEW_CAMERA].invMVP.mat;
	float4x4 prevMvp = gPerFrameConstants.transform[VIEW_CAMERA].prevMVP.mat;

	uint indirectIndex0 = LoadByte(gFilteredIndexBuffer, (triIdx0 << 2));
	uint indirectIndex1 = LoadByte(gFilteredIndexBuffer, (triIdx1 << 2));
	uint indirectIndex2 = LoadByte(gFilteredIndexBuffer, (triIdx2 << 2));

	uint meshIndex = gIndirectDataBuffer[indirectIndex0];
	MeshData meshConstant = gMeshDataBuffer[meshIndex];

	uint index0 = indirectIndex0 - meshConstant.indirectVertexOffset;
	uint index1 = indirectIndex1 - meshConstant.indirectVertexOffset;
	uint index2 = indirectIndex2 - meshConstant.indirectVertexOffset;

	uint animatedAttrVertexOffset = 0;
	uint preSkinnedVtxOffset = meshConstant.preSkinnedVertexOffset;
  if (preSkinnedVtxOffset != PRE_SKINNED_VERTEX_OFFSET_NONE)
    {
        // Note: drawVertexOffset (used to initialize animatedAttrVertexOffset) should be the same as preSkinnedVtxOffset, 
        //       therefore we don't need thi assignment.
        animatedAttrVertexOffset = preSkinnedVtxOffset - meshConstant.vertexOffset;
	}
	
	mvp = mul(mvp, meshConstant.modelMtx);
	invMvp = mul(meshConstant.invModelMtx, invMvp);
	prevMvp = mul(prevMvp, meshConstant.prevModelMtx);

	uint animIndex0 = index0 - animatedAttrVertexOffset;
	uint animIndex1 = index1 - animatedAttrVertexOffset;
	uint animIndex2 = index2 - animatedAttrVertexOffset;

	// Load vertex data of the 3 vertices
	float3 v0pos = asfloat(LoadByte4(gVertexPositionBuffer, index0 * 12)).xyz;
	float3 v1pos = asfloat(LoadByte4(gVertexPositionBuffer, index1 * 12)).xyz;
	float3 v2pos = asfloat(LoadByte4(gVertexPositionBuffer, index2 * 12)).xyz;

	// Transform positions to clip space
	float4 pos0 = mul(mvp, float4(v0pos, 1.0f));
	float4 pos1 = mul(mvp, float4(v1pos, 1.0f));
	float4 pos2 = mul(mvp, float4(v2pos, 1.0f));

	float2 two_over_windowsize = gPerFrameConstants.twoOverRes;

	// Compute partial derivatives. This is necessary to interpolate triangle attributes per pixel.
	BarycentricDeriv derivativesOut = CalcFullBary(pos0,pos1,pos2,screenPos, two_over_windowsize);

	// Interpolate the 1/w (one_over_w) for all three vertices of the triangle
	// using the barycentric coordinates and the delta vector
	float w = dot(float3(pos0.w, pos1.w, pos2.w),derivativesOut.m_lambda);

	// Reconstruct the Z value at this screen point performing only the necessary matrix * vector multiplication
	// operations that involve computing Z
	float z = w * getElem(gPerFrameConstants.transform[VIEW_CAMERA].projection.mat, 2, 2) + getElem(gPerFrameConstants.transform[VIEW_CAMERA].projection.mat, 3, 2);

	float4 worldPos = mul(invMvp, float4(screenPos * w, z, w));
	worldPos.xyz /= worldPos.w;

	float4 screenPosRes = mul(prevMvp, float4(worldPos.xyz, 1.0f));
	screenPosRes.xy /= screenPosRes.w;

	return screenPosRes.xy;
}

SET_OUTPUT_FORMAT(0, FMT_32_R)
ROOT_SIGNATURE(DefaultRootSignature)
PSOut PS_MAIN( PsIn In, SV_SampleIndex(uint) i)
{
    INIT_MAIN;
    PSOut Out;

	int2 pixelPos = int2(In.position.xy);
	float4 visRaw = LoadTex2DMS(gVBTex, gSamplerTrilinearClamp, pixelPos, i);
	uint geomSetPrimID = packUnorm4x8(visRaw);

	float2 prevPos = In.position.xy;
	if (geomSetPrimID != ~0u)
	{
		// Extract packed data
		uint primitiveID = (geomSetPrimID >> PRIM_ID_LOW_BIT) & PRIM_ID_MASK;
		uint geomSet = (geomSetPrimID >> GEOM_LOW_BIT) & GEOM_MASK;
		
		prevPos = calcPrevPixelPos(In.screenPos.xy, primitiveID, geomSet);
		prevPos.y = 0.5f * (1.f - prevPos.y);
		prevPos.x = 0.5f * (prevPos.x + 1.f);
		prevPos *= (float2(gPerFrameConstants.screenWidth, gPerFrameConstants.screenHeight) * 0.5f);
	}
	int2 prevPixelPos = int2(prevPos);

	uint history = SHADING_RATE_2X2;

	{
		uint rate = calcRate4Samples(prevPixelPos, qualityThreshold, black);
		int2 historyPixelPos = prevPixelPos;
		history = LoadTex2DMS(gPrevHistoryTex, NO_SAMPLER, historyPixelPos, 0).r;
		history = ((history << 2) | rate) & 0xff;
	}

	Out.rate = history;
#if !defined(METAL)
	Out.coverage = coverage[GetConservativeRate(Out.rate)];
#endif
    RETURN(Out);

}
