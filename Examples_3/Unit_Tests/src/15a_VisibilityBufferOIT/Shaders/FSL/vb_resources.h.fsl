/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef vb_resources_h
#define vb_resources_h
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

STRUCT(GeometryCountOIT)
{
	DATA(uint, count, None);
};

STRUCT(TransparentNodeOIT)
{
	DATA(uint, triangleData, None); 
	DATA(uint, next, None); 
};

RES(Buffer(MeshData), MeshDataBuffer, UPDATE_FREQ_PER_FRAME, t2, binding = 4);
RES(Buffer(uint), indirectDataBuffer, UPDATE_FREQ_PER_FRAME, t8, binding = 15);

RES(ByteBuffer, vertexTexCoordBuffer, UPDATE_FREQ_NONE, t6, binding = 8);
RES(ByteBuffer, vertexPositionBuffer, UPDATE_FREQ_NONE, t7, binding = 9);

RES(RWBuffer(uint),    headIndexBufferUAV, UPDATE_FREQ_NONE, u2, binding = 10); 
RES(RWBuffer(TransparentNodeOIT), vbDepthLinkedListUAV, UPDATE_FREQ_NONE, u3, binding = 11); 
RES(RWBuffer(GeometryCountOIT), geometryCountBuffer, UPDATE_FREQ_NONE, u4, binding = 12);

RES(SamplerState, textureFilter, UPDATE_FREQ_NONE, s0, binding = 13);
RES(Tex2D(float4), diffuseMaps[MAX_TEXTURE_UNITS], UPDATE_FREQ_NONE, t9, binding = 14);

STRUCT(PsInOpaque)
{
	DATA(float4, position, SV_Position);
};

STRUCT(PsInAlphaTested)
{
	DATA(float4, position, SV_Position);
	DATA(float2, texCoord, TEXCOORD0);
#if !defined(NO_MATERIALID_ON_PIXEL_SHADER_INPUT)
    DATA(FLAT(uint), materialID, TEXCOORD1);
#endif
};

float4 LoadVertex(uint index)
{
    return float4(asfloat(LoadByte4(Get(vertexPositionBuffer), index * 12)).xyz, 1);
}

float2 LoadTexCoord(uint index)
{
	return unpack2Floats(LoadByte(Get(vertexTexCoordBuffer), index << 2));
}

float4x4 GetModelViewProj(uint geomSet, uint view, inout(uint) vertID)
{
    uint indirectData = Get(indirectDataBuffer)[vertID];
    MeshData meshConstant = Get(MeshDataBuffer)[indirectData];
    vertID = vertID - meshConstant.indirectVertexOffset;

    return mul(Get(transform)[view].mvp, meshConstant.modelMtx);
}

float4x4 GetModelViewProjAndMaterialID(uint geomSet, uint view, inout(uint) vertID, out(uint) materialID)
{
    uint indirectData =  Get(indirectDataBuffer)[vertID];
    MeshData meshConstant = Get(MeshDataBuffer)[indirectData];
    vertID = vertID - meshConstant.indirectVertexOffset;
	materialID = ((meshConstant.materialID_flags >> MATERIAL_ID_LOW_BIT) & MATERIAL_ID_MASK);

    return mul(Get(transform)[view].mvp, meshConstant.modelMtx);
}


#endif /* vb_resources_h */
