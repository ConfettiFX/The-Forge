/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef vb_resources_h
#define vb_resources_h

STRUCT(GeometryCountOIT)
{
	DATA(uint, count, None);
};

STRUCT(TransparentNodeOIT)
{
	DATA(uint, triangleData, None); 
	DATA(uint, next, None); 
};

RES(SamplerState, textureFilter, UPDATE_FREQ_NONE, s0, binding = 2);
RES(Tex2D(float4), diffuseMaps[MAX_TEXTURE_UNITS], UPDATE_FREQ_NONE, t3, binding = 3);
RES(Buffer(uint), indirectInstanceIndexBuffer, UPDATE_FREQ_PER_FRAME, t0, binding = 4);
RES(Buffer(InstanceData), instanceData, UPDATE_FREQ_PER_FRAME, t1, binding = 5);
RES(Buffer(MeshConstants), meshConstantsBuffer, UPDATE_FREQ_NONE, t2, binding = 6);

RES(RWBuffer(atomic_uint),    headIndexBufferUAV, UPDATE_FREQ_NONE, u2, binding = 7); 
RES(RWBuffer(TransparentNodeOIT), vbDepthLinkedListUAV, UPDATE_FREQ_NONE, u3, binding = 8); 
RES(RWBuffer(GeometryCountOIT), geometryCountBuffer, UPDATE_FREQ_NONE, u50, binding = 11);

#if defined(INDIRECT_ROOT_CONSTANT)
	PUSH_CONSTANT(indirectRootConstant, b1)
	{
		DATA(uint, indirectDrawId, None);
	};
	#define getDrawID() indirectDrawId
#else
#if defined(STAGE_VERT)
	#define getDrawID() instanceId
#elif defined(STAGE_FRAG)
	#define getDrawID() In.drawId
#endif
#endif

STRUCT(VsInAlphaTested)
{
    // TODO (Animations): This is problematic for animated meshes, position is pre-transformed but texture coord isn't (we take the one from the mesh).
    //                   Currently we'll get correct position here (index we store points to the index of the pre-transformed mesh), but texture coord will read garbage
    DATA(float3, position, POSITION);
    DATA(uint, texCoord, TEXCOORD);
};

STRUCT(PsInAlphaTested)
{
    DATA(float4, position, SV_Position);
    DATA(float2, texCoord, TEXCOORD0);
#if !defined(NO_MATERIALID_ON_PIXEL_SHADER_INPUT)
	DATA(FLAT(uint), materialID, TEXCOORD1);
#endif
#if !defined(INDIRECT_ROOT_CONSTANT)
    DATA(FLAT(uint), drawId, TEXCOORD2);
#endif
};

float4x4 GetModelViewProj(uint geomSet, uint view, uint drawId)
{
    uint instanceBaseSlot = BaseInstanceBuffer(geomSet, view);
    uint instanceIndexPacked = Get(indirectInstanceIndexBuffer)[instanceBaseSlot + drawId];
    uint instanceIndex = (instanceIndexPacked & INSTANCE_INDEX_MASK) >> INSTANCE_INDEX_LOW_BIT;

    float4x4 mvp = Get(transform)[view].mvp;
    if(instanceIndex != INSTANCE_INDEX_NONE)
        mvp = mul(mvp, Get(instanceData)[instanceIndex].modelMtx);

	return mvp;
}

float4x4 GetModelViewProjAndMaterialID(uint geomSet, uint view, uint drawId, out(uint) materialID)
{
    uint instanceBaseSlot = BaseInstanceBuffer(geomSet, view);
    uint instanceIndexPacked = Get(indirectInstanceIndexBuffer)[instanceBaseSlot + drawId];
    uint instanceIndex = (instanceIndexPacked & INSTANCE_INDEX_MASK) >> INSTANCE_INDEX_LOW_BIT;
    uint meshIndex = (instanceIndexPacked & INSTANCE_MESH_MASK) >> INSTANCE_MESH_LOW_BIT;

    float4x4 mvp = Get(transform)[view].mvp;
    if(instanceIndex != INSTANCE_INDEX_NONE)
        mvp = mul(mvp, Get(instanceData)[instanceIndex].modelMtx);

	materialID = Get(meshConstantsBuffer)[meshIndex].materialID;
	return mvp;
}

#endif /* vb_resources_h */
