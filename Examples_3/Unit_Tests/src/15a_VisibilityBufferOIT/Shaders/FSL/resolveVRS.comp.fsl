/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "vrs_resources.h.fsl"

PUSH_CONSTANT(cbRootConstant, b0)
{
    DATA(float, drawVRSDebug, None);
};

RES(Tex2DMS(uint, SAMPLE_COUNT), historyTex, UPDATE_FREQ_NONE, t0, binding = 0);
RES(Tex2DMS(float4, SAMPLE_COUNT), msaaSource, UPDATE_FREQ_NONE, t1, binding = 1);
RES(WTex2D(float4), resolvedTex, UPDATE_FREQ_NONE, u0, binding = 2);
RES(WTex2D(float4), debugVRSTex, UPDATE_FREQ_NONE, u1, binding = 3);

float3 sampleOpaque(uint2 msaaSampleLocation)
{
	uint2 msaaLocation = msaaSampleLocation/2;
	uint sampleIndex = (msaaSampleLocation.x&1) + ((msaaSampleLocation.y&1)*2);
	float3 opaque = LoadTex2DMS(Get(msaaSource), NO_SAMPLER, msaaLocation, sampleIndex).xyz;
	return opaque;
}

NUM_THREADS(16, 16, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) DTid )
{
    INIT_MAIN;

	uint2 msaaLocation = DTid.xy;

	uint rate = GetConservativeRate(LoadTex2DMS(Get(historyTex), NO_SAMPLER, msaaLocation, 0).r);

	// top left sample is always shaded
	bool has2HSamples = rate == SHADING_RATE_2X1;
	bool has2VSamples = rate == SHADING_RATE_1X2;
	bool has4Samples  = rate == SHADING_RATE_1X1;

	uint2 msaaSampleLocations[SAMPLE_COUNT];
	for(int sampleIndex=0; sampleIndex < SAMPLE_COUNT; sampleIndex++)
		msaaSampleLocations[sampleIndex] = (msaaLocation * 2) + uint2(sampleOffsets[sampleIndex]);

	int2 dim = GetDimensions(Get(resolvedTex), NO_SAMPLER);
	bool atRightEdge  = msaaLocation.x >= (dim.x/2)-1;
	bool atBottomEdge = msaaLocation.y >= (dim.y/2)-1;

	if(has4Samples)
	{
		for(int sampleIndex=0; sampleIndex < SAMPLE_COUNT; sampleIndex++)
		{
			uint2 msaaSampleLocation = msaaSampleLocations[sampleIndex];
			Write2D(Get(resolvedTex), msaaSampleLocation, float4(sampleOpaque(msaaSampleLocation), 1));
		}
	}
	else if(has2VSamples)
	{
		uint rateRight = GetConservativeRate(LoadTex2DMS(Get(historyTex), NO_SAMPLER, msaaLocation + uint2(1,0), 0).r);
		bool hasSample2Right = (rateRight&1)!=0;

		float3 sample0 = sampleOpaque(msaaSampleLocations[0]);
		float3 sample2 = sampleOpaque(msaaSampleLocations[2]);
		
		Write2D(Get(resolvedTex), msaaSampleLocations[0], float4(sample0, 1));
		Write2D(Get(resolvedTex), msaaSampleLocations[1], float4((sample0 + (atRightEdge ? sample0 : sampleOpaque(msaaSampleLocations[0] + uint2(2,0))))*0.5, 1));
		Write2D(Get(resolvedTex), msaaSampleLocations[2], float4(sample2, 1));

		uint2 sample2RightLocation = (hasSample2Right ? msaaSampleLocations[2] : msaaSampleLocations[0]) + uint2(2,0);
		Write2D(Get(resolvedTex), msaaSampleLocations[3], float4((sample2 + (atRightEdge ? sample2 : sampleOpaque(sample2RightLocation)))*0.5, 1));
	}
	else if(has2HSamples)
	{
		uint rateDown = GetConservativeRate(LoadTex2DMS(Get(historyTex), NO_SAMPLER, msaaLocation + uint2(0,1), 0).r);
		bool hasSample1Down = (rateDown&2)!=0;

		float3 sample0 = sampleOpaque(msaaSampleLocations[0]);
		float3 sample1 = sampleOpaque(msaaSampleLocations[1]);
		
		Write2D(Get(resolvedTex), msaaSampleLocations[0], float4(sample0, 1));
		Write2D(Get(resolvedTex), msaaSampleLocations[1], float4(sample1, 1));
		Write2D(Get(resolvedTex), msaaSampleLocations[2], float4((sample0 + (atBottomEdge ? sample0 : sampleOpaque(msaaSampleLocations[0] + uint2(0,2))))*0.5, 1));
		
		uint2 sample1DownLocation = (hasSample1Down ? msaaSampleLocations[1] : msaaSampleLocations[0]) + uint2(0,2);
		Write2D(Get(resolvedTex), msaaSampleLocations[3], float4((sample1 + (atBottomEdge ? sample1 : sampleOpaque(sample1DownLocation)))*0.5, 1));
	}
	else
	{
		float3 sample0  = sampleOpaque(msaaSampleLocations[0]);
		float3 sampleR  = sampleOpaque(msaaSampleLocations[0] + uint2(atRightEdge ? 0 : 2, 0));
		float3 sampleB  = sampleOpaque(msaaSampleLocations[0] + uint2(0,                   atBottomEdge ? 0 : 2));
		float3 sampleBR = sampleOpaque(msaaSampleLocations[0] + uint2(atRightEdge ? 0 : 2, atBottomEdge ? 0 : 2));
		
		Write2D(Get(resolvedTex), msaaSampleLocations[0], float4(sample0, 1));
		Write2D(Get(resolvedTex), msaaSampleLocations[1], float4((sample0 + sampleR)*0.5, 1));
		Write2D(Get(resolvedTex), msaaSampleLocations[2], float4((sample0 + sampleB)*0.5, 1));
		Write2D(Get(resolvedTex), msaaSampleLocations[3], float4((sample0 + sampleR + sampleB + sampleBR) * 0.25, 1));
	}

	if (Get(drawVRSDebug) == 1.0)
    {
		float4 debugColor = float4(1.0, 1.0, 1.0, 1.0);
		if (has4Samples)
		{
			debugColor = float4(0.0, 1.0, 0.0, 1.0);
		}
		else if(has2VSamples)
		{
			debugColor = float4(1.0, 0.0, 0.0, 1.0);
		}
		else if(has2HSamples)
		{
			debugColor = float4(0.0, 0.0, 1.0, 1.0);
		}
			
		for(int sampleIndex=0; sampleIndex < SAMPLE_COUNT; sampleIndex++)
		{
			uint2 msaaSampleLocation = msaaSampleLocations[sampleIndex];
			Write2D(Get(debugVRSTex), msaaSampleLocation, debugColor);
		}
	}

    RETURN();
}
