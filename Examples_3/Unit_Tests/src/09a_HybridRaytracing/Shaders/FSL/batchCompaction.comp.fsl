/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "Shader_Defs.h.fsl"

RES(RWBuffer(uint), indirectMaterialBuffer, UPDATE_FREQ_NONE, u40, binding = 40);
#include "../../../../../../Common_3/Renderer/VisibilityBuffer/Shaders/FSL/batch_compaction.h.fsl"

NUM_THREADS(VB_COMPUTE_THEADS, 1, 1)
void CS_MAIN( SV_DispatchThreadID(uint3) threadID) 
{
	INIT_MAIN;
    if (threadID.x >= MAX_DRAWS_INDIRECT - 1)
	{
		RETURN();
	}

	uint numIndices[NUM_CULLING_VIEWPORTS];
	uint sum = 0;

	UNROLL_N(NUM_CULLING_VIEWPORTS)
	for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
	{
		numIndices[i] = Get(uncompactedDrawArgs)[GET_UNCOMPACT_DRAW_INDEX(i, threadID.x)].numIndices;
		sum += numIndices[i];
	}

	if (sum == 0)
	{
		RETURN();
	}
	uint slot = 0;


	UNROLL_N(NUM_CULLING_VIEWPORTS)
	for (uint j = 0; j < NUM_CULLING_VIEWPORTS; ++j)
	{
		if (numIndices[j] > 0)
		{
			uint instanceSlot = BatchCompaction(threadID.x, j, numIndices[j], slot);
			Get(indirectMaterialBuffer)[instanceSlot] = Get(uncompactedDrawArgs)[GET_UNCOMPACT_DRAW_INDEX(j, threadID.x)].instanceDataIndex;
		}
	}
	RETURN();
}
