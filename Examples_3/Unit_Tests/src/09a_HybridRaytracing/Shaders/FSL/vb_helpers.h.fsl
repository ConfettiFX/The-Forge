/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef vb_helpers_h
#define vb_helpers_h

////////////////////////////
// VB HELPER FUNCTIONS
////////////////////////////
uint3 GetVertexIndicesFromVB(uint2 pos, out(uint) primitiveID, out(uint) geomSet)
{
	float4 visRaw = LoadTex2D(Get(vbPassTexture), Get(clampMiplessLinearSampler), pos, 0);

	uint geomSetPrimID = packUnorm4x8(visRaw);

	// Early exit if this pixel doesn't contain triangle data
	if (geomSetPrimID == ~0u)
	{
		return uint3(~0u, ~0u, ~0u);
	}

	// Extract packed data
	primitiveID = (geomSetPrimID >> PRIM_ID_LOW_BIT) & PRIM_ID_MASK;
	geomSet = (geomSetPrimID >> GEOM_LOW_BIT) & GEOM_MASK;

	uint triIdx0 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 0);
	uint triIdx1 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 1);
	uint triIdx2 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 2);

	uint index0 = LoadByte(Get(filteredIndexBuffer), triIdx0 << 2);
	uint index1 = LoadByte(Get(filteredIndexBuffer), triIdx1 << 2);
	uint index2 = LoadByte(Get(filteredIndexBuffer), triIdx2 << 2);

	return uint3(index0, index1, index2);
}

float4 GetVertexClipPosFromIndex(uint index)
{
	float3 vpos = asfloat(LoadByte4(Get(vertexPos), index * 12)).xyz;

	// TODO: add world matrix, remove the hardcoded scale transform
	float4 pos = mul(Get(ViewProject), float4(vpos * 10.f, 1.0f));

	return pos;
}

float2 GetNDCScreenPos(uint2 pos)
{
	return float2(pos.xy) * float2(2.f, -2.f) * Get(rtSize).zw - float2(1.f, -1.f);
}

void CalcDerivsAndInterpolate(float4 pos0, float4 pos1, float4 pos2, uint3 indices, float2 screenPos, 
	out(float) interpolatedW, out(float) zVal, out(BarycentricDeriv) derivativesOut, out(GradientInterpolationResults) results)
{
	float2 two_over_windowsize = Get(mTwoOverRes);

	//Compute partial derivatives. This is necessary to interpolate triangle attributes per pixel.
	derivativesOut = CalcFullBary(pos0,pos1,pos2,screenPos,two_over_windowsize);
	
	//interpoalte the 1/w (oneOverW) for all 3 vertices of the triangle
	//using the barycentric coordinates and the delta vector
	interpolatedW = dot(float3(pos0.w, pos1.w, pos2.w),derivativesOut.m_lambda);

	//reconstruct the z value at this screen point
	//note that this is for reversed Z perspective
	zVal = interpolatedW * (1.0f - getElem(Get(Project), 2, 2)) - getElem(Get(Project), 3, 2);

	// Calculate the world position coordinates:
	// First the projected coordinates at this point are calculated using Screen Position and the Z value
	// Then by multiplying the perspective projected coordinates by the inverse view projection matrix, it produces world coord
	float3 WorldPos = mul(Get(InvViewProject), float4(screenPos * interpolatedW, zVal, interpolatedW)).xyz;

	//Texture coord interpolation
	f3x2 texCoords = make_f3x2_cols(
			unpack2Floats(LoadByte(Get(vertexTexCoord), indices[0] << 2)) ,
			unpack2Floats(LoadByte(Get(vertexTexCoord), indices[1] << 2)) ,
			unpack2Floats(LoadByte(Get(vertexTexCoord), indices[2] << 2)) 
	);

#if defined(USE_RAY_DIFFERENTIALS)
	float4 wPos0 = mul(Get(InvViewProject),pos0);
	float4 wPos1 = mul(Get(InvViewProject),pos1);
	float4 wPos2 = mul(Get(InvViewProject),pos2);

	float3 positionDX = mul(Get(InvViewProject), float4((screenPos+two_over_windowsize.x/2) * interpolatedW, zVal, interpolatedW)).xyz;
	float3 positionDY = mul(Get(InvViewProject), float4((screenPos+two_over_windowsize.y/2) * interpolatedW, zVal, interpolatedW)).xyz;

	derivativesOut = CalcRayBary(wPos0.xyz,wPos1.xyz,wPos2.xyz,WorldPos,positionDX,positionDY,
												Get(mCameraPos).xyz);
#endif

	// Interpolate texture coordinates and calculate the gradients for 
	// texture sampling with mipmapping support
	results = Interpolate2DWithDeriv(derivativesOut,texCoords);
}

float3 GetInterpolatedVertexTangentFromIndices(uint3 indices, BarycentricDeriv derivatives)
{
	// TANGENT INTERPOLATION
	// Apply perspective division to tangents
	float3x3 tangents = make_f3x3_rows(
			decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), indices[0] << 2))) ,
			decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), indices[1] << 2))),
			decodeDir(unpackUnorm2x16(LoadByte(Get(vertexTangent), indices[2] << 2))) 
	);

	float3 tangent = normalize(InterpolateWithDeriv_float3x3(derivatives,tangents));;
	return tangent;
}

float3 GetInterpolatedNormal(uint3 indices, BarycentricDeriv derivatives)
{
	//Calculate pixel color using interpolated attributes
	//reconstruct normal map Z from X and Y

	//Normal interpolation
	float3x3 normals = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), indices[0] << 2))) ,
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), indices[1] << 2))) ,
		decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormal), indices[2] << 2))) 
	);
	float3 normal = normalize(InterpolateWithDeriv_float3x3(derivatives, normals));;

	return normal;
}

int2 GetTextureDimensions(uint materialID)
{
	int2 textureDimmensions;
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		textureDimmensions = GetDimensions(Get(diffuseMaps)[materialID], NO_SAMPLER);
	EndNonUniformResourceIndex();
	return textureDimmensions;
}

float3 GetAlbedo(uint materialID, float2 texCoord, float2 texCoordDX, float2 texCoordDY)
{
	float4 diffuseColor = f4(0);

	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		diffuseColor  = SampleGradTex2D(Get(diffuseMaps)[materialID],  Get(textureSampler), texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	return diffuseColor.rgb;
}

float4 GetAlbedoWithAlpha(uint materialID, float2 texCoord, float2 texCoordDX, float2 texCoordDY)
{
	float4 diffuseColor = f4(0);

	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		diffuseColor  = SampleGradTex2D(Get(diffuseMaps)[materialID],  Get(textureSampler), texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	return diffuseColor;
}

#endif /* vb_helpers_h */
