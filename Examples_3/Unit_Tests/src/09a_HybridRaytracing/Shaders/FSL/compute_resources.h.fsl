/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef compute_resources_h
#define compute_resources_h

#include "Shader_Defs.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/VisibilityBuffer/Shaders/FSL/vb_shading_utilities.h.fsl"

// UPDATE_FREQ_NONE
RES(Tex2D(float),    depthBuffer,    UPDATE_FREQ_NONE, t1, binding = 15);
RES(Buffer(float4),  BVHTree,        UPDATE_FREQ_NONE, t2, binding = 3);
RES(Tex2D(float),    shadowbuffer,   UPDATE_FREQ_NONE, t3, binding = 4);
RES(WTex2D(float4), outputRT,       UPDATE_FREQ_NONE, u4, binding = 5);
RES(WTex2D(float),  outputShadowRT, UPDATE_FREQ_NONE, u9, binding = 6);

RES(Tex2D(float4), vbPassTexture, UPDATE_FREQ_NONE, t5, binding = 24);

RES(ByteBuffer, vertexPos,                      UPDATE_FREQ_NONE, t6, binding = 8);
RES(ByteBuffer, vertexTexCoord,                 UPDATE_FREQ_NONE, t7, binding = 9);
RES(ByteBuffer, vertexNormal,                   UPDATE_FREQ_NONE, t8, binding = 10);
RES(ByteBuffer, vertexTangent,                  UPDATE_FREQ_NONE, t9, binding = 11);

// UPDATE_FREQ_PER_FRAME
CBUFFER(cameraUniformBlock, UPDATE_FREQ_PER_FRAME, b0, binding = 13)
{
    DATA(float4x4, View, None);
    DATA(float4x4, Project, None);
    DATA(float4x4, ViewProject, None);
    DATA(float4x4, InvView, None);
	DATA(float4x4, InvProj, None);
	DATA(float4x4, InvViewProject, None);
	DATA(float4, mCameraPos, None);
	DATA(float, mNear, None);
	DATA(float, mFar, None);
	DATA(float, mFarNearDiff, None);
	DATA(float, mFarNear, None);
	DATA(float2, mTwoOverRes, None);
};

CBUFFER(cbPerPass, UPDATE_FREQ_PER_FRAME, b1, binding = 14)
{
	DATA(float4, rtSize, None);
	DATA(float4, lightDir, None);
};

#if defined(METAL) || defined(ORBIS) || defined(PROSPERO)
	RES(Tex2D(float4), diffuseMaps[MAX_TEXTURE_UNITS],  UPDATE_FREQ_NONE, t25, binding = 25);
#else
	RES(Tex2D(float4), diffuseMaps[MAX_TEXTURE_UNITS],  space4, t0,   binding = 25);
#endif

RES(ByteBuffer, filteredIndexBuffer,            UPDATE_FREQ_PER_FRAME, t12, binding = 17);
RES(Buffer(uint), indirectDataBuffer,         UPDATE_FREQ_PER_FRAME, t13, binding = 18);

RES(SamplerState, clampMiplessLinearSampler, UPDATE_FREQ_NONE, s0, binding = 19);
RES(SamplerState, textureSampler, UPDATE_FREQ_NONE, s1, binding = 20);

#include "vb_helpers.h.fsl"

#endif /* compute_resources_h */
