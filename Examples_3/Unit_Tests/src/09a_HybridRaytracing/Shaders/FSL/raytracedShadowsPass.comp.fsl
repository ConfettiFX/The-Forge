/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#define BACKFACE_CULLING 0
#include"raytracingCommon.h.fsl"

#include "compute_resources.h.fsl"

#define THREADX 8
#define THREADY 8
#define THREADGROUPSIZE (THREADX*THREADY)

NUM_THREADS(THREADX, THREADY, 1)
void CS_MAIN( SV_GroupID(uint3) Gid, SV_DispatchThreadID(uint3) DTid, SV_GroupThreadID(uint3) GTid, SV_GroupIndex(uint) GI )
{
	INIT_MAIN;
	bool collision = false;
	int offsetToNextNode = 1;
	 
	float depth   = LoadTex2D(Get(depthBuffer), NO_SAMPLER, DTid.xy, 0).x;

	// calculate normal from the visibility buffer
	uint drawID = 0;
	uint alpha1_opaque0 = 0;
	const uint3 indices = GetVertexIndicesFromVB(DTid.xy, drawID, alpha1_opaque0);
	
	if (indices[0] != ~0u)
	{
		const float4 pos0 = GetVertexClipPosFromIndex(indices[0]);
		const float4 pos1 = GetVertexClipPosFromIndex(indices[1]);
		const float4 pos2 = GetVertexClipPosFromIndex(indices[2]);

		const float2 screenPos = GetNDCScreenPos(DTid.xy);
		float interpolatedW;
		float zVal;
		BarycentricDeriv derivatives;
		GradientInterpolationResults results;
		CalcDerivsAndInterpolate(pos0, pos1, pos2, indices, screenPos, interpolatedW, zVal, derivatives, results);
		
		float3 normal = GetInterpolatedNormal(indices, derivatives);

		float NdotL = dot(normal, Get(lightDir).xyz);

		//do not raytrace for sky pixels and for surfaces that point away from the light
		if (depth < 1 && NdotL > 0)
		{
			float2 uv = float2(DTid.xy) * Get(rtSize).zw;

			//get world position from depth
			float4 clipPos = float4(2 * uv - 1, depth, 1);
			clipPos.y = -clipPos.y;

			float4 worldPos = mul(Get(InvViewProject), clipPos);
			worldPos.xyz /= worldPos.w;

			float3 rayDir = Get(lightDir).xyz;
			float3 rayDirInv = rcp(rayDir);

			//offset to avoid selfshadows
			worldPos.xyz += 5 * normal;

			float t = 0;
			float2 bCoord = f2(0);

			int dataOffset = 0;  

			LOOP
			while (offsetToNextNode != 0)
			{
				float4 element0 = Get(BVHTree)[dataOffset++].xyzw;
				float4 element1 = Get(BVHTree)[dataOffset++].xyzw;

				offsetToNextNode = int(element0.w);

				collision = false;

				if (offsetToNextNode < 0)
				{
					//try collision against this node's bounding box	
					float3 bboxMin = element0.xyz;
					float3 bboxMax = element1.xyz;

					//intermediate node check for intersection with bounding box
					collision = RayIntersectsBox(worldPos.xyz, rayDirInv, bboxMin.xyz, bboxMax.xyz);

					//if there is collision, go to the next node (left) or else skip over the whole branch
					if (!collision)
						dataOffset += abs(offsetToNextNode);
				}
				else if (offsetToNextNode > 0)
				{
					LOOP
					for(uint i = 0; i < uint(element1.w); i++)
					{
						float4 element2 = Get(BVHTree)[dataOffset++].xyzw;
						uint4 element3 = asuint(Get(BVHTree)[dataOffset++].xyzw);
						if (!collision)
						{
							float3 vertex0 = element0.xyz;
							float3 vertex1MinusVertex0 = element1.xyz;
							float3 vertex2MinusVertex0 = element2.xyz;

							//leaf node check for intersection with triangle
							collision = RayTriangleIntersect(worldPos.xyz, rayDir, vertex0.xyz, vertex1MinusVertex0.xyz, vertex2MinusVertex0.xyz, t, bCoord);

							if (collision)
							{
								uint materialID = asuint(element2.w);

								if ((materialID & 0x80000000) > 0)
								{
									materialID = materialID & 0x7fffffff;
									float2 uv0 = unpack2Floats(element3.x);
									float2 uv1 = unpack2Floats(element3.y);
									float2 uv2 = unpack2Floats(element3.z);

									float2 sampleUv = bCoord.x * uv1 + bCoord.y * uv2 + (1.0 - (bCoord.x + bCoord.y)) * uv0;

									float4 albedoAndAlpha;
									BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
    								albedoAndAlpha = SampleLvlTex2D(Get(diffuseMaps)[materialID], Get(textureSampler), sampleUv, 0);
									EndNonUniformResourceIndex();
									if (albedoAndAlpha.a < 0.5)
									{
										collision = false;
									}
								}
							}
						}

						if (collision)
						{
							break;
						}

						if (i != uint(element1.w) - 1)
						{
							element0 = Get(BVHTree)[dataOffset++].xyzw;
							element1 = Get(BVHTree)[dataOffset++].xyzw;
						}
					}

					if (collision)
					{
						break;
					}
				}
			};
		}
	}

#ifdef GPU_CRASH
	// Causing a GPU hang...
    float counter = 1.0;
    while (counter > 0.0)
    {
        collision = collision && bool(counter);
        counter += float(collision);
		counter -= 0.0000001;
		Write2D(Get(outputShadowRT), DTid.xy, 1.0f - float(collision));
    }
#endif

	Write2D(Get(outputShadowRT), DTid.xy, 1.0f - float(collision));
	RETURN();
}