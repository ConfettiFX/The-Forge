/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "compute_resources.h.fsl"

NUM_THREADS(16, 16, 1)
void CS_MAIN( SV_GroupID(uint3) Gid, SV_DispatchThreadID(uint3) DTid, SV_GroupThreadID(uint3) GTid, SV_GroupIndex(uint) GI )
{
	INIT_MAIN;
	float4 outputColor = f4(0);
	// calculate albedo from the visibility buffer
	uint drawID = 0;
	uint alpha1_opaque0 = 0;
	const uint3 indices = GetVertexIndicesFromVB(DTid.xy, drawID, alpha1_opaque0);

	if (indices[0] != ~0u)
	{
		const float4 pos0 = GetVertexClipPosFromIndex(indices[0]);
		const float4 pos1 = GetVertexClipPosFromIndex(indices[1]);
		const float4 pos2 = GetVertexClipPosFromIndex(indices[2]);

		const float2 screenPos = GetNDCScreenPos(DTid.xy);
		float interpolatedW;
		float zVal;
		BarycentricDeriv derivatives;
		GradientInterpolationResults results;
		CalcDerivsAndInterpolate(pos0, pos1, pos2, indices, screenPos, interpolatedW, zVal, derivatives, results);

		float3 normal = GetInterpolatedNormal(indices, derivatives);

		float NdotL = saturate(dot(normal, Get(lightDir).xyz));

		float shadowFactor = LoadTex2D(Get(shadowbuffer), NO_SAMPLER, DTid.xy, 0).x;

		//add some fake "up-down" ambient to add some contrast to shadowed areas
		float ambient = lerp(0.5, 0.2, normal.y * 0.5 + 0.5);

		const float lightIntensity = 5;
		const float3 lightColour = float3(1, 1, 0.5);
		float3 diffuse = (lightIntensity * shadowFactor * NdotL) *  lightColour + ambient;

		uint materialID = GetMaterialIdFromIndirectMaterialBuffer(drawID, alpha1_opaque0);

		float2 texCoord = results.interp;
		float2 texCoordDX = results.dx;
		float2 texCoordDY = results.dy;
		
		float3 albedo = GetAlbedo(materialID, texCoord, texCoordDX, texCoordDY);

		//linearise albedo before applying light to it
		albedo = pow(abs(albedo), f3(2.2));

		outputColor = float4(diffuse*albedo, 0);
	}

#ifdef GPU_CRASH
	// Causing a GPU hang...
    float counter = 1.0;
    while (counter > 0.0)
    {
        outputColor.xyz += float3(0.1, 0.2, 0.3);
        counter += outputColor.r;
		counter -= 0.0000001;
		Write2D(Get(outputRT), DTid.xy, outputColor);
    }
#endif

	Write2D(Get(outputRT), DTid.xy, outputColor);

	RETURN();
}