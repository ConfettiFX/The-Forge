/*
* Copyright (c) 2017-2024 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

/************************************************************************/
// Defines
/************************************************************************/
#define AOIT_EMPTY_NODE_DEPTH   (0.0)
#define AOIT_TRANS_BIT_COUNT    (8)
#define AOIT_MAX_UNNORM_TRANS   ((1 << AOIT_TRANS_BIT_COUNT) - 1)
#define AOIT_TRANS_MASK         (0xFFFFFFFF - uint(AOIT_MAX_UNNORM_TRANS))

#define AOIT_TILED_ADDRESSING

#ifndef AOIT_NODE_COUNT
#define AOIT_NODE_COUNT			(4)
#endif

#if AOIT_NODE_COUNT == 2
#define AOIT_RT_COUNT			(1)
#else
#define AOIT_RT_COUNT			(AOIT_NODE_COUNT / 4)
#endif

/************************************************************************/
// Structures
/************************************************************************/
STRUCT(AOITNode)
{
	DATA(float, depth, None);
	DATA(float, trans, None);
	DATA(uint, color, None);
};

STRUCT(AOITControlSurface)
{
	DATA(bool, clear, None);
	DATA(bool, opaque, None);
	DATA(float, depth, None);
};

STRUCT(AOITData)
{
	DATA(float4, depth[AOIT_RT_COUNT], None);
	DATA(uint4, color[AOIT_RT_COUNT], None);
};

STRUCT(AOITDepthData)
{
	DATA(float4, depth[AOIT_RT_COUNT], None);
};

STRUCT(AOITColorData)
{
	DATA(uint4, color[AOIT_RT_COUNT], None);
};

/************************************************************************/
// Shader resources
/************************************************************************/
#define UNIT_SRV_AOIT_MASK  register(t5, UPDATE_FREQ_NONE)
#define UNIT_SRV_AOIT_DEPTH register(t6, UPDATE_FREQ_NONE)
#define UNIT_SRV_AOIT_COLOR register(t7, UPDATE_FREQ_NONE)

#define UNIT_UAV_AOIT_MASK  register(u0, UPDATE_FREQ_NONE)
#define UNIT_UAV_AOIT_DEPTH register(u1, UPDATE_FREQ_NONE)
#define UNIT_UAV_AOIT_COLOR register(u2, UPDATE_FREQ_NONE)

EnablePSInterlock()

#ifdef AOIT_UNORDERED_ACCESS
#if FT_MULTIVIEW
RES(RasterizerOrderedTex2DArray(uint, 0), AOITClearMaskUAV, UPDATE_FREQ_NONE, u0, binding = 20);
#else
RES(RasterizerOrderedTex2D(uint, 0), AOITClearMaskUAV, UPDATE_FREQ_NONE, u0, binding = 20);
#endif
RES(RWCoherentBuffer(AOITDepthData),      AOITDepthDataUAV, UPDATE_FREQ_NONE, u1, binding = 21);
RES(RWCoherentBuffer(AOITColorData),      AOITColorDataUAV, UPDATE_FREQ_NONE, u2, binding = 22);
#endif

#ifdef AOIT_ORDERED_ACCESS
#if FT_MULTIVIEW
RES(Tex2DArray(uint),           AOITClearMaskSRV, UPDATE_FREQ_NONE, t5, binding = 15);
#else
RES(Tex2D(uint),           AOITClearMaskSRV, UPDATE_FREQ_NONE, t5, binding = 15);
#endif
RES(Buffer(AOITDepthData), AOITDepthDataSRV, UPDATE_FREQ_NONE, t6, binding = 16);
RES(Buffer(AOITColorData), AOITColorDataSRV, UPDATE_FREQ_NONE, t7, binding = 17);
#endif

/************************************************************************/
// Helper functions
/************************************************************************/
uint PackRGB(float3 color)
{
	uint3 u = uint3(saturate(color) * 255 + 0.5);
	uint  packedOutput = (u.z << 16U) | (u.y << 8U) | u.x;
	return packedOutput;
}

float3 UnpackRGB(uint packedInput)
{
	float3 unpackedOutput;
	uint3 p = uint3((packedInput & 0xFFU),
		(packedInput >> 8U) & 0xFFU,
		(packedInput >> 16U) & 0xFFU);

	unpackedOutput = float3(p) / 255;
	return unpackedOutput;
}

uint PackRGBA(float4 color)
{
	uint4 u = uint4(saturate(color) * 255 + 0.5);
	uint packedOutput = (u.w << 24U) | (u.z << 16U) | (u.y << 8U) | u.x;
	return packedOutput;
}

float4 UnpackRGBA(uint packedInput)
{
	float4 unpackedOutput;
	uint4 p = uint4((packedInput & 0xFFU),
		(packedInput >> 8U) & 0xFFU,
		(packedInput >> 16U) & 0xFFU,
		(packedInput >> 24U));

	unpackedOutput = float4(p) / 255;
	return unpackedOutput;
}

float UnpackUnnormAlpha(uint packedInput)
{
	return float(packedInput >> 24U);
}

#if FT_MULTIVIEW

uint AOITAddrGen(uint3 addr3D, int3 dim)
{
    uint width = dim.x;
    uint height = dim.y;
#ifdef AOIT_TILED_ADDRESSING
	width = width >> 1U;
	uint2 tileAddr2D = addr3D.xy >> 1U;
	uint tileAddr1D = ((tileAddr2D[0] + width * tileAddr2D[1]) << 2U) + width * height * addr3D[2];
	uint2 pixelAddr2D = addr3D.xy & 0x1U;
	uint pixelAddr1D = (pixelAddr2D[1] << 1U) + pixelAddr2D[0];
	return tileAddr1D | pixelAddr1D;
#else
	return addr3D[0] + width * addr3D[1] + width * height * addr3D[2];
#endif
}

#ifdef AOIT_UNORDERED_ACCESS
uint AOITAddrGenUAV(uint3 addr3D)
{
	int3 dim = GetDimensions(Get(AOITClearMaskUAV), NO_SAMPLER);
	return AOITAddrGen(addr3D, dim);
}
#endif

#ifdef AOIT_ORDERED_ACCESS
uint AOITAddrGenSRV(uint3 addr3D)
{
    int3 dim = GetDimensions(Get(AOITClearMaskSRV), NO_SAMPLER);
    return AOITAddrGen(addr3D, dim);
}
#endif

void AOITLoadControlSurface(in(uint) data, inout(AOITControlSurface) surface)
{
	surface.clear = (data & 0x1) != 0 ? true : false;
	surface.opaque = (data & 0x2) != 0 ? true : false;
	surface.depth = asfloat((data & 0xFFFFFFFCU) | 0x3U);
}

/************************************************************************/
// Load/Store/Clear functions
/************************************************************************/
#ifdef AOIT_UNORDERED_ACCESS
void AOITLoadControlSurfaceUAV(in(uint2) pixelAddr, in(uint) ViewID, inout(AOITControlSurface) surface)
{
	uint data = LoadRWTex3D(Get(AOITClearMaskUAV), uint3(pixelAddr, ViewID)).r;
	AOITLoadControlSurface(data, surface);
}

void AOITStoreControlSurfaceUAV(uint2 pixelAddr, uint ViewID, in(AOITControlSurface) surface)
{
	uint data;
	data = asuint(surface.depth) & 0xFFFFFFFCU;
	data |= surface.opaque ? 0x2 : 0x0;
	data |= surface.clear ? 0x1 : 0x0;
	Write2DArray(Get(AOITClearMaskUAV), pixelAddr, ViewID, data);
}

void AOITLoadDataUAV(in(uint2) pixelAddr, in(uint) ViewID, out_array(AOITNode, nodeArray) [AOIT_NODE_COUNT])
{
	AOITData data;
	uint addr = AOITAddrGenUAV(uint3(pixelAddr, ViewID));
	UNROLL for (uint _ci = 0; _ci < AOIT_RT_COUNT; ++_ci)
	{
		data.color[_ci] = Get(AOITColorDataUAV)[addr].color[_ci];
	}

#if AOIT_NODE_COUNT == 2
	UNROLL for (uint i = 0; i < 2; ++i)
	{
		AOITNode node = { asfloat(data.color[0][i]), UnpackUnnormAlpha(data.color[0][2 + i]), data.color[0][2 + i] & 0xFFFFFFU };
		nodeArray[i] = node;
	}
#else
	UNROLL for (uint _di = 0; _di < AOIT_RT_COUNT; ++_di)
	{
		data.depth[_di] = Get(AOITDepthDataUAV)[addr].depth[_di];
	}

	UNROLL for (uint i = 0; i < AOIT_RT_COUNT; ++i)
	{
		UNROLL for (uint j = 0; j < 4; ++j)
		{
			AOITNode node = { data.depth[i][j],
								UnpackUnnormAlpha(data.color[i][j]),
								data.color[i][j] & 0xFFFFFFU };
			nodeArray[4 * i + j] = node;
		}
	}
#endif
}

void AOITStoreDataUAV(in(uint2) pixelAddr, in(uint) ViewID, AOITNode nodeArray[AOIT_NODE_COUNT])
{
	AOITData data;
	uint addr = AOITAddrGenUAV(uint3(pixelAddr, ViewID));

#if AOIT_NODE_COUNT == 2
	UNROLL for (uint i = 0; i < 2; ++i)
	{
		data.color[0][i] = asuint((asuint(float(nodeArray[i].depth)) & uint(AOIT_TRANS_MASK)) | uint(nodeArray[i].trans));
		data.color[0][2 + i] = (nodeArray[i].color & 0xFFFFFFU) | ((uint(nodeArray[i].trans)) << 24U);
	}
#else
	UNROLL for (uint i = 0; i < AOIT_RT_COUNT; ++i)
	{
		UNROLL for (uint j = 0; j < 4; ++j)
		{
			data.depth[i][j] = nodeArray[4 * i + j].depth;
			data.color[i][j] = (nodeArray[4 * i + j].color & 0xFFFFFFU) | ((uint(nodeArray[4 * i + j].trans)) << 24U);
		}
	}
	UNROLL for (uint _di = 0; _di < AOIT_RT_COUNT; ++_di)
	{
		Get(AOITDepthDataUAV)[addr].depth[_di] = data.depth[_di];
	}
#endif
	UNROLL for (uint _ci = 0; _ci < AOIT_RT_COUNT; ++_ci)
	{
		Get(AOITColorDataUAV)[addr].color[_ci] = data.color[_ci];
	}
}
#endif

#ifdef AOIT_ORDERED_ACCESS
void AOITLoadControlSurfaceSRV(in(uint2) pixelAddr, in(uint) ViewID, inout(AOITControlSurface) surface)
{
	uint data = LoadTex3D(Get(AOITClearMaskSRV), NO_SAMPLER, uint3(pixelAddr, ViewID), 0).r;
	AOITLoadControlSurface(data, surface);
}

void AOITLoadDataSRV(in(uint2) pixelAddr, in(uint) ViewID, out_array(AOITNode, nodeArray) [AOIT_NODE_COUNT])
{
	AOITData data;
	uint addr = AOITAddrGenSRV(uint3(pixelAddr, ViewID));
	UNROLL for (uint _ci = 0; _ci < AOIT_RT_COUNT; ++_ci)
	{
		data.color[_ci] = Get(AOITColorDataSRV)[addr].color[_ci];
	}

#if AOIT_NODE_COUNT == 2
	UNROLL for (uint i = 0; i < 2; ++i)
	{
		AOITNode node = { 0, UnpackUnnormAlpha(data.color[0][2 + i]),
			data.color[0][2 + i] & 0xFFFFFFU };
		nodeArray[i] = node;
	}
#else
	UNROLL for (uint i = 0; i < AOIT_RT_COUNT; ++i)
	{
		UNROLL for (uint j = 0; j < 4; ++j)
		{
			AOITNode node = { 0, UnpackUnnormAlpha(data.color[i][j]),
				data.color[i][j] & 0xFFFFFFU };
			nodeArray[4 * i + j] = node;
		}
	}
#endif
}
#endif

/************************************************************************/
// Other functions
/************************************************************************/
void AOITClearData(inout(AOITData) data, float depth, float4 color)
{
	uint packedColor = PackRGBA(float4(0, 0, 0, 1.0f - color.w));

#if AOIT_NODE_COUNT == 2
	data.depth[0] = 0;
	data.color[0][0] = asuint(depth);
	data.color[0][1] = asuint((float)AOIT_EMPTY_NODE_DEPTH);
	data.color[0][2] = PackRGBA(float4(color.www * color.xyz, 1.0f - color.w));
	data.color[0][3] = packedColor;
#else
	UNROLL for (uint i = 0; i < AOIT_RT_COUNT; ++i)
	{
		data.depth[i] = f4(AOIT_EMPTY_NODE_DEPTH);
		data.color[i] = u4(packedColor);
	}
	data.depth[0][0] = depth;
	data.color[0][0] = PackRGBA(float4(color.www * color.xyz, 1.0f - color.w));
#endif
}

void AOITInsertFragment(in(float) fragmentDepth, in(float) fragmentTrans, in(float3) fragmentColor, inout_array(AOITNode, nodeArray) [AOIT_NODE_COUNT])
{
	int i;

	float depth[AOIT_NODE_COUNT + 1];
	float trans[AOIT_NODE_COUNT + 1];
	uint color[AOIT_NODE_COUNT + 1];

	// Unpack AOIT data
	UNROLL for (i = 0; i < AOIT_NODE_COUNT; ++i)
	{
		depth[i] = nodeArray[i].depth;
		trans[i] = nodeArray[i].trans;
		color[i] = nodeArray[i].color;
	}

	// Find insertion index
	int index = 0;
	float prevTrans = 255;
	UNROLL for (i = 0; i < AOIT_NODE_COUNT; ++i)
	{
		if (fragmentDepth < depth[i])
		{
			++index;
			prevTrans = trans[i];
		}
	}

	// Make room for the new fragment
	UNROLL for (i = AOIT_NODE_COUNT - 1; i >= 0; --i)
	{
		FLATTEN if (index <= i)
		{
			depth[i + 1] = depth[i];
			trans[i + 1] = trans[i] * fragmentTrans;
			color[i + 1] = color[i];
		}
	}

	// Insert new fragment
	const float newFragTrans = fragmentTrans * prevTrans;
	const uint newFragColor = PackRGB(fragmentColor * (1.0f - fragmentTrans));

	depth[index] = fragmentDepth;
	trans[index] = newFragTrans;
	color[index] = newFragColor;

	float EMPTY_NODE = asfloat(asuint(float(AOIT_EMPTY_NODE_DEPTH)) & uint(AOIT_TRANS_MASK));

	FLATTEN if (asfloat(asuint(float(depth[AOIT_NODE_COUNT])) & uint(AOIT_TRANS_MASK)) != EMPTY_NODE)
	{
		float3 toBeRemovedColor = UnpackRGB(color[AOIT_NODE_COUNT]);
		float3 toBeAccumulatedColor = UnpackRGB(color[AOIT_NODE_COUNT - 1]);
		color[AOIT_NODE_COUNT - 1] = PackRGB(toBeAccumulatedColor + toBeRemovedColor * trans[AOIT_NODE_COUNT - 1] * rcp(trans[AOIT_NODE_COUNT - 2]));
		trans[AOIT_NODE_COUNT - 1] = trans[AOIT_NODE_COUNT];
	}

	// Pack AOIT data
	UNROLL for (i = 0; i < AOIT_NODE_COUNT; ++i)
	{
		nodeArray[i].depth = depth[i];
		nodeArray[i].trans = trans[i];
		nodeArray[i].color = color[i];
	}
}

#ifdef AOIT_UNORDERED_ACCESS
void WriteNewPixelToAOIT(float2 position, uint ViewID, float depth, float4 color)
{
	// From now on serialize all UAV accesses (with respect to other fragments shaded in flight which map to the same pixel)
	AOITNode nodeArray[AOIT_NODE_COUNT];
	uint2 pixelAddr = uint2(position);

	// Load AOIT control surface
	AOITControlSurface ctrlSurface;
	ctrlSurface.clear = false;
	ctrlSurface.opaque = false;
	ctrlSurface.depth = 0.0f;
	AOITLoadControlSurfaceUAV(pixelAddr, ViewID, ctrlSurface);

	// If we are modifying this pixel for the first time we need to clear the AOIT data
	if (ctrlSurface.clear)
	{
		// Clear AOIT data and initialize it with first transparent layer
		AOITData data;
		AOITClearData(data, depth, color);

		// Store AOIT data
		uint addr = AOITAddrGenUAV(uint3(pixelAddr, ViewID));
#if AOIT_NODE_COUNT != 2
		UNROLL for (uint _di = 0; _di < AOIT_RT_COUNT; ++_di)
		{
			Get(AOITDepthDataUAV)[addr].depth[_di] = data.depth[_di];
		}
#endif
		UNROLL for (uint _ci = 0; _ci < AOIT_RT_COUNT; ++_ci)
		{
			Get(AOITColorDataUAV)[addr].color[_ci] = data.color[_ci];
		}

		Write2DArray(Get(AOITClearMaskUAV), pixelAddr, ViewID, 0u);
	}
	else
	{
		// Load AOIT data
		AOITLoadDataUAV(pixelAddr, ViewID, nodeArray);

		// Update AOIT data
		AOITInsertFragment(depth, 1.0f - color.w, color.xyz, nodeArray);

		// Store AOIT data
		AOITStoreDataUAV(pixelAddr, ViewID, nodeArray);
	}
}
#endif
#else
uint AOITAddrGen(uint2 addr2D, uint width)
{
#ifdef AOIT_TILED_ADDRESSING
	width = width >> 1U;
	uint2 tileAddr2D = addr2D >> 1U;
	uint tileAddr1D = (tileAddr2D[0] + width * tileAddr2D[1]) << 2U;
	uint2 pixelAddr2D = addr2D & 0x1U;
	uint pixelAddr1D = (pixelAddr2D[1] << 1U) + pixelAddr2D[0];
	return tileAddr1D | pixelAddr1D;
#else
	return addr2D[0] + width * addr2D[1];
#endif
}

#ifdef AOIT_UNORDERED_ACCESS
uint AOITAddrGenUAV(uint2 addr2D)
{
	int2 dim = GetDimensions(Get(AOITClearMaskUAV), NO_SAMPLER);
	return AOITAddrGen(addr2D, dim[0]);
}
#endif

#ifdef AOIT_ORDERED_ACCESS
uint AOITAddrGenSRV(uint2 addr2D)
{
	int2 dim = GetDimensions(Get(AOITClearMaskSRV), NO_SAMPLER);
	return AOITAddrGen(addr2D, dim[0]);
}
#endif

void AOITLoadControlSurface(in(uint) data, inout(AOITControlSurface) surface)
{
	surface.clear = (data & 0x1) != 0 ? true : false;
	surface.opaque = (data & 0x2) != 0 ? true : false;
	surface.depth = asfloat((data & 0xFFFFFFFCU) | 0x3U);
}

/************************************************************************/
// Load/Store/Clear functions
/************************************************************************/
#ifdef AOIT_UNORDERED_ACCESS
void AOITLoadControlSurfaceUAV(in(uint2) pixelAddr, inout(AOITControlSurface) surface)
{
	uint data = LoadRWTex2D(Get(AOITClearMaskUAV), pixelAddr).r;
	AOITLoadControlSurface(data, surface);
}

void AOITStoreControlSurfaceUAV(uint2 pixelAddr, in(AOITControlSurface) surface)
{
	uint data;
	data = asuint(surface.depth) & 0xFFFFFFFCU;
	data |= surface.opaque ? 0x2 : 0x0;
	data |= surface.clear ? 0x1 : 0x0;
	Write2D(Get(AOITClearMaskUAV), pixelAddr, data);
}

void AOITLoadDataUAV(in(uint2) pixelAddr, out_array(AOITNode, nodeArray) [AOIT_NODE_COUNT])
{
	AOITData data;
	uint addr = AOITAddrGenUAV(pixelAddr);
	UNROLL for (uint _ci = 0; _ci < AOIT_RT_COUNT; ++_ci)
	{
		data.color[_ci] = Get(AOITColorDataUAV)[addr].color[_ci];
	}

#if AOIT_NODE_COUNT == 2
	UNROLL for (uint i = 0; i < 2; ++i)
	{
		AOITNode node = { asfloat(data.color[0][i]), UnpackUnnormAlpha(data.color[0][2 + i]), data.color[0][2 + i] & 0xFFFFFFU };
		nodeArray[i] = node;
	}
#else
	UNROLL for (uint _di = 0; _di < AOIT_RT_COUNT; ++_di)
	{
		data.depth[_di] = Get(AOITDepthDataUAV)[addr].depth[_di];
	}

	UNROLL for (uint i = 0; i < AOIT_RT_COUNT; ++i)
	{
		UNROLL for (uint j = 0; j < 4; ++j)
		{
			AOITNode node = { data.depth[i][j],
								UnpackUnnormAlpha(data.color[i][j]),
								data.color[i][j] & 0xFFFFFFU };
			nodeArray[4 * i + j] = node;
		}
	}
#endif
}

void AOITStoreDataUAV(in(uint2) pixelAddr, AOITNode nodeArray[AOIT_NODE_COUNT])
{
	AOITData data;
	uint addr = AOITAddrGenUAV(pixelAddr);

#if AOIT_NODE_COUNT == 2
	UNROLL for (uint i = 0; i < 2; ++i)
	{
		data.color[0][i] = asuint((asuint(float(nodeArray[i].depth)) & uint(AOIT_TRANS_MASK)) | uint(nodeArray[i].trans));
		data.color[0][2 + i] = (nodeArray[i].color & 0xFFFFFFU) | ((uint(nodeArray[i].trans)) << 24U);
	}
#else
	UNROLL for (uint i = 0; i < AOIT_RT_COUNT; ++i)
	{
		UNROLL for (uint j = 0; j < 4; ++j)
		{
			data.depth[i][j] = nodeArray[4 * i + j].depth;
			data.color[i][j] = (nodeArray[4 * i + j].color & 0xFFFFFFU) | ((uint(nodeArray[4 * i + j].trans)) << 24U);
		}
	}
	UNROLL for (uint _di = 0; _di < AOIT_RT_COUNT; ++_di)
	{
		Get(AOITDepthDataUAV)[addr].depth[_di] = data.depth[_di];
	}
#endif
	UNROLL for (uint _ci = 0; _ci < AOIT_RT_COUNT; ++_ci)
	{
		Get(AOITColorDataUAV)[addr].color[_ci] = data.color[_ci];
	}
}
#endif

#ifdef AOIT_ORDERED_ACCESS
void AOITLoadControlSurfaceSRV(in(uint2) pixelAddr, inout(AOITControlSurface) surface)
{
	uint data = LoadTex2D(Get(AOITClearMaskSRV), NO_SAMPLER, pixelAddr, 0).r;
	AOITLoadControlSurface(data, surface);
}

void AOITLoadDataSRV(in(uint2) pixelAddr, out_array(AOITNode, nodeArray) [AOIT_NODE_COUNT])
{
	AOITData data;
	uint addr = AOITAddrGenSRV(pixelAddr);
	UNROLL for (uint _ci = 0; _ci < AOIT_RT_COUNT; ++_ci)
	{
		data.color[_ci] = Get(AOITColorDataSRV)[addr].color[_ci];
	}

#if AOIT_NODE_COUNT == 2
	UNROLL for (uint i = 0; i < 2; ++i)
	{
		AOITNode node = { 0, UnpackUnnormAlpha(data.color[0][2 + i]),
			data.color[0][2 + i] & 0xFFFFFFU };
		nodeArray[i] = node;
	}
#else
	UNROLL for (uint i = 0; i < AOIT_RT_COUNT; ++i)
	{
		UNROLL for (uint j = 0; j < 4; ++j)
		{
			AOITNode node = { 0, UnpackUnnormAlpha(data.color[i][j]),
				data.color[i][j] & 0xFFFFFFU };
			nodeArray[4 * i + j] = node;
		}
	}
#endif
}
#endif

/************************************************************************/
// Other functions
/************************************************************************/
void AOITClearData(inout(AOITData) data, float depth, float4 color)
{
	uint packedColor = PackRGBA(float4(0, 0, 0, 1.0f - color.w));

#if AOIT_NODE_COUNT == 2
	data.depth[0] = f4(0);
	data.color[0][0] = asuint(depth);
	data.color[0][1] = asuint(float(AOIT_EMPTY_NODE_DEPTH));
	data.color[0][2] = PackRGBA(float4(color.www * color.xyz, 1.0f - color.w));
	data.color[0][3] = packedColor;
#else
	UNROLL for (uint i = 0; i < AOIT_RT_COUNT; ++i)
	{
		data.depth[i] = f4(AOIT_EMPTY_NODE_DEPTH);
		data.color[i] = u4(packedColor);
	}
	data.depth[0][0] = depth;
	data.color[0][0] = PackRGBA(float4(color.www * color.xyz, 1.0f - color.w));
#endif
}

void AOITInsertFragment(in(float) fragmentDepth, in(float) fragmentTrans, in(float3) fragmentColor, inout_array(AOITNode, nodeArray) [AOIT_NODE_COUNT])
{
	int i;

	float depth[AOIT_NODE_COUNT + 1];
	float trans[AOIT_NODE_COUNT + 1];
	uint color[AOIT_NODE_COUNT + 1];

	// Unpack AOIT data
	UNROLL for (i = 0; i < AOIT_NODE_COUNT; ++i)
	{
		depth[i] = nodeArray[i].depth;
		trans[i] = nodeArray[i].trans;
		color[i] = nodeArray[i].color;
	}

	// Find insertion index
	int index = 0;
	float prevTrans = 255;
	UNROLL for (i = 0; i < AOIT_NODE_COUNT; ++i)
	{
		if (fragmentDepth < depth[i])
		{
			++index;
			prevTrans = trans[i];
		}
	}

	// Make room for the new fragment
	UNROLL for (i = AOIT_NODE_COUNT - 1; i >= 0; --i)
	{
		FLATTEN if (index <= i)
		{
			depth[i + 1] = depth[i];
			trans[i + 1] = trans[i] * fragmentTrans;
			color[i + 1] = color[i];
		}
	}

	// Insert new fragment
	const float newFragTrans = fragmentTrans * prevTrans;
	const uint newFragColor = PackRGB(fragmentColor * (1.0f - fragmentTrans));

	depth[index] = fragmentDepth;
	trans[index] = newFragTrans;
	color[index] = newFragColor;

	float EMPTY_NODE = asfloat(asuint(float(AOIT_EMPTY_NODE_DEPTH)) & uint(AOIT_TRANS_MASK));

	FLATTEN if (asfloat(asuint(float(depth[AOIT_NODE_COUNT])) & uint(AOIT_TRANS_MASK)) != EMPTY_NODE)
	{
		float3 toBeRemovedColor = UnpackRGB(color[AOIT_NODE_COUNT]);
		float3 toBeAccumulatedColor = UnpackRGB(color[AOIT_NODE_COUNT - 1]);
		color[AOIT_NODE_COUNT - 1] = PackRGB(toBeAccumulatedColor + toBeRemovedColor * trans[AOIT_NODE_COUNT - 1] * rcp(trans[AOIT_NODE_COUNT - 2]));
		trans[AOIT_NODE_COUNT - 1] = trans[AOIT_NODE_COUNT];
	}

	// Pack AOIT data
	UNROLL for (i = 0; i < AOIT_NODE_COUNT; ++i)
	{
		nodeArray[i].depth = depth[i];
		nodeArray[i].trans = trans[i];
		nodeArray[i].color = color[i];
	}
}

#ifdef AOIT_UNORDERED_ACCESS
void WriteNewPixelToAOIT(float2 position, float depth, float4 color)
{
	// From now on serialize all UAV accesses (with respect to other fragments shaded in flight which map to the same pixel)
	AOITNode nodeArray[AOIT_NODE_COUNT];
	uint2 pixelAddr = uint2(position);

	// Load AOIT control surface
	AOITControlSurface ctrlSurface;
	ctrlSurface.clear = false;
	ctrlSurface.opaque = false;
	ctrlSurface.depth = 0.0f;
	AOITLoadControlSurfaceUAV(pixelAddr, ctrlSurface);

	// If we are modifying this pixel for the first time we need to clear the AOIT data
	if (ctrlSurface.clear)
	{
		// Clear AOIT data and initialize it with first transparent layer
		AOITData data;
		AOITClearData(data, depth, color);

		// Store AOIT data
		uint addr = AOITAddrGenUAV(pixelAddr);
#if AOIT_NODE_COUNT != 2
		UNROLL for (uint _di = 0; _di < AOIT_RT_COUNT; ++_di)
		{
			Get(AOITDepthDataUAV)[addr].depth[_di] = data.depth[_di];
		}
#endif
		UNROLL for (uint _ci = 0; _ci < AOIT_RT_COUNT; ++_ci)
		{
			Get(AOITColorDataUAV)[addr].color[_ci] = data.color[_ci];
		}

		Write2D(Get(AOITClearMaskUAV), pixelAddr, 0u);
	}
	else
	{
		// Load AOIT data
		AOITLoadDataUAV(pixelAddr, nodeArray);

		// Update AOIT data
		AOITInsertFragment(depth, 1.0f - color.w, color.xyz, nodeArray);

		// Store AOIT data
		AOITStoreDataUAV(pixelAddr, nodeArray);
	}
}
#endif
#endif