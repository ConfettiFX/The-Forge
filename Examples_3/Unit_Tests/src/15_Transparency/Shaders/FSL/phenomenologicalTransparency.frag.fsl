/*
* Copyright (c) 2017-2024 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#include "shaderDefs.h.fsl"
#include "shading.h.fsl"

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float4, WorldPosition, POSITION0);
	DATA(float4, Normal, NORMAL0);
	DATA(float4, UV, TEXCOORD0);
	DATA(FLAT(uint), MatID, MAT_ID);
#if (PT_USE_REFRACTION + PT_USE_DIFFUSION) != 0
	DATA(float4, CSPosition, POSITION1);
#endif
#if PT_USE_REFRACTION != 0
	DATA(float4, CSNormal, NORMAL1);
#endif
#if FT_MULTIVIEW
	DATA(FLAT(uint), ViewID, TEXCOORD1);
#endif
};

STRUCT(PSOutput)
{
	DATA(float4, Accumulation, SV_Target0);
	DATA(float4, Modulation,   SV_Target1);
#if PT_USE_REFRACTION != 0
	DATA(float2, Refraction,   SV_Target2);
#endif
};

float WeightFunction(float alpha, float depth)
{
	float tmp = depth * 0.99f;
	tmp *= tmp * tmp * 1e4f;
	return clamp(alpha * tmp, 1e-3f, 1.5e2);
}

float2 ComputeRefractionOffset(float3 csNormal, float3 csPosition, float eta)
{
	const float2 backSizeInMeters = f2(1000.0f * (1.0f / ((1.0f - eta) * 100.0f)));	// HACK: Background size is supposed to be calculated per object. This is a quick work around that looks good to us.

	const float backgroundZ = csPosition.z - 4.0f;

	float3 dir = normalize(csPosition);
	float3 refracted = refract(dir, csNormal, eta);

	bool totalInternalRefraction = dot(refracted, refracted) < 0.01f;
	if (totalInternalRefraction)
		return f2(0.0f);
	else
	{
		float3 plane = csPosition;
		plane.z -= backgroundZ;

		float2 hit = (plane.xy - refracted.xy * plane.z / refracted.z);
		float2 backCoord = (hit / backSizeInMeters) + 0.5f;
		float2 startCoord = (csPosition.xy / backSizeInMeters) + 0.5f;
		return backCoord - startCoord;
	}
}

PSOutput PS_MAIN( VSOutput In )
{
	INIT_MAIN;
	PSOutput Out;

	float3 transmission = Get(Materials)[In.MatID].Transmission.xyz;
	float collimation = Get(Materials)[In.MatID].Collimation;
	float4 finalColor = Shade(In.MatID, In.UV.xy, In.WorldPosition.xyz, normalize(In.Normal.xyz), VR_VIEW_ID(In.ViewID));

	float d = 1.0f - (In.Position.z / In.Position.w); // no need to rcp(In.Position.w) since it is reverse z, we will one minus depth to make up for it... one less div...
	float4 premultipliedColor = float4(finalColor.rgb * finalColor.a, finalColor.a);
	float coverage = finalColor.a;

	Out.Modulation.rgb = coverage * (1.0f - transmission);
	coverage *= 1.0f - (transmission.r + transmission.g + transmission.b) * (1.0f / 3.0f);

	float w = WeightFunction(coverage, d);
	Out.Accumulation = float4(premultipliedColor.rgb, coverage) * w;

#if PT_USE_DIFFUSION != 0
	if (collimation < 1.0f)
	{
#if FT_MULTIVIEW
		float backgroundDepth = LoadTex3D(Get(DepthTexture), Get(PointSampler), int3(In.Position.xy, VR_VIEW_ID(In.ViewID)), 0).r;
#else
		float backgroundDepth = LoadTex2D(Get(DepthTexture), Get(PointSampler), int2(In.Position.xy), 0).r;
#endif
		backgroundDepth = Get(camClipInfo)[0] / (Get(camClipInfo)[1] * backgroundDepth + Get(camClipInfo)[2]);

		const float scaling = 8.0f;
		const float focusRate = 0.1f;

		Out.Modulation.a = scaling * coverage * (1.0f - collimation) * (1.0f - focusRate / (focusRate + In.CSPosition.z - backgroundDepth)) / max(abs(In.CSPosition.z), 1e-5f);
		Out.Modulation.a *= Out.Modulation.a;
		Out.Modulation.a = max(Out.Modulation.a, 1.0f / 256.0f);
	}
	else
		Out.Modulation.a = 0.0f;
#else
	Out.Modulation.a = 0.0f;
#endif


#if PT_USE_REFRACTION != 0
	float eta = 1.0f / Get(Materials)[In.MatID].RefractionRatio;
	float2 refractionOffset = f2(0.0f);
	if (eta != 1.0f)
		refractionOffset = ComputeRefractionOffset(normalize(In.CSNormal.xyz), In.CSPosition.xyz, eta);
	Out.Refraction = refractionOffset * coverage * 8.0f;
#endif

	RETURN(Out);
}
