/*
* Copyright (c) 2017-2025 The Forge Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

// Uncomment this definition to use ray differentials method for calculating
// gradients instead of screen-space projected triangles method.
// #define USE_RAY_DIFFERENTIALS

#ifndef SAMPLE_COUNT
#define SAMPLE_COUNT 4
#endif

#include "ASMShaderDefs.h.fsl"
#include "ShaderDefs.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/VisibilityBuffer/Shaders/FSL/VisibilityBufferShadingUtilities.h.fsl"
#include "VisibilityBufferResources.h.fsl"
#include "Global.srt.h"

#define SHADOW_TYPE_ESM				0
#define SHADOW_TYPE_ASM				1
#define SHADOW_TYPE_MESH_BAKED_SDF	2
#define SHADOW_TYPE_VSM	3
#define SHADOW_TYPE_MSM	4

#if defined(METAL)
#define TEXTURE_ATOMIC_SUPPORTED 0
#else
#define TEXTURE_ATOMIC_SUPPORTED 1
#endif

#define SS_SHADOW_MAX_VALUE 0xFFFF





STRUCT(PsIn)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, ScreenPos, TEXCOORD0);
#if FT_MULTIVIEW
    DATA(FLAT(uint), ViewID, TEXCOORD3);
#endif
};

STRUCT(PsOut)
{
    DATA(float4, FinalColor, SV_Target0);
};

float2 calcVsmMoments(float2 depth)
{
	float2 moments = f2(0);
	moments.x = depth.x;
	moments.y = max(depth.y - depth.x*depth.x, gCameraUniformBlock.mVSM.mMinVariance);
	return moments;
}

float sampleScreenSpaceShadowValue(
	uint2 uv
#if FT_MULTIVIEW
	, uint viewID
#endif
)
{
	#if TEXTURE_ATOMIC_SUPPORTED
		#if FT_MULTIVIEW
			uint shadowDepthSample = LoadTex3D(gScreenSpaceShadowTexture, gClampBorderNearSampler, uint3(uv, viewID), 0).r;
		#else
			uint shadowDepthSample = LoadTex2D(gScreenSpaceShadowTexture, gClampBorderNearSampler, uv, 0).r;
		#endif
	#else
		uint index = uv.x + uv.y * uint(gCameraUniformBlock.mWindowSize.x);
		uint shadowDepthSample = gScreenSpaceShadowTexture[index];
	#endif
	return float(shadowDepthSample) / SS_SHADOW_MAX_VALUE;
}

float calcVSMShadowFactor(float3 worldPos)
{
	float4 posLS = mul(gCameraUniformBlock.mLight.mLightViewProj, float4(worldPos.xyz, 1.0));
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + f2(0.5);

	float2 depth = SampleLvlTex2D(gVSMShadowTexture, gClampMiplessLinearSampler, posLS.xy, 0).rg;
	
	float2 moments = calcVsmMoments(depth);

	float lit = float(1.0 - posLS.z <= moments.x);

	float shadingFactor =  moments.y / (moments.y + (1.0 - posLS.z - moments.x) * (1.0 - posLS.z - moments.x));
	shadingFactor = smoothstep(gCameraUniformBlock.mVSM.mBleedingReduction.x, gCameraUniformBlock.mVSM.mBleedingReduction.y, shadingFactor);

	return max(lit, shadingFactor);
}

float4 UnpackMoments(float4 packedMoments)
{
	packedMoments -= float4(0.5f, 0.0f, 0.5f, 0.0f);

	float4x4 inv = make_f4x4_row_elems(-1.0f/3.0f,  0.0f,   sqrt(3.0f),         0.0f,
										0.0f,       0.125f, 0.0f,               1.0f,
									   -0.75f,      0.0f,   0.75f * sqrt(3.0f), 0.0f,
										0.0f,      -1.125f, 0.0f,               1.0f);

	float4 unpackedMoments = mul(inv, packedMoments);
	return lerp(unpackedMoments, float4(0.0f, 0.63f, 0.0f, 0.63f), gCameraUniformBlock.mMSM.mRoundingErrorCorrection);
}

float3x3 inverse3x3(float3x3 A)
{
    float3x3 result;
    float detA = dot(A[0], cross(A[1], A[2]));
    float invDetA = 1.0 / detA;
    result[0] = invDetA * cross(A[1], A[2]);
    result[1] = invDetA * cross(A[2], A[0]);
    result[2] = invDetA * cross(A[0], A[1]);
    result = transpose(result);
    return result;
}

float ComputeMSMShadowIntensity(float4 b, float zf)
{
	//https://momentsingraphics.de/Media/I3D2015/MomentShadowMapping.pdf, Page 6, Algorithm 3: Hamburger 4MSM
	float3x3 B = float3x3(float3(1.0f, b.x, b.y),
						  float3(b.x,  b.y, b.z),
						  float3(b.y,  b.z, b.w));

	float3 c = mul(inverse3x3(B), float3(1.0f, zf, zf*zf));

	// Solve the quadratic equation c3*z^2 + c2*z + c1 = 0
	float discriminant = sqrt(c.y * c.y - 4 * c.z * c.x);

	float z2 = (-c.y - discriminant) / (2 * c.z);
	float z3 = (-c.y + discriminant) / (2 * c.z);

	if (z3 < z2)
	{
		float temp = z2;
		z2 = z3;
		z3 = temp;
	}

	float case2 = step(z2, zf) * step(zf, z3);
	float case3 = step(z3, zf);

	float result2 =		   (zf * z3 - b.x * (zf + z3) + b.y) / ((z3 - z2) * (zf - z2));
	float result3 = 1.0f - (z2 * z3 - b.x * (z2 + z3) + b.y) / ((zf - z2) * (zf - z3));

	return saturate(case2 * result2 + case3 * result3);
}

float calcMSMShadowFactor(float3 worldPos)
{
	float4 posLS = mul(gCameraUniformBlock.mLight.mLightViewProj, float4(worldPos.xyz, 1.0));
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + f2(0.5);

	float4 depthSample = SampleLvlTex2D(gMSMShadowTexture, gClampMiplessLinearSampler, posLS.xy, 0);
	float4 moments = UnpackMoments(depthSample);

	float depth = 1.0 - posLS.z;
	float shadingFactor = ComputeMSMShadowIntensity(moments, depth);
	return 1.0f - saturate(shadingFactor / gCameraUniformBlock.mMSM.mBleedingReductionMultiplier);
}


float GetASMFadeInConstant(float w)
{
	return 2.0 * frac(abs(w));
}

float PCF(float3 shadowMapCoord, float2 kernelSize )
{
    float2 tapOffset[9] =
    {
        float2( 0.00, 0.00),
        float2( 1.20, 0.00),
        float2(-1.20, 0.00),
        float2( 0.00, 1.20),
        float2( 0.00,-1.20),
        float2( 0.84, 0.84),
        float2(-0.84, 0.84),
        float2(-0.84,-0.84),
        float2( 0.84,-0.84),
    };

    float tapWeight[9] =
    {
        0.120892,
        0.110858,
        0.110858,
        0.110858,
        0.110858,
        0.111050,
        0.111050,
        0.111050,
        0.111050,
    };

    float shadowFactor = 0;
    for( int i = 0; i < 9; ++i )
    {
        float2 sampleCoord = shadowMapCoord.xy + kernelSize * tapOffset[i];

		// shadowFactor += tapWeight[i] * gDepthAtlasTexture.SampleCmpLevelZero( gShadowCmpSampler, sampleCoord, shadowMapCoord.z + gs_ASMDepthBias );
		shadowFactor += tapWeight[i] * CompareTex2D(gDepthAtlasTexture, gShadowCmpSampler, float3(sampleCoord, shadowMapCoord.z + gs_ASMDepthBias));
    }
	return shadowFactor;
}

float4 SampleFrustumIndirectionTexture(ASMFrustumDesc frustumDesc, float mip)
{
	
	float lerpVal = frac(mip);
	int floorMip = int(floor(mip));

	uint index = frustumDesc.mStartingMip + floorMip;
	float4 indirectionCoordData = f4(0);
	BeginNonUniformResourceIndex(index, 10);
		indirectionCoordData =  SampleLvlTex2D(gIndexTextureArray[ index ], gClampBorderNearSampler,  float2(frustumDesc.mIndexCoord.xy), 0);
	EndNonUniformResourceIndex();

	if(lerpVal > 0.0)
	{
		index += 1;
		float4 upperIndirectionCoordData = f4(0);
		BeginNonUniformResourceIndex(index, 10);
			indirectionCoordData =  SampleLvlTex2D(gIndexTextureArray[ index ], gClampBorderNearSampler,  float2(frustumDesc.mIndexCoord.xy), 0);
		EndNonUniformResourceIndex();

		indirectionCoordData = lerp(indirectionCoordData, upperIndirectionCoordData, lerpVal);
	}
	
	return indirectionCoordData;
	
}

//indirectionCoordData = t, aka, result of sampling indirection texture using indexCoord
float3 GetASMTileCoord(float3 indexCoord, float4 indirectionCoordData)
{
	
	indexCoord.xy = floor( abs( indirectionCoordData.w ) ) * 
		ASMOneOverDepthAtlasSize * indexCoord.xy + indirectionCoordData.xy;

	//Index coordinate z value is being subtracted here because the application is using reversed depth buffer
    indexCoord.z = indexCoord.z - indirectionCoordData.z;
    return indexCoord;
}

float3 GetIndirectionTextureCoord(float4x4 indexTexMat, float3 worldPos)
{
	return mul(indexTexMat, float4(worldPos, 1.0)).xyz;
}

bool GetClampedDepthDifference(ASMFrustumDesc frustumDesc, out(float) depthDiff)
{
	const int DEM_LOD = gs_ASMMaxRefinement;
	
	float4 indirectionCoordData = SampleFrustumIndirectionTexture(frustumDesc, float(DEM_LOD));

	if(indirectionCoordData.w > 0)
	{
		float3 asmTileCoord = GetASMTileCoord(frustumDesc.mIndexCoord, indirectionCoordData);
		float demDepth = SampleLvlTex2D(gDEMTexture, gClampMiplessLinearSampler, asmTileCoord.xy, 0).r;
		depthDiff = saturate( demDepth  - asmTileCoord.z );
		return true;
	}
	return false;
}

float SampleASMShadowMap(float mip, float kernelSize, ASMFrustumDesc frustumDesc, inout(float) fadeInFactor)
{
	float4 IndexT = SampleFrustumIndirectionTexture(frustumDesc, mip);
	float shadowFactor = 0.0;

	float2 newKernelSize = float2( kernelSize / gs_ASMDepthAtlasTextureWidth, 
		kernelSize / gs_ASMDepthAtlasTextureHeight );
	if(IndexT.w != 0)
	{
		fadeInFactor = GetASMFadeInConstant(IndexT.w);
		float3 depthTileCoord = GetASMTileCoord(frustumDesc.mIndexCoord, IndexT);
		shadowFactor = PCF(depthTileCoord, newKernelSize);
	}

	return shadowFactor;
}

float GetASMShadowFactor(float mip, float kernelSize, ASMFrustumDesc frustumDesc, ASMFrustumDesc preRenderFrustumDesc)
{
	float shadowFactor = 1.0;
	float fadeInFactor = 1.0;

	if(gASMUniformBlock.mMiscBool.x == 1.0)
	{
		float lodClamp = SampleLvlTex2D(gPrerenderLodClampTexture, 
			gClampBorderNearSampler, preRenderFrustumDesc.mIndexCoord.xy, 0).r * gs_ASMMaxRefinement;
		
		shadowFactor = SampleASMShadowMap(max(mip, lodClamp), kernelSize, preRenderFrustumDesc, fadeInFactor);
	}


	if(fadeInFactor > 0)
	{
		float otherShadowFactor = 0.0;
		float otherFadeInFactor = 1.0;

		otherShadowFactor = SampleASMShadowMap(mip, kernelSize, 
			frustumDesc, otherFadeInFactor);


		shadowFactor = lerp(shadowFactor, otherShadowFactor, fadeInFactor);
	}
	return shadowFactor;
}

float GetBlockerDistance(ASMFrustumDesc frustumDesc, float3 worldPos, 
	float4x4 indexTexMat, float3 blockerSearchDir, float mip)
{
	int absMip = int(mip);
	float3 indexCoord = GetIndirectionTextureCoord(indexTexMat, worldPos);
	uint index = frustumDesc.mStartingMip + absMip;
	float4 indirectionData = f4(0);
	BeginNonUniformResourceIndex(index, 10);
		indirectionData = SampleLvlTex2D(gIndexTextureArray[index], gClampBorderNearSampler, float2(indexCoord.xy), 0);
	EndNonUniformResourceIndex();

	float3 tileCoord = GetASMTileCoord(indexCoord, indirectionData);

	float2 tileCoordBoundsMin = floor( tileCoord.xy * ASMDepthAtlasSizeOverDepthTileSize - ASMHalfOverDepthTileSize ) * ASMDEMTileSizeOverDEMAtlasSize + ASMDEMTileCoord;
	float2 tileCoordBoundsMax = tileCoordBoundsMin + ASMDEMTileSize;

	float num = 0;
	float sum = 0;

	if(indirectionData.w != 0)
	{
		float3 sampleCoord = tileCoord;
		sampleCoord.z += 0.5 * blockerSearchDir.z * 0.1;

		LOOP
		for(int i = 0; i < 9; ++i)
		{
			float demValue = SampleLvlTex2D(gDEMTexture, gClampMiplessLinearSampler, 
				clamp(sampleCoord.xy, tileCoordBoundsMin, tileCoordBoundsMax), 0).r;

			FLATTEN if(demValue >= sampleCoord.z)
			{
				sum += demValue;
				num += 1.0;
			}
			sampleCoord += blockerSearchDir * 0.1;
		}
	
	}
	float blockerDepth = num > 0 ? sum * rcp(num) : 1.0;
	return saturate(blockerDepth - tileCoord.z) * gs_ASMTileFarPlane;
}

float SampleShadowFactor(float3 worldPos)
{
	float shadowFactor = 0.0;
	// float fadeInFactor = 0.0;
	float demLOD = gs_ASMMaxRefinement;

	ASMFrustumDesc frustumDesc;
	ASMFrustumDesc preRenderFrustumDesc;

	int swap = int(gASMUniformBlock.mMiscBool.z);
	frustumDesc.mStartingMip = swap * 5;
	preRenderFrustumDesc.mStartingMip = (1 - swap) * 5;

	float blockerDistance = 0.0;
	float preRenderBlockerDistance = 0.0;

	if(gASMUniformBlock.mMiscBool.y == 1.0)
	{
		blockerDistance = GetBlockerDistance(frustumDesc, worldPos, 
			gASMUniformBlock.mIndexTexMat, gASMUniformBlock.mSearchVector.xyz, demLOD);

		preRenderBlockerDistance = GetBlockerDistance(preRenderFrustumDesc, worldPos, 
			gASMUniformBlock.mPrerenderIndexTexMat, gASMUniformBlock.mPrerenderSearchVector.xyz, demLOD);
	}
	
	frustumDesc.mIndexCoord = GetIndirectionTextureCoord(
		gASMUniformBlock.mIndexTexMat, worldPos + blockerDistance * gASMUniformBlock.mWarpVector.xyz);
	
	preRenderFrustumDesc.mIndexCoord = GetIndirectionTextureCoord(
		gASMUniformBlock.mPrerenderIndexTexMat, worldPos + preRenderBlockerDistance * gASMUniformBlock.mPrerenderWarpVector.xyz);

	float depthDiff = 0.0;
	if(GetClampedDepthDifference(frustumDesc, depthDiff))
	{
		float penumbraSizeFactor = saturate(gASMUniformBlock.mMiscBool.w * depthDiff - 0.05);
		float kernelSize = saturate(depthDiff * 10.0 + 0.5);

		float lod = penumbraSizeFactor * gs_ASMMaxRefinement;
		float mip = floor(lod);
		
			
		
		shadowFactor = GetASMShadowFactor(mip, kernelSize, 
			frustumDesc, preRenderFrustumDesc);

		if(penumbraSizeFactor > 0.0 && penumbraSizeFactor < 1.0)
		{
			float upperShadowFactor = GetASMShadowFactor(mip + 1, kernelSize, 
				frustumDesc, preRenderFrustumDesc);

			shadowFactor = lerp(shadowFactor, upperShadowFactor, lod - mip);
		}

	}
	return 1.0 - shadowFactor;
}

// Pixel shader
ROOT_SIGNATURE(DefaultRootSignature)
PsOut PS_MAIN( PsIn In, SV_SampleIndex(uint) i )
{
	INIT_MAIN;
	PsOut Out;
#if SAMPLE_COUNT > 1
#if FT_MULTIVIEW
	float4 visRaw = LoadTex2DArrayMS(gVBPassTexture, gClampMiplessLinearSampler, uint3(In.Position.xy, In.ViewID), i);
#else
	float4 visRaw = LoadTex2DMS(gVBPassTexture, gClampMiplessLinearSampler, uint2(In.Position.xy), i);
#endif
#else
#if FT_MULTIVIEW
	float4 visRaw = LoadTex3D(gVBPassTexture, gClampMiplessLinearSampler, uint3(In.Position.xy, In.ViewID), 0);
#else
	float4 visRaw = LoadTex2D(gVBPassTexture, gClampMiplessLinearSampler, uint2(In.Position.xy), 0);
#endif/*FT_MULTIVIEW*/
#endif

	uint geomSetPrimID = packUnorm4x8(visRaw);

	// Early exit if this pixel doesn't contain triangle data
	if (geomSetPrimID == ~0u)
	{
#if FT_MULTIVIEW
	float4x4 invProjViewOrigin = gCameraUniformBlock.mInverseSkyViewProject.mat[In.ViewID];
#else
	float4x4 invProjViewOrigin = gCameraUniformBlock.mInverseSkyViewProject.mat;
#endif /*FT_MULTIVIEW*/
		float3 skyTexCoord = mul(invProjViewOrigin, float4(In.ScreenPos.x, In.ScreenPos.y, 1, 1)).xyz;
		Out.FinalColor.xyz = SampleTexCube(gSkyboxTex, gSamplerBilinearWrap, skyTexCoord).xyz;
		Out.FinalColor.w = 1.0;
		RETURN(Out);
	}

	//extract packed data
	uint primitiveID = (geomSetPrimID >> PRIM_ID_LOW_BIT) & PRIM_ID_MASK;
	uint geomSet = (geomSetPrimID >> GEOM_LOW_BIT) & GEOM_MASK;

	uint triIdx0 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 0);
	uint triIdx1 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 1);
	uint triIdx2 = INDEXBUFFER_OFFSET(geomSet) + (primitiveID * 3 + 2);

	uint index0 = LoadByte(gFilteredIndexBuffer, triIdx0 << 2);
	uint index1 = LoadByte(gFilteredIndexBuffer, triIdx1 << 2);
	uint index2 = LoadByte(gFilteredIndexBuffer, triIdx2 << 2);

	float3 v0pos = asfloat(LoadByte4(gVertexPositionBuffer, index0 * 12)).xyz;
	float3 v1pos = asfloat(LoadByte4(gVertexPositionBuffer, index1 * 12)).xyz;
	float3 v2pos = asfloat(LoadByte4(gVertexPositionBuffer, index2 * 12)).xyz;

#if FT_MULTIVIEW
	const float4x4 worldViewProjMat = gObjectUniformBlockPerFrame.mWorldViewProjMat.mat[In.ViewID];
	const float4x4 invViewProject = gCameraUniformBlock.InvViewProject.mat[In.ViewID];
	const float4x4 invProj = gCameraUniformBlock.InvProj.mat[In.ViewID];
	const float4x4 project = gCameraUniformBlock.Project.mat[In.ViewID];
#else
	const float4x4 worldViewProjMat = gObjectUniformBlockPerFrame.mWorldViewProjMat.mat;
	const float4x4 invViewProject = gCameraUniformBlock.InvViewProject.mat;
	const float4x4 invProj = gCameraUniformBlock.InvProj.mat;
	const float4x4 project = gCameraUniformBlock.Project.mat;
#endif

	float4 pos0 = mul(worldViewProjMat, float4(v0pos, 1));
	float4 pos1 = mul(worldViewProjMat, float4(v1pos, 1));
	float4 pos2 = mul(worldViewProjMat, float4(v2pos, 1));

	float4 wPos0 = mul(invViewProject,pos0);
	float4 wPos1 = mul(invViewProject,pos1);
	float4 wPos2 = mul(invViewProject,pos2);


	float2 two_over_windowsize = gCameraUniformBlock.mTwoOverRes;

	//Compute partial derivatives. This is necessary to interpolate triangle attributes per pixel.
#if defined(USE_RAY_DIFFERENTIALS)
	BarycentricDeriv derivativesOut = CalcRayBary(wPos0.xyz, wPos1.xyz, wPos2.xyz, In.ScreenPos, gCameraUniformBlock.mCameraPos.xyz, gCameraUniformBlock.InvView, invProj, two_over_windowsize);
#else
	BarycentricDeriv derivativesOut = CalcFullBary(pos0, pos1, pos2, In.ScreenPos, two_over_windowsize);
#endif /*USE_RAY_DIFFERENTIALS*/
	
	//interpoalte the 1/w (oneOverW) for all 3 vertices of the triangle
	//using the barycentric coordinates and the delta vector
	float interpolatedW = dot(float3(pos0.w, pos1.w, pos2.w),derivativesOut.m_lambda);

	//reconstruct the z value at this screen point
	float zVal = interpolatedW * getElem(project, 2, 2) + getElem(project, 3, 2);

	// Calculate the world position coordinates:
	// First the projected coordinates at this point are calculated using Screen Position and the Z value
	// Then by multiplying the perspective projected coordinates by the inverse view projection matrix, it produces world coord
	float3 WorldPos = mul(invViewProject, float4(In.ScreenPos * interpolatedW, zVal, interpolatedW)).xyz;

	//Texture coord interpolation
	f3x2 texCoords = make_f3x2_cols(
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index0 << 2)) ,
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index1 << 2)) ,
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index2 << 2)) 
	);

	/////////////LOAD///////////////////////////////
	uint materialID = gIndirectDataBuffer[index0];

	// Interpolate texture coordinates and calculate the gradients for 
	// texture sampling with mipmapping support
	GradientInterpolationResults results = Interpolate2DWithDeriv(derivativesOut,texCoords);

	float2 texCoordDX = results.dx;
	float2 texCoordDY = results.dy;
	float2 texCoord = results.interp;

	//Calculate pixel color using interpolated attributes
	//reconstruct normal map Z from X and Y

	float4 normalMapData = f4(0);
	float4 diffuseColor  = f4(0);
	float4 specularColor = f4(0);
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		normalMapData = SampleGradTex2D(gNormalMaps[materialID],   gTextureSampler, texCoord, texCoordDX, texCoordDY);
		diffuseColor  = SampleGradTex2D(gDiffuseMaps[materialID],  gTextureSampler, texCoord, texCoordDX, texCoordDY);
		specularColor = SampleGradTex2D(gSpecularMaps[materialID], gTextureSampler, texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	// reconstruct encoded normals...
	float3 reconstructedNormalMap;
	reconstructedNormalMap.xy = normalMapData.ga * 2.f - 1.f;
	reconstructedNormalMap.z = sqrt(saturate(1.f - dot(reconstructedNormalMap.xy, reconstructedNormalMap.xy)));

	//Normal interpolation
	float3x3 normals = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index0 << 2))) ,
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index1 << 2))) ,
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index2 << 2))) 
	);
	float3 normal = normalize(InterpolateWithDeriv_float3x3(derivativesOut, normals));;
	
	//Calculate pixel normal and tangent vectors
	f3x3 wPositions = make_f3x3_cols(
			wPos0.xyz,
			wPos1.xyz,
			wPos2.xyz
	);

	DerivativesOutput wPosDer = Cal3DDeriv(derivativesOut, wPositions);
	DerivativesOutput uvDer = { float3(results.dx, 0.0),  float3(results.dy, 0.0) };
	normal = perturb_normal(reconstructedNormalMap, normal, wPosDer, uvDer);

	float shadowFactor = 1.0f;

	if(gCameraUniformBlock.ShadowType == SHADOW_TYPE_ASM)
	{
		shadowFactor = SampleShadowFactor(WorldPos);
	}
	else if(gCameraUniformBlock.ShadowType == SHADOW_TYPE_ESM)
	{
		float4 posLS = mul(gCameraUniformBlock.mLight.mLightViewProj, float4(WorldPos.xyz, 1.0));
		shadowFactor = calcESMShadowFactor(posLS, gESMShadowTexture, gClampMiplessLinearSampler, gCameraUniformBlock.mEsmControl);
	}
	else if(gCameraUniformBlock.ShadowType == SHADOW_TYPE_MESH_BAKED_SDF)
	{
#if FT_MULTIVIEW
		shadowFactor = LoadTex3D(gSDFShadowTexture, gSamplerPointClamp, uint3(In.Position.xy, In.ViewID), 0).r;
#else
		shadowFactor = LoadTex2D(gSDFShadowTexture, gSamplerPointClamp, uint2(In.Position.xy), 0).r;
#endif
	}
	else if(gCameraUniformBlock.ShadowType == SHADOW_TYPE_VSM) {
		shadowFactor = calcVSMShadowFactor(WorldPos);
	}
	else if(gCameraUniformBlock.ShadowType == SHADOW_TYPE_MSM)
	{
		shadowFactor = calcMSMShadowFactor(WorldPos);
	}

	float Roughness = clamp(specularColor.a, 0.05f, 0.99f);
	float Metallic = specularColor.b;

	float3 camPos = gCameraUniformBlock.mCameraPos.xyz;

	float3 ViewVec = normalize(camPos.xyz - WorldPos.xyz);
	float NoV = dot(normal, ViewVec);

	bool isTwoSided = (geomSet == GEOMSET_ALPHA_CUTOUT) && (gMeshConstantsBuffer[materialID].twoSided == 1);
	if(isTwoSided && NoV < 0.0)
	{
		//flip normal
		normal = -normal;
		NoV = dot(normal, ViewVec);
	}

	float3 lightDir = -gCameraUniformBlock.mLight.mLightDir.xyz;

	if (bool(gCameraUniformBlock.mSSSEnabled))
	{
		#if FT_MULTIVIEW
			float screenSpaceShadowValue = sampleScreenSpaceShadowValue(uint2(In.Position.xy), In.ViewID);
		#else
			float screenSpaceShadowValue = sampleScreenSpaceShadowValue(uint2(In.Position.xy));
		#endif
		screenSpaceShadowValue = max(screenSpaceShadowValue, step(dot(lightDir, normal), 0.0f)); 
		shadowFactor = min(shadowFactor, screenSpaceShadowValue);
	}

	float3 HalfVec = normalize(ViewVec + lightDir);
	NoV = saturate(NoV);

	float NoL = dot(normal, lightDir);	

	// Deal with two faced materials
	NoL = (isTwoSided ? abs(NoL) : saturate(NoL));

	// calculate color contribution from specular lighting
	float3 F0 = f3(0.08); // 0.08 is the index of refraction
	float3 SpecularColor = lerp(F0, diffuseColor.rgb, Metallic);
	float3 DiffuseColor = lerp(diffuseColor.rgb, f3(0.0), Metallic);

	// Calculate Sun Illumation
	float3 shadedColor = PBR_shadowFactor(
					NoL, NoV, 
					ViewVec, HalfVec, normal, 
					DiffuseColor, SpecularColor, Roughness, Metallic, shadowFactor);
	shadedColor *= gCameraUniformBlock.mLight.lightColor.rgb * gCameraUniformBlock.mLight.lightColor.a * NoL * shadowFactor;

	float ambientIntencity = 0.05f;
    float3 ambient = diffuseColor.rgb * ambientIntencity;

	shadedColor += ambient;
    
    Out.FinalColor = float4(shadedColor.xyz, 1.0f);

#ifdef GPU_CRASH
	// Causing a GPU hang...
    float counter = 1.0;
    while (counter > 0.0)
    {
        Out.FinalColor.rgb += float3(0.1, 0.2, 0.3);
        counter += abs(Out.FinalColor.r);
		// Trick PlayStation compilers into thinking that the loop will finish
		counter -= 0.00000001;
    }
#endif

	RETURN(Out);
}
