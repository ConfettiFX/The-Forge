/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "Shader_Defs.h.fsl"
#define MESH_PASS
#include "vb_resources.h.fsl"

STRUCT(PsOut)
{
#ifdef USE_FLOAT4_VSM_RT
	DATA(float4, moments, SV_Target0);
#else
	DATA(float2, moments, SV_Target0);
#endif
};

PsOut PS_MAIN( PsInAlphaTested In )
{
	INIT_MAIN;
	uint materialID = In.materialID;
	float4 texColor = f4(0);
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
    	texColor = SampleLvlTex2D(Get(diffuseMaps)[materialID], Get(nearClampSampler), In.texCoord, 0);
	EndNonUniformResourceIndex();

	clip(texColor.a < 0.5f ? -1 : 1);

	float d = In.position.z;
	PsOut Out;
	Out.moments.x = d;
	Out.moments.y = d * d;
	RETURN(Out);
}