/* Write your header comments here */
#version 450 core

#extension GL_EXT_samplerless_texture_functions : enable
#extension GL_GOOGLE_include_directive : enable


#include "../../SDF_Constant.h"


layout(set = 0, binding = 0 ) uniform texture2D DepthTexture;
layout(set = 1, binding = 0) uniform texture3D SDFVolumeTextureAtlas;
layout(set = 0, binding = 2, rgba32f) uniform image2D OutTexture;
layout(set = 0, binding = 3) uniform sampler clampToEdgeTrillinearSampler;
layout(set = 0, binding = 4) uniform sampler clampToEdgeNearSampler;
layout(row_major, set = 0, binding = 5) uniform cameraUniformBlock
{
    mat4 View;
    mat4 Project;
    mat4 ViewProject;
    layout(column_major) mat4 InvView;
    mat4 InvProj;
    mat4 InvViewProject;
    vec4 mCameraPos;
    float mNear;
    float mFarNearDiff;
    float mFarNear;
    float paddingForAlignment0;
    vec2 mTwoOverRes;
    float _pad1;
    float _pad2;
    vec2 mWindowSize;
};

layout(row_major, set = 0, binding = 6) uniform meshSDFUniformBlock
{
    mat4 mWorldToVolumeMat[256];
    vec4 mUVScaleAndVolumeScale[256];
    vec4 mLocalPositionExtent[256];
    vec4 mUVAddAndSelfShadowBias[256];
    vec4 mSDFMAD[256];
    uint mNumObjects;
};

vec4 MulMat(mat4 lhs, vec4 rhs)
{
    vec4 dst;
	dst[0] = lhs[0][0]*rhs[0] + lhs[0][1]*rhs[1] + lhs[0][2]*rhs[2] + lhs[0][3]*rhs[3];
	dst[1] = lhs[1][0]*rhs[0] + lhs[1][1]*rhs[1] + lhs[1][2]*rhs[2] + lhs[1][3]*rhs[3];
	dst[2] = lhs[2][0]*rhs[0] + lhs[2][1]*rhs[1] + lhs[2][2]*rhs[2] + lhs[2][3]*rhs[3];
	dst[3] = lhs[3][0]*rhs[0] + lhs[3][1]*rhs[1] + lhs[3][2]*rhs[2] + lhs[3][3]*rhs[3];
    return dst;
}

vec2 LineBoxIntersect(vec3 RayOrigin, vec3 RayEnd, vec3 BoxMin, vec3 BoxMax)
{
    vec3 InvRayDir = (vec3 (1.0) / (RayEnd - RayOrigin));
    vec3 FirstPlaneIntersections = ((BoxMin - RayOrigin) * InvRayDir);
    vec3 SecondPlaneIntersections = ((BoxMax - RayOrigin) * InvRayDir);
    vec3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);
    vec3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);
    vec2 BoxIntersections;
    ((BoxIntersections).x = max((ClosestPlaneIntersections).x, max((ClosestPlaneIntersections).y, (ClosestPlaneIntersections).z)));
    ((BoxIntersections).y = min((FurthestPlaneIntersections).x, min((FurthestPlaneIntersections).y, (FurthestPlaneIntersections).z)));
    return clamp(BoxIntersections, 0.0, 1.0);
}
vec3 SDFVolumeDimensionPositionToUV(vec3 volumePos, vec3 uvScale, vec3 uvAdd)
{
    return ((volumePos * uvScale) + uvAdd);
}
float SampleSDFVolumeTextureAtlas(vec3 volumeUV)
{
    return textureLod(sampler3D( SDFVolumeTextureAtlas, clampToEdgeTrillinearSampler), vec3(volumeUV), 0).x;
}
void RayTraceScene(vec3 rayWorldStartPos, vec3 rayWorldEndPos, float maxRayTime, out float minRayTime, out float stepsTaken)
{
    (minRayTime = maxRayTime);
    (stepsTaken = float (0));
    for (uint index = uint (0); (index < mNumObjects); (++index))
    {
        vec3 volumeRayStart = (MulMat(mWorldToVolumeMat[index],vec4((rayWorldStartPos).xyz, 1.0))).xyz;
        vec3 volumeRayEnd = (MulMat(mWorldToVolumeMat[index],vec4((rayWorldEndPos).xyz, 1.0))).xyz;
        vec3 volumeRayDir = (volumeRayEnd - volumeRayStart);
        float volumeRayLength = length(volumeRayDir);
        (volumeRayDir /= vec3 (volumeRayLength));
        vec2 intersectionTimes = LineBoxIntersect(volumeRayStart, volumeRayEnd, (-(mLocalPositionExtent[index]).xyz), (mLocalPositionExtent[index]).xyz);
        if((((intersectionTimes).x < (intersectionTimes).y) && ((intersectionTimes).x < float (1))))
        {
            float sampleRayTime = ((intersectionTimes).x * volumeRayLength);
            float minDist = float (1000000);
            uint stepIndex = uint (0);
            uint maxSteps = uint (256);
            for (; (stepIndex < maxSteps); (++stepIndex))
            {
                vec3 sampleVolumePos = (volumeRayStart + (volumeRayDir * vec3 (sampleRayTime)));
                vec3 clampedSamplePos = clamp(sampleVolumePos, (-(mLocalPositionExtent[index]).xyz), (mLocalPositionExtent[index]).xyz);
                vec3 volumeUV = SDFVolumeDimensionPositionToUV(clampedSamplePos, (mUVScaleAndVolumeScale[index]).xyz, (mUVAddAndSelfShadowBias[index]).xyz);
                float sdfValue = SampleSDFVolumeTextureAtlas(volumeUV);
                (minDist = min(minDist, sdfValue));
                float minStepSize = (1.0 / (4.0 * float (maxSteps)));
                float curStepDist = max(sdfValue, minStepSize);
                (sampleRayTime += curStepDist);
                if(((sdfValue < float (0)) || (sampleRayTime > ((intersectionTimes).y * volumeRayLength))))
                {
                    break;
                }
            }
            if((((minDist * (mUVScaleAndVolumeScale[index]).w) < float (0)) || (stepIndex == maxSteps)))
            {
                (minRayTime = min(minRayTime, (sampleRayTime * (mUVScaleAndVolumeScale[index]).w)));
            }
            (stepsTaken += float (stepIndex));
        }
    }
}

layout(local_size_x = SDF_MESH_VISUALIZATION_THREAD_X, local_size_y = SDF_MESH_VISUALIZATION_THREAD_Y, local_size_z = 1) in;
void HLSLmain(uvec3 GroupID, uvec3 DispatchThreadID, uvec3 GroupThreadID)
{
    uvec3 localDispatchThreadID = (DispatchThreadID * uvec3 (2));
    float xClip = (((float((localDispatchThreadID).x) * 2.0) / (mWindowSize).x) - 1.0);
    float yClip = (1.0 - ((float((localDispatchThreadID).y) * 2.0) / (mWindowSize).y));
 

	vec2 depthSize = mWindowSize;
	vec2 depthUV = localDispatchThreadID.xy / depthSize;
	float depthVal = textureLod(sampler2D(DepthTexture, 
		clampToEdgeNearSampler), depthUV, 0).r;

    vec4 worldPosW = MulMat(InvViewProject,vec4(xClip, yClip, depthVal, 1.0));
    vec3 worldPos = ((worldPosW / vec4 ((worldPosW).w))).xyz;
    float traceDistance = float (40000);
    vec3 cameraWorldPos = (mCameraPos).xyz;
    vec3 rayDir = normalize((worldPos - cameraWorldPos));
    vec3 rayEndPos = (cameraWorldPos + (rayDir * vec3 (traceDistance)));
    float minRayTime = traceDistance;
    float totalStepsTaken = float (0);
    RayTraceScene(cameraWorldPos, rayEndPos, traceDistance, minRayTime, totalStepsTaken);
    float saturatedStepsTaken = clamp((totalStepsTaken / 200.0), 0.0, 1.0);
    vec3 Result = vec3(saturatedStepsTaken, saturatedStepsTaken, saturatedStepsTaken);
	//Result = cameraWorldPos;
    if((minRayTime < traceDistance))
    {
        (Result += vec3 (0.1));
    }
    imageStore(OutTexture, ivec2((DispatchThreadID).xy), vec4(vec4(Result, 1.0)));
}
void main()
{
    uvec3 GroupID;
    GroupID = gl_WorkGroupID;
    uvec3 DispatchThreadID;
    DispatchThreadID = gl_GlobalInvocationID;
    uvec3 GroupThreadID;
    GroupThreadID = gl_LocalInvocationID;
    HLSLmain(GroupID, DispatchThreadID, GroupThreadID);
}