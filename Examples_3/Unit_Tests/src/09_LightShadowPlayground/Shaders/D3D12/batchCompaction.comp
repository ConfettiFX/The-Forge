/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/
#include "Shader_Defs.h"


StructuredBuffer<UncompactedDrawArguments> uncompactedDrawArgs[NUM_CULLING_VIEWPORTS]	: register(UNIT_UNCOMPACTED_ARGS);
StructuredBuffer<uint> materialProps													: register(UNIT_MATERIAL_PROPS);

RWStructuredBuffer<uint> indirectMaterialBuffer											: register(UNIT_INDIRECT_MATERIAL_RW);
RWStructuredBuffer<uint> indirectDrawArgsBufferAlpha[NUM_CULLING_VIEWPORTS]				: register(UNIT_INDIRECT_DRAW_ARGS_ALPHA_RW);
RWStructuredBuffer<uint> indirectDrawArgsBufferNoAlpha[NUM_CULLING_VIEWPORTS]			: register(UNIT_INDIRECT_DRAW_ARGS_RW);

cbuffer visibilityBufferConstants : register(b0)
{
	float4x4 mWorldViewProjMat[NUM_CULLING_VIEWPORTS];
	CullingViewPort mCullingViewports[NUM_CULLING_VIEWPORTS];
	uint mValidNumCull;
};

[numthreads(CLEAR_THREAD_COUNT, 1, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    if (threadID.x >= MAX_DRAWS_INDIRECT - 1)
	{
		return;
	}

	uint numIndices[NUM_CULLING_VIEWPORTS];
	uint sum = 0;
	[unroll(NUM_CULLING_VIEWPORTS)]
	for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
	{
		numIndices[i] = uncompactedDrawArgs[i][threadID.x].mNumIndices;
		sum += numIndices[i];
	}

	if (sum == 0)
	{
		return;
	}
	uint slot = 0;

	[unroll(NUM_CULLING_VIEWPORTS)]
	for (uint i = 0; i < NUM_CULLING_VIEWPORTS; ++i)
	{
		if (numIndices[i] > 0)
		{
			uint matID = uncompactedDrawArgs[i][threadID.x].mMaterialID;
			bool hasAlpha = (materialProps[matID] == 1);
			uint baseMatSlot = BaseMaterialBuffer(hasAlpha, i);

			if (hasAlpha)
			{
				InterlockedAdd(indirectDrawArgsBufferAlpha[i][DRAW_COUNTER_SLOT_POS], 1, slot);
				indirectDrawArgsBufferAlpha[i][slot * 8 + 1] = numIndices[i];
				indirectDrawArgsBufferAlpha[i][slot * 8 + 3] = uncompactedDrawArgs[i][threadID.x].mStartIndex;
			}
			else
			{
				InterlockedAdd(indirectDrawArgsBufferNoAlpha[i][DRAW_COUNTER_SLOT_POS], 1, slot);
				indirectDrawArgsBufferNoAlpha[i][slot * 8 + 1] = numIndices[i];
				indirectDrawArgsBufferNoAlpha[i][slot * 8 + 3] = uncompactedDrawArgs[i][threadID.x].mStartIndex;
			}
			indirectMaterialBuffer[baseMatSlot + slot] = matID;
		}
	}
}

