/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "Shader_Defs.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "vb_resources.h.fsl"

STRUCT(PsIn)
{
	DATA(float4, Position,     SV_Position);
	DATA(float4, currPosition, TEXCOORD0);
	DATA(float4, prevPosition, TEXCOORD1);
	DATA(float2, TexCoord,     TEXCOORD2);
#if !defined(INDIRECT_ROOT_CONSTANT)
	DATA(FLAT(uint), drawId,   TEXCOORD3);
#endif
};

STRUCT(PsOut)
{
	DATA(float4, VBData,       SV_Target0);
	DATA(float2, MotionVector, SV_Target1);
};

PsOut PS_MAIN( PsIn In, SV_PrimitiveID(uint) primitiveID )
{
	INIT_MAIN;
	PsOut Out;
	uint matBaseSlot = BaseInstanceBuffer(GEOMSET_ALPHA_CUTOUT, VIEW_CAMERA); //1 is camera view, 0 is shadow map view
    uint materialID = Get(indirectMaterialBuffer)[matBaseSlot + getDrawID()];

	float4 texColor = f4(0);
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
    	texColor = SampleLvlTex2D(Get(diffuseMaps)[materialID], Get(nearClampSampler), In.TexCoord, 0);
	EndNonUniformResourceIndex();

	clip(texColor.a < 0.5f ? -1 : 1);
	Out.VBData = unpackUnorm4x8(GET_ALPHA_OUTPUT_VB_ID(getDrawID(), primitiveID));
	Out.MotionVector = In.currPosition.xy / In.currPosition.w - In.prevPosition.xy / In.prevPosition.w;
	RETURN(Out);
}
