/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include "../../../Graphics/ShaderUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/ParticleShared.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/ParticleSets.h.fsl"
#include "ShaderDefs.h.fsl"
#include "Particle.srt.h"
#include "SceneLighting.h.fsl"
#include "VisibilityBufferResources.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/ParticleUtils.h.fsl"

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float2, TexCoord, TEXCOORD0);
	DATA(FLAT(uint), Color, TEXCOORD1);
	DATA(FLAT(uint), TexIndex_ParticleType_Collided, TEXCOORD2);
};

ROOT_SIGNATURE(DefaultRootSignature)
EARLY_FRAGMENT_TESTS
void PS_MAIN( VSOutput In )
{
	INIT_MAIN;

	uint bufferIdx = gParticleConstantBuffer.ScreenSize.x * uint(In.Position.y) + uint(In.Position.x);
	if (gTransparencyListHeadsRW[bufferIdx] >= MAX_TRANSPARENCY_LAYERS)
	{
#if defined(METAL)
		clip(-1);
#endif
		RETURN();
	}

	float4 texColor;

	uint texIndex = In.TexIndex_ParticleType_Collided >> 16;

	BeginNonUniformResourceIndex(texIndex, MAX_PARTICLE_TEXTURES_COUNT);
		texColor = SampleTex2D(ParticleTextures[texIndex], gBilinearClampMiplessSampler, In.TexCoord);
	EndNonUniformResourceIndex();
	texColor = texColor * unpackUnorm4x8(In.Color); 
	texColor = (((In.TexIndex_ParticleType_Collided & 0xFF) & (PARTICLE_BITFIELD_TYPE_RAIN >> 18)) > 0 && (In.TexIndex_ParticleType_Collided & 1) == 0) ? 
		RefractLight(texColor, In.TexCoord, float2(In.Position.xy) / float2(gParticleConstantBuffer.ScreenSize)) : texColor;
	texColor.xyz = (In.TexIndex_ParticleType_Collided & 1) == 1 ? lerp(texColor.xyz, GetAmbientLight(float3(0,1,0), 0.0), SPLASHES_AMBIENT_LIGHT_INTENSITY) : texColor.xyz;

	if (texColor.w <= TRANSPARENCY_CONTRIBUTION_THRESHOLD)
	{
#if defined(METAL)
		clip(-1);
#endif
		RETURN();
	}

	SaveTransparencyEntry(gParticleConstantBuffer.ScreenSize, uint2(In.Position.xy), texColor, In.Position.z);
	
	// This saves a considerable amount of time on non-Metal platforms
#if defined(METAL)
	clip(-1);
#endif
	RETURN();
}
