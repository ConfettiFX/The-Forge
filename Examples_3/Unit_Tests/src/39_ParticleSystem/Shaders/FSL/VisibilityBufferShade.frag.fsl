/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

// USERMACRO: SAMPLE_COUNT [1,2,4]
// USERMACRO: USE_AMBIENT_OCCLUSION [0,1]
// Uncomment this definition to use ray differentials method for calculating
// gradients instead of screen-space projected triangles method.
// #define USE_RAY_DIFFERENTIALS

#include "ShaderDefs.h.fsl"
#include "VisibilityBufferResources.h.fsl"
#include "VisibilityBufferShade.srt.h"
#include "SceneLighting.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/VisibilityBuffer/Shaders/FSL/VisibilityBufferShadingUtilities.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/ParticleShared.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/ParticleSets.h.fsl"
#include "../../../../../../Common_3/Renderer/ParticleSystem/Shaders/ParticlePacking.h.fsl"


// This shader loads draw / triangle Id per pixel and reconstruct interpolated vertex data.
STRUCT(VSOutput)
{
	DATA(float4, position, SV_Position);
	DATA(float2, screenPos, TEXCOORD0);
};

ROOT_SIGNATURE(DefaultRootSignature)
float4 PS_MAIN( VSOutput In, SV_SampleIndex(uint) i )
{
	INIT_MAIN;
	// Load Visibility Buffer raw packed float4 data from render target
#if(SAMPLE_COUNT > 1)
	float4 visRaw = LoadTex2DMS(gVBTex, gDepthSampler, uint2(In.position.xy), i);
#else
	float4 visRaw = LoadTex2D(gVBTex, gDepthSampler, uint2(In.position.xy), 0);
#endif
	// Unpack float4 render target data into uint to extract data
	uint geomSetPrimID = packUnorm4x8(visRaw);

	// Early exit if this pixel doesn't contain triangle data
	if (geomSetPrimID == ~0u)
	{
		float2 ndc = (float2(In.position.xy) / (2.0 / gPerFrameConstants.twoOverRes)) * 2.0 - 1.0;
		ndc.y *= -1;
		float4 viewDirH = mul(gPerFrameConstants.invProj, float4(ndc, 1.0, 1.0));
		float3 worldDir = normalize(mul(float3x3(gPerFrameConstants.viewMat[0].xyz, gPerFrameConstants.viewMat[1].xyz, gPerFrameConstants.viewMat[2].xyz), normalize(viewDirH.xyz / viewDirH.w)));

		// Draw the skybox
		float4 skyboxCol = float4(getSkyColor(worldDir), 1.0);
		RETURN(skyboxCol);
	}
	// Extract packed data
	uint primitiveID = (geomSetPrimID >> PRIM_ID_LOW_BIT) & PRIM_ID_MASK;
	uint geomSet = (geomSetPrimID >> GEOM_LOW_BIT) & GEOM_MASK;

	uint triIdx0 = INDEXBUFFER_OFFSET(geomSet) + primitiveID * 3 + 0;
	uint triIdx1 = INDEXBUFFER_OFFSET(geomSet) + primitiveID * 3 + 1;
	uint triIdx2 = INDEXBUFFER_OFFSET(geomSet) + primitiveID * 3 + 2;

	uint index0 = LoadByte(gFilteredIndexBuffer, triIdx0 << 2);
	uint index1 = LoadByte(gFilteredIndexBuffer, triIdx1 << 2);
	uint index2 = LoadByte(gFilteredIndexBuffer, triIdx2 << 2);

	uint materialID = gIndirectDataBuffer[index0];
	MeshConstants meshConstant = gMeshConstantsBuffer[materialID];

	// Load vertex data of the 3 vertices
	float3 v0pos = asfloat(LoadByte4(gVertexPositionBuffer, index0 * 12)).xyz;
	float3 v1pos = asfloat(LoadByte4(gVertexPositionBuffer, index1 * 12)).xyz;
	float3 v2pos = asfloat(LoadByte4(gVertexPositionBuffer, index2 * 12)).xyz;

	// Transform positions to clip space
	float4 pos0 = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].mvp.mat, float4(v0pos, 1.0f));
	float4 pos1 = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].mvp.mat, float4(v1pos, 1.0f));
	float4 pos2 = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].mvp.mat, float4(v2pos, 1.0f));

	float4 wPos0 = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].invVP.mat,pos0);
	float4 wPos1 = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].invVP.mat,pos1);
	float4 wPos2 = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].invVP.mat,pos2);

	float2 two_over_windowsize = gPerFrameConstants.twoOverRes;

	// Compute partial derivatives and baycentric coordinates.
	// This is necessary to interpolate triangle attributes per pixel.
#if defined(USE_RAY_DIFFERENTIALS)
	float4x4 projInv = InverseProjectionMatrixPerspectiveReverseZ(PerFrameVBConstants.transform[VIEW_CAMERA].projection.mat);
	float4x4 viewInv = mul(PerFrameVBConstants.transform[VIEW_CAMERA].invVP.mat, PerFrameVBConstants.transform[VIEW_CAMERA].projection.mat);
	BarycentricDeriv derivativesOut = CalcRayBary(wPos0.xyz, wPos1.xyz, wPos2.xyz, In.screenPos, PerFrameConstants.camPos.xyz, viewInv, projInv, two_over_windowsize);
#else
	BarycentricDeriv derivativesOut = CalcFullBary(pos0, pos1, pos2, In.screenPos, two_over_windowsize);
#endif /*USE_RAY_DIFFERENTIALS*/

	// Interpolated 1/w (one_over_w) for all three vertices of the triangle
	// using the barycentric coordinates and the delta vector
	float w = dot(float3(pos0.w, pos1.w, pos2.w),derivativesOut.m_lambda);

	// Reconstruct the Z value at this screen point performing only the necessary matrix * vector multiplication
	// operations that involve computing Z
	float z = w * getElem(gPerFrameVBConstants.transform[VIEW_CAMERA].projection.mat, 2, 2) + getElem(gPerFrameVBConstants.transform[VIEW_CAMERA].projection.mat, 3, 2);

	// Calculate the world position coordinates:
	// First the projected coordinates at this point are calculated using In.screenPos and the computed Z value at this point.
	// Then, multiplying the perspective projected coordinates by the inverse view-projection matrix (invVP) produces world coordinates
	float3 wsPosition = mul(gPerFrameVBConstants.transform[VIEW_CAMERA].invVP.mat, float4(In.screenPos * w, z, w)).xyz;

	f3x2 texCoords = make_f3x2_cols(
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index0 << 2)) ,
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index1 << 2)) ,
			unpack2Floats(LoadByte(gVertexTexCoordBuffer, index2 << 2)) 
	);

	// Interpolate texture coordinates and calculate the gradients for texture sampling with mipmapping support
	GradientInterpolationResults results = Interpolate2DWithDeriv(derivativesOut,texCoords);
	
	float linearZ = linearizeDepth(z/w, gPerFrameConstants.CameraPlane.x, gPerFrameConstants.CameraPlane.y);
	float mip = pow(pow(linearZ, 0.9f) * 5.0f, 1.5f);
	
	float2 texCoordDX = results.dx * mip;
	float2 texCoordDY = results.dy * mip;
	float2 texCoord = results.interp;

	// CALCULATE PIXEL COLOR USING INTERPOLATED ATTRIBUTES
	// Reconstruct normal map Z from X and Y
	// "NonUniformResourceIndex" is a "pseudo" function see
	// http://asawicki.info/news_1608_direct3d_12_-_watch_out_for_non-uniform_resource_index.html

	// Get textures from arrays.
	float4 normalMapData;
	float4 diffuseColor;
	float4 specularColor;
	BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		diffuseColor  = SampleGradTex2D(gDiffuseMaps[materialID],  gTextureSampler, texCoord, texCoordDX, texCoordDY);
		normalMapData = SampleGradTex2D(gNormalMaps[materialID],   gTextureSampler, texCoord, texCoordDX, texCoordDY);
		specularColor = SampleGradTex2D(gSpecularMaps[materialID], gTextureSampler, texCoord, texCoordDX, texCoordDY);
	EndNonUniformResourceIndex();

	// reconstruct encoded normals...
	float3 reconstructedNormalMap;
	reconstructedNormalMap.xy = normalMapData.ga * 2.0f - 1.0f;
	reconstructedNormalMap.z = sqrt(1 - dot(reconstructedNormalMap.xy, reconstructedNormalMap.xy));

	// NORMAL INTERPOLATION
	float3x3 normals = make_f3x3_rows(
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index0 << 2))),
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index1 << 2))),
		decodeDir(unpackUnorm2x16(LoadByte(gVertexNormalBuffer, index2 << 2)))
	);
	float3 normal = normalize(InterpolateWithDeriv_float3x3(derivativesOut, normals));
	
	//Calculate pixel normal and tangent vectors
	f3x3 wPositions = make_f3x3_cols(
			wPos0.xyz,
			wPos1.xyz,
			wPos2.xyz
	);

	DerivativesOutput wPosDer = Cal3DDeriv(derivativesOut, wPositions);
	DerivativesOutput uvDer = { float3(results.dx, 0.0),  float3(results.dy, 0.0) };
	normal = perturb_normal(reconstructedNormalMap, normal, wPosDer, uvDer);
	
	float Roughness = clamp(specularColor.a, 0.05f, 0.99f);
	float Metallic = specularColor.b;
	if (materialID == 203)
	{
		Roughness = gPerFrameConstants.groundRoughness;
		Metallic = gPerFrameConstants.groundMetallic;
	}

	bool isTwoSided =  (geomSet == GEOMSET_ALPHA_CUTOUT) && (gMeshConstantsBuffer[materialID].twoSided == 1);

	float3 ViewVec = normalize(gPerFrameConstants.camPos.xyz - wsPosition.xyz);
	float NoV = dot(normal, ViewVec);
	float3 R = reflect(-ViewVec, normal);

	// if it is backface NoV should be < 0.0f 
	if (isTwoSided && NoV < 0.0f)
	{
		//flip normal
		normal = -normal;
		NoV = dot(normal, ViewVec);
	}

	float3 HalfVec = normalize(ViewVec - normalize(gPerFrameConstants.lightDir.xyz));
	NoV = saturate(NoV);

	float NoL = dot(normal, -normalize(gPerFrameConstants.lightDir.xyz));	

	// Deal with two faced materials
	NoL = (isTwoSided ? abs(NoL) : saturate(NoL));

	uint currentTimeOfTheDay = 0;
	for (uint f=0; f<DAY_CYCLE_KEY_FRAME_COUNT; f++)
	{
		if (gPerFrameConstants.timeOfDay > gPerFrameConstants.dayCycleKeyFrames[f / 4][f % 4])
		{
			currentTimeOfTheDay = f;
		}
	}
	

	float3 ambientDiffuse = f3(0.f);
	
	if (gPerFrameConstants.ambientLightFromSky > 0.0)
	{
		float ambientIntensity = 0.05f + gPerFrameConstants.ambientLightIntensity * pow(NoL, 2.0);
		ambientDiffuse = getSkyColor(normal).xyz * ambientIntensity;
	}
	else
	{
		uint nextTimeOfTheDay = (currentTimeOfTheDay + 1) % DAY_CYCLE_KEY_FRAME_COUNT;
		float currentKeyFrame = gPerFrameConstants.dayCycleKeyFrames[currentTimeOfTheDay/4][currentTimeOfTheDay%4];
		float nextKeyFrame = gPerFrameConstants.dayCycleKeyFrames[nextTimeOfTheDay/4][nextTimeOfTheDay%4];

		float timeOfDayT = clamp(abs(gPerFrameConstants.timeOfDay - currentKeyFrame) / 
			abs((nextTimeOfTheDay == 0 ? 1.0 - nextKeyFrame  : nextKeyFrame) - currentKeyFrame), 0.0f, 1.0f);
		float ambientIntensity = 0.05f + gPerFrameConstants.ambientLightIntensity * pow(NoL, 2.0);
		ambientDiffuse = lerp(gPerFrameConstants.ambientColors[currentTimeOfTheDay].xyz,
								gPerFrameConstants.ambientColors[nextTimeOfTheDay].xyz,
								timeOfDayT) * ambientIntensity;
		// Lightning strikes
		if((timeOfDayT >= 0.3f && timeOfDayT <= 0.32f || timeOfDayT >= 0.8f && timeOfDayT <= 0.82f) && currentTimeOfTheDay == 4){
			ambientDiffuse = float3(0.85f, 0.6f, 1.0f) * (0.05f + pow(-NoL, 2.0));
		}
	}
	
	float3 ambientSpecular = ambientDiffuse;

	float3 F0 = f3(0.08); // 0.08 is the index of refraction
	float3 SpecularColor = lerp(F0, diffuseColor.rgb, Metallic);
	float3 DiffuseColor = lerp(diffuseColor.rgb, f3(0.0), Metallic);

	// Calculate Shadow Factor
	float4 posLS = mul(gPerFrameVBConstants.transform[VIEW_SHADOW].mvp.mat, float4(wsPosition, 1.0f));
	float shadowFactor = gPerFrameConstants.lightDir.y <= 0 ? calcESMShadowFactor(posLS, gShadowMap, gDepthSampler, gPerFrameConstants.esmControl) : 0.0;

	// Calculate Sun Illumation
	float3 shadedColor = PBR_shadowFactor(
					NoL, NoV, 
					ViewVec, HalfVec, normal, 
					DiffuseColor, F0, Roughness, Metallic, shadowFactor);
	shadedColor *= gPerFrameConstants.lightColor.rgb * gPerFrameConstants.lightColor.a * NoL * shadowFactor;

	// Find the light cluster for the current pixel
	uint2 clusterCoords = uint2(floor((In.screenPos * 0.5f + 0.5f) * float2(LIGHT_CLUSTER_WIDTH * VERTICAL_SUBCLUSTER_COUNT, LIGHT_CLUSTER_HEIGHT * HORIZONTAL_SUBCLUSTER_COUNT)));
	uint numLightsInCluster = gLightClustersCount[clusterCoords.x + clusterCoords.y * LIGHT_CLUSTER_WIDTH * VERTICAL_SUBCLUSTER_COUNT];

	ParticleSet currParticleSet;
	float currShadow = 1.0;

	// Accumulate light contributions
	for (uint j = 0; j < numLightsInCluster; ++j)
	{
		uint lightId = gLightClusters[(clusterCoords.x + clusterCoords.y * LIGHT_CLUSTER_WIDTH * VERTICAL_SUBCLUSTER_COUNT) * MAX_LIGHTS_PER_CLUSTER + j];
		
		uint Bitfield = gBitfieldBuffer[lightId];
		ParticleData particle;
		GetParticleData(particle, gParticlesDataBuffer, lightId);
		currParticleSet = gParticleSetsBuffer[Bitfield & PARTICLE_BITFIELD_SET_INDEX_MASK];
		bool castShadows = (Bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHTNSHADOW) > 0;
		
		float3 pointLightPos = UnpackParticlePosition(currParticleSet, particle);
		float3 fragToLight = wsPosition - pointLightPos;
		float lightDistance = length(fragToLight);

		float modulationFactor = UnpackFadeValue(UnpackParticleAgeOverMaxAge(particle), currParticleSet.StartColor, currParticleSet.EndColor) *
									UnpackLightModulationFactor(currParticleSet, gParticleConstantBuffer.Time, lightId);
		float lightRadius = unpack2Floats(currParticleSet.LightRadiusAndVelocityNoise).x * modulationFactor;

		// Don't apply if world distance between light and fragment is more than the area of influence of the light
		if (lightDistance > lightRadius)
			continue;

		float4 particleColor = UnpackParticleColorLifetime(currParticleSet.StartColor, currParticleSet.EndColor, UnpackParticleAgeOverMaxAge(particle));

		// point light shadows
		if (castShadows)
		{
			float lightDistanceNorm = (lightDistance + 0.01) / (CAMERA_FAR - 0.01);
			float cubeDepth = 1.0 - SampleLvlTexCubeArray(gDepthCube, gTextureSampler, normalize(fragToLight), lightId).x;

			float occluderDistance = cubeDepth * (CAMERA_FAR - 0.01) + 0.01;
			// TODO: use a falloff curve instead of linear interpolation to better align with the light
			float esmAmount = lerp(0, 250, clamp((lightRadius - lightDistance) / lightRadius, 0.0, 1.0));

			float myDepth = exp(-esmAmount*2 * lightDistanceNorm);
			cubeDepth = exp(esmAmount*2 * cubeDepth);
			currShadow *= saturate(myDepth * cubeDepth);
		}

		shadedColor += calcPointLightShade(
						NoV, 
						ViewVec, normal,
						DiffuseColor, F0, Roughness, Metallic,
						wsPosition, pointLightPos, particleColor.xyz, lightRadius, isTwoSided);
	}

	float3 F = FresnelSchlickRoughness(NoV, F0, Roughness);
	float3 kS = F;
	float3 kD = f3(1.0f) - kS;
	kD *= 1.0f - Metallic;
	shadedColor += (diffuseColor.xyz * ambientDiffuse * kD + ambientSpecular * kS);

	// Save shadow data
	if (currShadow < 1.0)
		Write2D(gShadowCollectorDest, uint2(In.position.xy), saturate(currShadow));

	RETURN(float4(shadedColor, 1.0));
}
