#pragma FT_ATOMICS_64

#comp triangle_filtering.comp
#include "triangle_filtering.comp.fsl"
#end

#comp triangle_filtering_LG.comp
#define BIN_RASTER_LARGE_GROUPS
#include "triangle_filtering.comp.fsl"
#end

#comp clear_buffers.comp
#include "clear_buffers.comp.fsl"
#end

#comp clear_light_clusters.comp
#include "clear_light_clusters.comp.fsl"
#end

#comp cluster_lights.comp
#include "cluster_lights.comp.fsl"
#end

#vert display.vert
#include "display.vert.fsl"
#end

#frag godray.frag
#define SAMPLE_COUNT 1
#include "godray.frag.fsl"
#end

#comp godray_blur.comp
#include "godray_blur.comp.fsl"
#end

#frag CurveConversion.frag
#include "CurveConversion.frag.fsl"
#end

#frag display.frag
#include "display.frag.fsl"
#end

#vert skybox.vert
#include "skybox.vert.fsl"
#end

#frag skybox.frag
#include "skybox.frag.fsl"
#end

#vert visibilityBuffer_shade.vert
#include "visibilityBuffer_shade.vert.fsl"
#end

// We should have a better way of generating these
#frag visibilityBuffer_shade_SAMPLE_1.frag
#define SAMPLE_COUNT 1
#include "visibilityBuffer_shade.frag.fsl"
#end

#frag visibilityBuffer_shade_SAMPLE_1_AO.frag
#define SAMPLE_COUNT 1
#include "visibilityBuffer_shade.frag.fsl"
#end

#comp FT_METAL_NO_FAST_MATH bin_rasterizer.comp
#include "bin_rasterizer.comp.fsl"
#end

#frag visibilityBuffer_blitDepth.frag
#include "visibilityBuffer_blitDepth.frag.fsl"
#end

#comp clear_render_target.comp
#include "clear_render_target.comp.fsl"
#end
