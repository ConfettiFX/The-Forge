/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 *
 * This file(code) is licensed under a
 * Creative Commons Attribution-NonCommercial 4.0 International License
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode)
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#ifndef VB_RSM_RESOURCES_H
#define VB_RSM_RESOURCES_H

#include "../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

RES(SamplerState,  textureFilter,                     UPDATE_FREQ_NONE,      s0, binding = 0);
RES(SamplerState,  rsmFilter,                         UPDATE_FREQ_NONE,      s1, binding = 1);
RES(Buffer(uint),  indirectDataBuffer,                UPDATE_FREQ_PER_FRAME, t0, binding = 2);
RES(ByteBuffer, vertexPositionBuffer, UPDATE_FREQ_NONE, t2, binding = 3);
RES(ByteBuffer, vertexTexCoordBuffer, UPDATE_FREQ_NONE, t3, binding = 4);
RES(ByteBuffer, vertexNormalBuffer, UPDATE_FREQ_NONE, t4, binding = 5);
RES(Tex2D(float4), diffuseMaps[MAX_TEXTURE_UNITS], UPDATE_FREQ_NONE,      t5, binding = 6);

STRUCT(PsInOpaque)
{
	DATA(float4, position, SV_Position);
};

STRUCT(PsInAlphaTested)
{
	DATA(float4, position, SV_Position);
	DATA(float2, texCoord, TEXCOORD0);
    DATA(FLAT(uint), materialID, TEXCOORD1);
#ifdef USE_NORMAL
	DATA(float3,      normal,     TEXCOORD2);
#endif
};

PUSH_CONSTANT(materialRootConstant, b1)
{
	DATA(uint, viewID,       None);
	DATA(bool, useColorMaps, None);
};


float4 LoadVertex(uint index)
{
    return float4(asfloat(LoadByte4(Get(vertexPositionBuffer), index * 12)).xyz, 1);
}

float2 LoadTexCoord(uint index)
{
	return unpack2Floats(LoadByte(Get(vertexTexCoordBuffer), index << 2));
}

float3 LoadNormal(uint index)
{
	return decodeDir(unpackUnorm2x16(LoadByte(Get(vertexNormalBuffer), index << 2)));
}

#endif // VB_RSM_RESOURCES_H