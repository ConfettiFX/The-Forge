/*
 * Copyright (c) 2018-2021 Confetti Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#define PS_DRAW_ID
#include "shader_defs.h"
#include "vb_rsm_resources.h"
#include "packing.h"

STRUCT(PsIn)
{
	DATA(float4,     position, SV_Position);
	DATA(float2,     texCoord, TEXCOORD0);
#if defined(VULKAN) || defined(ORBIS) || defined(PROSPERO)
    DATA(FLAT(uint), drawID,   TEXCOORD1);
#endif
};

uint calculateOutputVBID(bool opaque, uint drawID, uint primitiveID)
{
    uint drawID_primID = ((drawID << 23) & 0x7F800000) | (primitiveID & 0x007FFFFF);
    return (opaque) ? drawID_primID : (1 << 31) | drawID_primID;
}

float4 PS_MAIN(PsIn In, SV_PrimitiveID(uint) primitiveID)
{
	INIT_MAIN;

    uint matBaseSlot = BaseMaterialBuffer(true, VIEW_CAMERA);
    uint materialID  = Get(indirectMaterialBuffer)[matBaseSlot + getDrawID()];

	float4 texColor;
    BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		texColor = SampleTex2D(Get(diffuseMaps)[materialID], Get(textureFilter), In.texCoord);
    EndNonUniformResourceIndex();

    clip(texColor.a - 0.5f);

    RETURN(unpackUnorm4x8(calculateOutputVBID(false, getDrawID(), primitiveID)));
}
