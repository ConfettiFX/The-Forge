/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"
#include "shader_defs.h.fsl"

#define SHADOW_PCF 0
#define SHADOW_ESM 1
#define SHADOW SHADOW_PCF
#ifdef TARGET_ANDROID
// GPU hang with 32 samples
#define NUM_SHADOW_SAMPLES 16
#else
#define NUM_SHADOW_SAMPLES 32
#endif

STATIC const float NUM_SHADOW_SAMPLES_INV = 0.03125;

#if NUM_SHADOW_SAMPLES == 16
STATIC const float shadowSamples[NUM_SHADOW_SAMPLES * 2] =
{
	-0.1746646, -0.7913184,

	0.08863912, -0.898169,

	0.1748409, -0.5252063,

	0.4529319, -0.384986,

	0.3857658, -0.9096935,

	0.768011, -0.4906538,

	0.6946555, 0.1605866,

	0.7986544, 0.5325912,

	0.2847693, 0.2293397,

	-0.4357893, -0.3808875,

	-0.139129, 0.2394065,

	0.4287854, 0.899425,

	-0.6924323, -0.2203967,

	-0.2611724, 0.7359962,

	-0.850104, 0.1263935,

	-0.5380967, 0.6264234,

};
#else
STATIC const float shadowSamples[NUM_SHADOW_SAMPLES * 2] =
{
	-0.1746646, -0.7913184,
	-0.129792, -0.4477116,
	0.08863912, -0.898169,
	-0.5891499, -0.6781639,
	0.1748409, -0.5252063,
	0.6483325, -0.752117,
	0.4529319, -0.384986,
	0.09757467, -0.1166954,
	0.3857658, -0.9096935,
	0.5613058, -0.1283066,
	0.768011, -0.4906538,
	0.8499438, -0.220937,
	0.6946555, 0.1605866,
	0.9614297, 0.05975229,
	0.7986544, 0.5325912,
	0.4513965, 0.5592551,
	0.2847693, 0.2293397,
	-0.2118996, -0.1609127,
	-0.4357893, -0.3808875,
	-0.4662672, -0.05288446,
	-0.139129, 0.2394065,
	0.1781853, 0.5254948,
	0.4287854, 0.899425,
	0.1289349, 0.8724155,
	-0.6924323, -0.2203967,
	-0.48997, 0.2795907,
	-0.2611724, 0.7359962,
	-0.7704172, 0.4233134,
	-0.850104, 0.1263935,
	-0.8345267, -0.4991361,
	-0.5380967, 0.6264234,
	-0.9769312, -0.1550569
};
#endif

float3 calculateIllumination(
	float3 normal,
	float3 ViewVec,
	float3 HalfVec,
	float3 ReflectVec,
	float NoL,
	float NoV,
	float3 pCamPos, float pEsmControl,
	float3 normalizedDirToLight, float4 posLS, float3 position,
	Tex2D(float) pShadowMap,
	float3 albedo,
	float3 specularColor,
	float Roughness,
	float Metallic,
	SamplerState sh,
	bool isBackface,
	float isPBR,
	inout(float) shadowFactor)
{
	// Project pixel position post-perspective division coordinates and map to [0..1] range to access the shadow map
	posLS /= posLS.w;
	posLS.y *= -1;
	posLS.xy = posLS.xy * 0.5 + float2(0.5, 0.5);

	float2 HalfGaps = float2(0.00048828125, 0.00048828125);
#if SHADOW == SHADOW_ESM
	float2 Gaps = float2(0.0009765625, 0.0009765625);
#endif

	posLS.xy += HalfGaps;

	shadowFactor = 0.0f;

	// float isInShadow = 0.0f;

	// if (all(posLS.xy > 0) && all(posLS.xy < 1))
    // if(greaterThan(posLS.xy, 0) && lessThan(posLS.xy, 1))
	if( all(GreaterThan(posLS.xy, 0)) && all(LessThan(posLS.xy, 1)))
	{
#if SHADOW == SHADOW_PCF
		// waste of shader cycles
		// Perform percentage-closer shadows with randomly rotated poisson kernel
		float shadowFilterSize = 0.0016;
		float angle = random(position, f3(20));
		float s = sin(angle);
		float c = cos(angle);

		for (int i = 0; i < NUM_SHADOW_SAMPLES; i++)
		{
			float2 offset = float2(shadowSamples[i * 2], shadowSamples[i * 2 + 1]);
			offset = float2(offset.x * c + offset.y * s, offset.x * -s + offset.y * c);
			offset *= shadowFilterSize;
			float shadowMapValue = SampleLvlTex2D(pShadowMap, sh, posLS.xy + offset, 0).x;
			shadowFactor += (shadowMapValue < posLS.z - 0.002 ? 0 : 1);
		}
		shadowFactor *= NUM_SHADOW_SAMPLES_INV;
#elif SHADOW == SHADOW_ESM
		// ESM
		float2 HalfGaps = float2(0.00048828125, 0.00048828125);
		posLS.xy += HalfGaps;
		shadowFactor = calcESMShadowFactor(posLS, pShadowMap, sh, pEsmControl);
#endif
	}


	float3 finalColor;

	if (isPBR > 0.5f)
	{
		finalColor = PBR_shadowFactor(NoL, NoV, -normalizedDirToLight, ViewVec, HalfVec, normal, albedo, specularColor, Roughness, Metallic, isBackface, shadowFactor);
	}
	else
	{
		specularColor = calculateSpecular(specularColor, pCamPos, position, -normalizedDirToLight, normal);

		finalColor = albedo + lerp(float3(0.0, 0.0, 0.0), specularColor, shadowFactor);
	}

	finalColor *= shadowFactor;

	return finalColor;
}

float3 pointLightShade(
	float3 normal,
	float3 ViewVec,
	float3 HalfVec,
	float3 ReflectVec,
	float NoL,
	float NoV,
	float3 lightPos,
	float3 lightCol,
	float3 pCamPos,
	float3 normalizedDirToLight, float4 posLS, float3 position,
	float3 albedo,
	float3 specularColor,
	float Roughness,
	float Metallic,
	bool isBackface,
	float isPBR)
{
	float3 lVec = (lightPos - position) * (1.0 / LIGHT_SIZE);
	// float3 lightVec = normalize(lVec);
	float atten = saturate(1.0f - dot(lVec, lVec));
	
	float3 finalColor;

	if (isPBR > 0.5f)
	{
		finalColor = PBR(NoL, NoV, -normalizedDirToLight, ViewVec, HalfVec, normal, albedo, specularColor, Roughness, Metallic, isBackface);
	}
	else
	{
		specularColor = calculateSpecular(specularColor, pCamPos, position, -normalizedDirToLight, normal);

		finalColor = albedo + specularColor;
	}
	   
	return lightCol * finalColor * atten;
}


float sampleDepth(
	float2 rtSize,
	float2 texCoord,
#if(SAMPLE_COUNT > 1)
	Tex2DMS(float, SAMPLE_COUNT) pDepthTex,
#else
	Tex2D(float) pDepthTex,
#endif
	SamplerState samplerState)
{
#if SAMPLE_COUNT > 1
	uint2 loc = uint2(texCoord * rtSize);
	return LoadTex2DMS(pDepthTex, samplerState, loc, 0).x;
#else
	return SampleLvlTex2D(pDepthTex, samplerState, texCoord, 0).x;
#endif
}

// Camera space position reconstruction from depth
float3 reconstructPositionCS(
	float2 texCoord,
	float depth,
	float farPlane,
	float nearPlane,
	float2 frustumPlaneSizeNormalized)
{
	float3 pos = float3(texCoord - float2(0.5f, 0.5f), 1.0f);
	pos.y *= -1.0f;
	pos.xy *= frustumPlaneSizeNormalized;
	pos *= linearizeDepthReverseZ(depth, nearPlane, farPlane);
	return pos;
}

// Camera space normal reconstruction from depth
// Based on:
// https://www.shadertoy.com/view/fsVczR
// https://twitter.com/kenpex/status/1632093409254195203/photo/1
// https://atyuwen.github.io/posts/normal-reconstruction/
// 
// Note that we deal with the "original 1/z" depth buffer, not a linear one,
// hence our formulas for dl/dr/db/dt are simpler, as depth values in
// screen-space are linear in the "original 1/z" depth buffer.
float3 reconstructNormalCS(
	float2 rtSize,
	float2 invRTSize,
	float2 texCoord,
	float farPlane,
	float nearPlane,
	float2 frustumPlaneSizeNormalized,
#if(SAMPLE_COUNT > 1)
	Tex2DMS(float, SAMPLE_COUNT) pDepthTex,
#else
	Tex2D(float) pDepthTex,
#endif
	SamplerState samplerState)
{
	float c0 = sampleDepth(rtSize, texCoord, pDepthTex, samplerState);
	float l1 = sampleDepth(rtSize, texCoord + float2(-1.0f * invRTSize.x, 0.0f), pDepthTex, samplerState);
	float l2 = sampleDepth(rtSize, texCoord + float2(-2.0f * invRTSize.x, 0.0f), pDepthTex, samplerState);
	float r1 = sampleDepth(rtSize, texCoord + float2(1.0f * invRTSize.x, 0.0f), pDepthTex, samplerState);
	float r2 = sampleDepth(rtSize, texCoord + float2(2.0f * invRTSize.x, 0.0f), pDepthTex, samplerState);
	float b1 = sampleDepth(rtSize, texCoord + float2(0.0f, -1.0f * invRTSize.y), pDepthTex, samplerState);
	float b2 = sampleDepth(rtSize, texCoord + float2(0.0f, -2.0f * invRTSize.y), pDepthTex, samplerState);
	float t1 = sampleDepth(rtSize, texCoord + float2(0.0f, 1.0f * invRTSize.y), pDepthTex, samplerState);
	float t2 = sampleDepth(rtSize, texCoord + float2(0.0f, 2.0f * invRTSize.y), pDepthTex, samplerState);

	float dl = abs( (2.0f * l1 - l2) - c0 );
	float dr = abs( (2.0f * r1 - r2) - c0 );
	float db = abs( (2.0f * b1 - b2) - c0 );
	float dt = abs( (2.0f * t1 - t2) - c0 );

	float3 ce = reconstructPositionCS(texCoord, c0, farPlane, nearPlane, frustumPlaneSizeNormalized);

	float3 dpdx = (dl < dr) ?
		ce - reconstructPositionCS(texCoord + float2(-1.0f * invRTSize.x, 0.0f), l1, farPlane, nearPlane, frustumPlaneSizeNormalized) :
		-ce + reconstructPositionCS(texCoord + float2(1.0f * invRTSize.x, 0.0f), r1, farPlane, nearPlane, frustumPlaneSizeNormalized);
	float3 dpdy = (db < dt) ?
		ce - reconstructPositionCS(texCoord + float2(0.0f, -1.0f * invRTSize.y), b1, farPlane, nearPlane, frustumPlaneSizeNormalized) :
		-ce + reconstructPositionCS(texCoord + float2(0.0f, 1.0f * invRTSize.y), t1, farPlane, nearPlane, frustumPlaneSizeNormalized);

	return normalize(cross(dpdx, dpdy));
}

float4 gatherDepthSamples(
	float2 rtSize,
	float2 texCoord,
#if(SAMPLE_COUNT > 1)
	Tex2DMS(float, SAMPLE_COUNT) pDepthTex,
#else
	Tex2D(float) pDepthTex,
#endif
	SamplerState samplerState)
{
    float4 f4Ret = f4(0);

#if SAMPLE_COUNT > 1
    uint2 loc = uint2(texCoord * rtSize);
    f4Ret.x = LoadTex2DMS(pDepthTex, samplerState, loc + uint2(0,1), 0).x;
    f4Ret.y = LoadTex2DMS(pDepthTex, samplerState, loc + uint2(1,1), 0).x;
    f4Ret.z = LoadTex2DMS(pDepthTex, samplerState, loc + uint2(1,0), 0).x;
    f4Ret.w = LoadTex2DMS(pDepthTex, samplerState, loc + uint2(0,0), 0).x;
#else
    f4Ret = GatherRedTex2D(pDepthTex, samplerState, texCoord);
#endif

    return f4Ret;
}


float calcAo(
	float3 position,
	float3 normal,
	float2 texCoord,
	float depth,
	float farPlane,
	float nearPlane,
	float2 frustumPlaneSizeNormalized)
{
	float3 samplePosition = reconstructPositionCS(texCoord, depth, farPlane, nearPlane, frustumPlaneSizeNormalized);
	float3 v = samplePosition - position;
	float distSq = dot(v, v);

	return saturate( (dot(v, normal) - 0.1f) / (1.0f + distSq) );
}

STATIC const float2 gAORingPattern[20] = 
{
    // Ring 1
    { 1, -1 },
    { 0, 1 },
    
    // Ring 2
    { 0, 3 },
    { 2, 1 },
    { 3, -1 },
    { 1, -3 },
        
    // Ring 3
    { 1, -5 },
    { 3, -3 },
    { 5, -1 },
    { 4, 1 },
    { 2, 3 },
    { 0, 5 },
    
    // Ring 4
    { 0, 7 },
    { 2, 5 },
    { 4, 3 },
    { 6, 1 },
    { 7, -1 },
    { 5, -3 },
    { 3, -5 },
    { 1, -7 },
};

float calculateAoContrib(
	float2 rtSize,
	float aoIntensity,
	uint aoQuality,
	float farPlane,
	float nearPlane,
	float2 frustumPlaneSizeNormalized,
	float2 screenCoords,
#if(SAMPLE_COUNT > 1)
	Tex2DMS(float, SAMPLE_COUNT) pDepthTex,
#else
	Tex2D(float) pDepthTex,
#endif
	SamplerState samplerState)
{
	if (aoQuality == 0)
		return 1.f;

	float2 f2InvRTSize = 1.0f / rtSize;
	float2 f2ScreenCoord = screenCoords;
	uint2 ui2ScreenCoord = uint2( f2ScreenCoord );
	float2 f2TexCoord = float2(f2ScreenCoord * f2InvRTSize);

	// Sample the center pixel for camera Z
	float fDepth = sampleDepth(rtSize, f2TexCoord, pDepthTex, samplerState);
	float fDepthLinear = linearizeDepthReverseZ(fDepth, nearPlane, farPlane);

	float3 f3Position = reconstructPositionCS(f2TexCoord, fDepth, farPlane, nearPlane, frustumPlaneSizeNormalized);
	float3 f3Normal = reconstructNormalCS(rtSize, f2InvRTSize, f2TexCoord, farPlane, nearPlane, frustumPlaneSizeNormalized, pDepthTex, samplerState);

	float4 f4Occlusion = f4(0.0f);

	// Loop through each gather location, and compare with its mirrored location
	uint numRingGathers = (aoQuality + 1) * aoQuality;
    for( uint iGather=0; iGather < numRingGathers; iGather++ )
    {
        float2 f2SampleOffSet = gAORingPattern[iGather];
        float2 f2MirrorSampleOffSet = (f2SampleOffSet + float2(1.0f, 1.0f)) * float2(-1.0f, -1.0f);
        
        // Sample
        f2TexCoord = float2(f2ScreenCoord + f2SampleOffSet) * f2InvRTSize;
        float2 f2MirrorTexCoord = float2(f2ScreenCoord + f2MirrorSampleOffSet) * f2InvRTSize;

		float4 f4SampledZ[2];

#if SAMPLE_COUNT > 1
        f4SampledZ[0] = gatherDepthSamples(rtSize, f2TexCoord, pDepthTex, samplerState);
        f4SampledZ[1] = gatherDepthSamples(rtSize, f2MirrorTexCoord, pDepthTex, samplerState);
#else
        f4SampledZ[0] = gatherDepthSamples(rtSize, f2TexCoord + 0.5f*f2InvRTSize, pDepthTex, samplerState);
        f4SampledZ[1] = gatherDepthSamples(rtSize, f2MirrorTexCoord + 0.5f*f2InvRTSize, pDepthTex, samplerState);
#endif	

		f4Occlusion.x += calcAo(f3Position, f3Normal, f2TexCoord + float2(0.0f * f2InvRTSize.x, 0.0f * f2InvRTSize.y), f4SampledZ[0].w, farPlane, nearPlane, frustumPlaneSizeNormalized);
		f4Occlusion.y += calcAo(f3Position, f3Normal, f2TexCoord + float2(1.0f * f2InvRTSize.x, 0.0f * f2InvRTSize.y), f4SampledZ[0].z, farPlane, nearPlane, frustumPlaneSizeNormalized);
		f4Occlusion.z += calcAo(f3Position, f3Normal, f2TexCoord + float2(1.0f * f2InvRTSize.x, 1.0f * f2InvRTSize.y), f4SampledZ[0].y, farPlane, nearPlane, frustumPlaneSizeNormalized);
		f4Occlusion.w += calcAo(f3Position, f3Normal, f2TexCoord + float2(0.0f * f2InvRTSize.x, 1.0f * f2InvRTSize.y), f4SampledZ[0].x, farPlane, nearPlane, frustumPlaneSizeNormalized);

		f4Occlusion.x += calcAo(f3Position, f3Normal, f2MirrorTexCoord + float2(0.0f * f2InvRTSize.x, 0.0f * f2InvRTSize.y), f4SampledZ[1].w, farPlane, nearPlane, frustumPlaneSizeNormalized);
		f4Occlusion.y += calcAo(f3Position, f3Normal, f2MirrorTexCoord + float2(1.0f * f2InvRTSize.x, 0.0f * f2InvRTSize.y), f4SampledZ[1].z, farPlane, nearPlane, frustumPlaneSizeNormalized);
		f4Occlusion.z += calcAo(f3Position, f3Normal, f2MirrorTexCoord + float2(1.0f * f2InvRTSize.x, 1.0f * f2InvRTSize.y), f4SampledZ[1].y, farPlane, nearPlane, frustumPlaneSizeNormalized);
		f4Occlusion.w += calcAo(f3Position, f3Normal, f2MirrorTexCoord + float2(0.0f * f2InvRTSize.x, 1.0f * f2InvRTSize.y), f4SampledZ[1].x, farPlane, nearPlane, frustumPlaneSizeNormalized);
    }

	// Final occlusion value
	float fOcclusion = ( f4Occlusion.x + f4Occlusion.y + f4Occlusion.z + f4Occlusion.w ) / ( 8.0f * numRingGathers );
	fOcclusion *= aoIntensity;
    fOcclusion = 1.0f - saturate( fOcclusion );

	return fOcclusion;
}
