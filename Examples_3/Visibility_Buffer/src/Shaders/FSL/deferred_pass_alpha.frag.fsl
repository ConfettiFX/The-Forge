/*
 * Copyright (c) 2018-2020 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shader_defs.h"
#include "deferred_resources.h"

STRUCT(PsIn)
{
    DATA(float4, Position, SV_Position);
    DATA(float2, TexCoord, TEXCOORD0);
    DATA(float3, Normal, TEXCOORD1);
    DATA(float3, Tangent, TEXCOORD2);
#if defined(VULKAN) || defined(ORBIS) || defined(PROSPERO)
    DATA(FLAT(uint), drawId, TEXCOORD3);
#endif
};

STRUCT(PSOut)
{
    DATA(float4, albedo, SV_Target0);
    DATA(float4, normal, SV_Target1);
    DATA(float4, specular, SV_Target2);
    DATA(float4, simulation, SV_Target3);
};

PSOut PS_MAIN( PsIn In )
{
    INIT_MAIN;
    PSOut Out;

    uint matBaseSlot = BaseMaterialBuffer(true, 1); //1 is camera view, 0 is shadow map view
    uint materialID = Get(indirectMaterialBuffer)[matBaseSlot + getDrawID()];

    float4 albedo = f4(0);
    float4 normalMapRG = f4(0);
    float4 specular = f4(0);
    BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
        albedo      = SampleTex2D(Get(diffuseMaps)[materialID],  Get(textureFilter), In.TexCoord);
        normalMapRG = SampleTex2D(Get(normalMaps)[materialID],   Get(textureFilter), In.TexCoord);
        specular    = SampleTex2D(Get(specularMaps)[materialID], Get(textureFilter), In.TexCoord);
    EndNonUniformResourceIndex();

    uint twoSided = Get(meshConstantsBuffer)[materialID].twoSided;
	clip(albedo.a - 0.5f);

    // CALCULATE PIXEL COLOR USING INTERPOLATED ATTRIBUTES
    // Reconstruct normal map Z from X and Y

    float3 reconstructedNormalMap;
    reconstructedNormalMap.xy = normalMapRG.ga * 2 - 1;
    reconstructedNormalMap.z = sqrt(1 - dot(reconstructedNormalMap.xy, reconstructedNormalMap.xy));

	float3 normal = normalize( In.Normal );
	float3 tangent = normalize( In.Tangent );
	// Calculate vertex binormal from normal and tangent
	float3 binormal = normalize(cross(tangent, normal));
    // Calculate pixel normal using the normal map and the tangent space vectors
    Out.normal = float4((reconstructedNormalMap.x * tangent + reconstructedNormalMap.y * binormal + reconstructedNormalMap.z * normal) * 0.5 + 0.5, 0.0);
    Out.albedo = albedo;	
    Out.albedo.a = twoSided > 0 ? 1.0f : 0.0f;
    
    Out.specular = specular;
    Out.simulation = f4(0);

    RETURN(Out);
}
