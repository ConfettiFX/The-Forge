/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#ifndef PARTICLE_SIMULATE_H
#define PARTICLE_SIMULATE_H

#include "../../../Graphics/ShaderUtilities.h.fsl"
#include "ShaderDefs.h.fsl"
#include "ParticleShared.h.fsl"
#include "ParticlePacking.h.fsl"
#include "ParticleRandom.h.fsl"

bool IsParticleSetVisible(ParticleSet particleSet)
{
	if (!IsParticleSetAllocated(particleSet))
		return false;

	uint2 colorBufferSize = gParticleConstantBuffer.ScreenSize;

	float4 setPosition = float4(particleSet.PositionAndInitialAge.xyz, 1.0);
	float4 clipSpacePos = mul(gParticleConstantBuffer.ViewProjTransform, setPosition);
	float3 ndcPos = clipSpacePos.xyz / clipSpacePos.w;


	float fov = 2.0 * atan(1.0 / gParticleConstantBuffer.ProjTransform[1][1]);
	float3 particleSetScale = UnpackParticleSetVisibilityVolume(particleSet.VisibilityVolume);

	float setRadius = 2.0 * max(particleSetScale.x, max(particleSetScale.y, particleSetScale.z)) * (1 / tan(fov * 0.5f)) / clipSpacePos.w;
	float ratio = float(gParticleConstantBuffer.ScreenSize.x) / float(gParticleConstantBuffer.ScreenSize.y);

	setRadius *= ratio;

	float screenRadius = length(float2(1, 1));
	float distanceToCenter = length(ndcPos.xy);

	if (distanceToCenter - screenRadius >= abs(setRadius) || clipSpacePos.w < -abs(setRadius))
	{
		return false;
	}

	return true;
}

void SaveTransparencyEntry(uint2 screenSize, uint2 coords, float4 fragColor, float fragDepth)
{
	if (fragColor.w <= TRANSPARENCY_CONTRIBUTION_THRESHOLD)
		return;

	uint listIndex, bufferIndex;
	bufferIndex = coords.y * screenSize.x + coords.x;

	if (gTransparencyListHeadsRW[bufferIndex] >= MAX_TRANSPARENCY_LAYERS)
		return;

	AtomicAdd(gTransparencyListHeadsRW[bufferIndex], 1, listIndex);

	if (listIndex >= MAX_TRANSPARENCY_LAYERS)
		return;

	// Pack AOIT data
	PackedParticleTransparencyNode node;
	node.Depth = fragDepth;
	node.Color = packUnorm4x8(fragColor);

	gTransparencyListRW[bufferIndex*MAX_TRANSPARENCY_LAYERS + listIndex] = node;
}

/* 
	Returns 0 if the particle is in the LIGHTNSHADOW section, 1 if in the LIGHT section, 2 otherwise
*/
uint GetCurrentBufferSection(uint particleIdx)
{
	if (particleIdx < MAX_SHADOW_COUNT)
		return 0;
	if (particleIdx < MAX_SHADOW_COUNT + MAX_LIGHT_COUNT)
		return 1;
	return 2;
}

uint GetBufferSectionFromBitfield(uint bitfield)
{
	if ((bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHTNSHADOW) > 0)
		return 0;
	if ((bitfield & PARTICLE_BITFIELD_LIGHTING_MODE_LIGHT) > 0)
		return 1;
	return 2;
}

/*
	Stores a particle and its bitfield in the particles / bitfield buffers, initializing the particles with 
		the attributes passed as arguments.
*/
void SaveParticle(ParticleSet particleSet, uint particleIdx, uint bitfield, float3 position, float age, float3 velocity, float animationTime)
{
	ParticleData particleData = PackParticle(particleSet, position, float4(velocity, age));
	particleData.AnimationTime = animationTime;

	SetParticleData(particleData, gParticlesDataBufferRW, particleIdx);
	gBitfieldBufferRW[particleIdx] = bitfield;
}

float4 RefractLight(float4 currColor, float2 uv, float2 screenPos)
{
	if (all(GreaterThan(screenPos.xy, 0.0f)) && all(LessThan(screenPos.xy, 1.0f))){
		// Approximate normal
		float2 spherePoint = uv * 2.0 - 1.0;
		float3 sphereNormal = normalize(float3(spherePoint.xy, sqrt(1.0 - spherePoint.x*spherePoint.x - spherePoint.y*spherePoint.y)));

		float theta = atan2(sphereNormal.x, sphereNormal.z);
		float phi = asin(sphereNormal.y);

		float2 refractCoords = clamp(float2(theta / (2 * PI), -phi / PI), -1.f, 1.f);
		refractCoords = refractCoords * REFRACTIONS_BACKGROUND_SCALE + screenPos;

		float4 refractedColor = SampleLvlTex2D(gShadedScene, gSamplerBilinearClamp, refractCoords.xy, 0);
	
		float fakeFresnel = pow(length(sphereNormal.xy), 4.0);
		float fakeFresnelSharp = pow(length(sphereNormal.xy), 8.0);
		refractedColor.w = max(refractedColor.w * uint(currColor.w > 0.0) * fakeFresnel * REFRACTIONS_FRESNEL_INTENSITY, currColor.w);
		refractedColor.xyz += f3(fakeFresnelSharp) * REFLECTIONS_FRESNEL_INTENSITY + currColor.w * currColor.xyz;
		return refractedColor;
	}
	return f4(0.f);
}

#endif // PARTICLE_SIMULATE_H
