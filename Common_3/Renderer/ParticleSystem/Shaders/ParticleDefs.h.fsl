/*
 * Copyright (c) 2017-2025 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#ifndef _PARTICLE_DEFS_H
#define _PARTICLE_DEFS_H


#define MAX_SHADOW_COUNT		8
#define MAX_LIGHT_COUNT			40000

#define MAX_STANDARD_COUNT		8000000

//Reduce total number of particles to fit storage buffer limits on Adreno GPUs
#define MAX_STANDARD_COUNT_LOW		(6500000 - MAX_LIGHT_COUNT - MAX_SHADOW_COUNT)

#define MAX_PARTICLES_COUNT_HIGH		(MAX_SHADOW_COUNT + MAX_LIGHT_COUNT + MAX_STANDARD_COUNT)
#define MAX_PARTICLES_COUNT_LOW		(MAX_SHADOW_COUNT + MAX_LIGHT_COUNT + MAX_STANDARD_COUNT_LOW)

#if !defined(USE_LOW_PRESET)
#define MAX_PARTICLES_COUNT MAX_PARTICLES_COUNT_HIGH
#else
#define MAX_PARTICLES_COUNT MAX_PARTICLES_COUNT_LOW
#endif

#define PARTICLES_BATCH_X			32
#define PARTICLES_BATCH_Y			1
#define MAX_PARTICLE_SET_COUNT		128
#define MAX_PARTICLE_TEXTURES_COUNT	16

// Threshold used to check whether or not a particle collided with the depth buffer
#define PARTICLE_COLLISION_THRESHOLD		0.5
#define MAX_PARTICLE_ATTRACTORS_COUNT		4

// The particle buffer is divided in 3 sections, one for each light mode
#define PARTICLE_BUFFER_SECTION_COUNT	3
// Maximum screen space area that allows for software rasterization. Bigger particles are forwarded to the hardware rasterizer
#define PARTICLE_HW_RASTERIZATION_THRESHOLD	64
// Max particle set size, used to clamp position values between 0 and 1
#define PARTICLE_PACKING_SCALE		64.0
// Max distance between particles to be considered neighbors
#define PARTICLE_NEIGHBOR_THRESHOLD	0.5
// Modifier to make color over speed more noticeable
#define PARTICLE_COLOR_OVER_SPEED_STRENGTH	1.2

#define ANIMATION_TEXTURE_SCALE_FACTOR		24
#define SHADOW_INTENSITY					1
#define SPLASHES_AMBIENT_LIGHT_INTENSITY	0.6
#define REFRACTIONS_BACKGROUND_SCALE		0.01
#define	REFRACTIONS_FRESNEL_INTENSITY		0.9
#define	REFLECTIONS_FRESNEL_INTENSITY		0.0
#define QUAD_VERTEX_COUNT					4

// Used to access previous/current values
#define PARTICLE_SET_VISIBILITY_FLAG_AMOUNT	4
#define PREV_VISIBILITY(i)	((i) * PARTICLE_SET_VISIBILITY_FLAG_AMOUNT)
#define CURR_VISIBILITY(i)	((i) * PARTICLE_SET_VISIBILITY_FLAG_AMOUNT + 1)
#define PREV_ALLOCATION(i)	((i) * PARTICLE_SET_VISIBILITY_FLAG_AMOUNT + 2)
#define CURR_ALLOCATION(i)	((i) * PARTICLE_SET_VISIBILITY_FLAG_AMOUNT + 3)

#define PARTICLE_BUFFER_SECTION_BOUNDS_AMOUNT	2
#define PREV_BOUND(i)	((i) * PARTICLE_BUFFER_SECTION_BOUNDS_AMOUNT)
#define CURR_BOUND(i)	((i) * PARTICLE_BUFFER_SECTION_BOUNDS_AMOUNT + 1)

#if defined(NO_FSL_DEFINITIONS) && !defined(CBUFFER)
    #define STATIC static
    #define STRUCT(NAME) struct NAME
    #define DATA(TYPE, NAME, SEM) TYPE NAME
    #define CBUFFER(NAME, FREQ, REG, BINDING) struct NAME
	#define float4x4 mat4
	#define RES(Type, Name, Frequency, u, b)
#endif

#define PARTICLE_BITFIELD_SET_INDEX_MASK 0xFFFU

#define PARTICLE_BITFIELD_STATE_BITS_MASK		0xF000U
#define PARTICLE_BITFIELD_IS_ALIVE				0x1000U
#define PARTICLE_BITFIELD_IS_ALLOCATED			0x2000U
#define PARTICLE_BITFIELD_IS_ACCELERATING		0x4000U
#define PARTICLE_BITFIELD_REQUIRES_INIT			0x8000U

#define PARTICLE_BITFIELD_HAS_COLLIDED			0x10000U
#define PARTICLE_BITFIELD_LOOP_ANIMATION		0x20000U

#define PARTICLE_BITFIELD_TYPE_BITS_MASK		0x180000U
#define PARTICLE_BITFIELD_TYPE_NONE				0x0U
#define PARTICLE_BITFIELD_TYPE_RAIN				0x80000U
#define PARTICLE_BITFIELD_TYPE_BOIDS			0x100000U
#define PARTICLE_BITFIELD_COLLIDE_WITH_DEPTH_BUFFER 0x200000U
#define PARTICLE_BITFIELD_SPAWN_FROM_SHADOW_MAP 0x10000000U

#define PARTICLE_BITFIELD_BILLBOARD_MODE_BITS_MASK 0xC00000U
#define PARTICLE_BITFIELD_BILLBOARD_MODE_SCREEN_ALIGNED 0x0U
#define PARTICLE_BITFIELD_BILLBOARD_MODE_VELOCITY_ORIENTED 0x400000U
#define PARTICLE_BITFIELD_BILLBOARD_MODE_HORIZONTAL 0x800000U

#define PARTICLE_BITFIELD_LIGHTING_MODE_BITS_MASK		0x3000000U
#define PARTICLE_BITFIELD_LIGHTING_MODE_NONE			0x0U
#define PARTICLE_BITFIELD_LIGHTING_MODE_LIGHT			0x1000000U
#define PARTICLE_BITFIELD_LIGHTING_MODE_LIGHTNSHADOW	0x2000000U

#define PARTICLE_BITFIELD_LIGHT_CULLED					0x4000000U
#define PARTICLE_BITFIELD_MODULATION_TYPE_LIFETIME		0x8000000U
#define PARTICLE_BITFIELD_MODULATION_TYPE_SPEED			0x0000000U

#define PARTICLE_DATA_STRIDE 5
STRUCT(ParticleData)
{
	DATA(uint2, VelocityAndAge, None);
	DATA(uint2, Position, None);
	DATA(float, AnimationTime, None);
};


STRUCT(ParticleSet)
{
	// float4 packed into a uint2. X,Y,Z: volume of the particle set, W: min scale of its particles (see MaxSizeAndSpeed for more info)
	DATA(uint2, SpawnVolume, None);
	// Start and End color can be used for different purposes. They can be modulated over the lifetime of the particle or over the speed of the particle.
	// In the first case the particle spwans with StartColor and dies with EndColor. In the second case its colour is StartColor at low velocities and it is
	// EndColor at high velocities.
	// Starting color of all particles in the set. float4 packed into a uint: X, Y, Z = color. W = time to complete linear fade in
	DATA(uint,	StartColor, None);
	// Ending color of all particles in the set. float4 packed into a uint: X, Y, Z = color. W = time to begin linear fade out
	DATA(uint,	EndColor, None);

	// Includes type of particle, which establishes its behaviour (flocking, rain...) and light settings, which
	// describe whether particles should cast shadows or emit lights
	DATA(uint, ParticleSetBitfield, None);
	DATA(uint, AllocatedAndAttractorIndex, None);
	// float4 packed into a uint2. X,Y,Z: start velocity. W: random velocity or not
    DATA(uint2, StartVelocity, None);

	// X, Y, Z: Position of the particle set, W: InitialAge
	DATA(float4, PositionAndInitialAge, None);
	
	// Light radius and intensity of noise on trajectory (float2 packed in a uint)
	DATA(uint, LightRadiusAndVelocityNoise, None);
	// Light pulse speed and offset (float2 packed in a uint). Pulsing is implemented using a sin wave, the speed is the multiplier of
	// the argument, while the offset is added to the result to alter the values
	DATA(uint, LightPulseSpeedAndOffset, None);
	DATA(uint, MinAndMaxAlpha, None);
	DATA(float, VelocityStretch, None);

	// Maximum size or speed, determined randomly when instantiating a particle
	DATA(uint, MaxSizeAndSpeed, None);
	// Start size and time to reach the final size
	DATA(uint, StartSizeAndTime, None);
	// End size and time when the transition to it starts
	DATA(uint, EndSizeAndTime, None);
	DATA(uint, AlivePeriod, None);

	// Forces for the flocking algorithm
	DATA(uint, BoidsSeparationSeekStrength, None);
	DATA(uint, BoidsCohesionAlignmentStrength, None);
	DATA(uint, SteeringStrengthMinSpeed, None);
	DATA(uint, Pad1, None);

	// float4 packed into a uint2. X,Y,Z: acceleration, W: animation speed
	DATA(uint2, Acceleration, None);
	// First 16 bits: primray texture index, last 16 bits: secondary texture index (used for animation on contact)
	DATA(uint, TextureIndices, None);
	// First 16 bits: amount of horizontal tiles, last 16 bits: amount of vertical tiles
	DATA(uint, AnimationTiling, None);

	// float4 packed into a uint2. X,Y,Z: visibility volume of the particle set, W: unused
	DATA(uint2, VisibilityVolume, None);
	DATA(uint, StartIdx, None);
	// Amount of particles to be spawned per second
	DATA(float, ParticlesPerSecond, None);
};

STRUCT(PackedParticleTransparencyNode)
{
	DATA(uint, Color, None);
	DATA(float, Depth, None);
};

STRUCT(ParticleTransparencyNode)
{
	// Color of the particle
	DATA(float4, Color, None);
	// Depth of the particle
	DATA(float, Depth, None);
};

STRUCT(ParticleConstantBufferData)
{
	DATA(float4x4, ViewTransform, None);
	DATA(float4x4, ProjTransform, None);
	DATA(float4x4, ViewProjTransform, None);
	DATA(float4, CameraPosition, None);

	// Points to follow when flocking
	DATA(float4, SeekPositions[MAX_PARTICLE_ATTRACTORS_COUNT], None);

	// Seed used to generate random values
	DATA(uint, Seed, None);
	// Delta time
	DATA(float, TimeDelta, None);
	// Reset particles (this is set to true when the app is loaded)
	DATA(uint, ResetParticles, None);
	// Time elapsed since the beginning of the app
	DATA(float, Time, None);
	
	// Screen size
	DATA(uint2, ScreenSize, None);
	// Camera planes
	DATA(float2, CameraPlanes, None);

	// Time of day
	DATA(float, TimeOfDay, None);
};

STRUCT(ParticleSystemStats)
{
	// One uint per particle type
	DATA(uint, AliveCount[PARTICLE_BUFFER_SECTION_COUNT], None);
	DATA(uint, VisibleLightsCount, None);

	DATA(uint, AllocatedCount[PARTICLE_BUFFER_SECTION_COUNT], None);
	DATA(uint, VisibleParticlesCount, None);

	DATA(uint, HardwareRasterized, None);
	DATA(uint, SoftwareRasterized, None);
};


#endif
