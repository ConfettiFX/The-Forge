/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#ifndef _VB_STRUCTS_H
#define _VB_STRUCTS_H

#ifdef NO_FSL_DEFINITIONS
	#define STATIC static
	#define STRUCT(NAME) struct NAME
	#define DATA(TYPE, NAME, SEM) TYPE NAME
	#define CBUFFER(NAME, REG, FREQ, BINDING) struct NAME
	#define float4x4 mat4
	#define uint uint32_t
#endif

// Input to pre skin vertexes shader
STRUCT(PreSkinBatchData)
{
	/**********************************/
	// Per Batch
	/**********************************/
	DATA(uint, vertexCount, None);         // Number of vertexes to be skinned by this batch (usually equals SKIN_BATCH_SIZE)

	// Output vertexes are written in the range [outputVertexOffset, outputVertexOffset + vertexCount)
	DATA(uint, outputVertexOffset, None);

	// Offsets to the start of the mesh in the huge Vertex Buffers
	// Position offset is different to Joint offset because the Joints/Weights buffers are smaller
	DATA(uint, vertexPositionOffset, None);
	DATA(uint, vertexJointsOffset, None);

	/**********************************/
	// Per Instance
	/**********************************/
	DATA(uint, jointMatrixOffset, None); 	// Offset into the matrix buffer that contains all matrixes for all animated objects
											
	// Padding
	DATA(uint, pad0, None);
	DATA(uint, pad1, None);
	DATA(uint, pad2, None);
};

// Buffer allocation needs to satisfy alignment requirements for the buffers, therefore the buffer doesn't necessarily start on the first
// pre-skinned output vertex slot. This structure contains the offsets to apply into the output buffers in pre_skin_vertexes, adding 
// these offsets gives us the real start where we have to write the pre-skinned vertexes.
STRUCT(PreSkinBufferOffsets)
{
	DATA(uint, vertexOffset, None);
};

#define BATCH_GEOMETRY_MASK 0x3
#define BATCH_FACE_COUNT_MASK 0x1FFC

#define BATCH_GEOMETRY_LOW_BIT 0
#define BATCH_FACE_COUNT_LOW_BIT 2

// Input to triangle filtering shader
STRUCT(FilterDispatchGroupData)
{
	DATA(uint, meshIndex, None);	  // Index into meshConstants
	DATA(uint, indexOffset, None);	  // Index relative to the meshConstants[meshIndex].indexOffset
	DATA(uint, outputIndexOffset, None); // Offset into the output index buffer
	DATA(uint, meshDispatchGroupStart, None);	// First slot for the current draw call
	DATA(uint, accumDrawIndex, None);
    DATA(uint, instanceDataIndex, None);   // Instance specific data, usually an offset into instanceData buffer but could also contain more encoded data in different bits

	//   - geometrySet: 2 bits (we have 3 geometry sets: OPAQUE, ALPHA_CUTOUT, ALPHA_BLEND)
    //   - faceCount: 11 bits (this depends on VB_COMPUTE_THEADS, which has a max of 1024 so 11 bits are enough)
	//   - 19 bit free
	DATA(uint, geometrySet_faceCount, None); 
	DATA(uint, _pad0, None); 
};

STRUCT(CullingViewPort)
{
	DATA(float2, windowSize,  None);
	DATA(uint,   sampleCount, None);
	DATA(uint,   _pad0,       None);
};

STRUCT(UncompactedDrawArguments)
{
	DATA(uint, numIndices, None);
	DATA(uint, startIndex, None);
	DATA(uint, vertexOffset, None);
	DATA(uint, geometrySet, None);
	DATA(uint, instanceDataIndex, None);
};

STRUCT(Transform)
{
	DATA(float4x4, mvp, None);
	DATA(float4x4, invVP, None);
	DATA(float4x4, vp, None);
	DATA(float4x4, view, None);
	DATA(float4x4, projection, None);
	DATA(float2, cameraPlane, None); //x : near, y : far
    DATA(float2, _pad0, None);
};

#endif //!_VB_STRUCTS_H
